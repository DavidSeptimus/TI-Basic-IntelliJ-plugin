// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TIBasic.flex

package nl.petertillema.tibasic.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import nl.petertillema.tibasic.psi.TIBasicTypes;


class TIBasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\31\u0100\1\u0400\1\u0500\1\u0100"+
    "\1\u0600\1\u0700\1\u0800\1\u0900\1\u0100\1\u0a00\5\u0100\1\u0b00"+
    "\322\u0100\1\u0c00\325\u0100\1\u0d00\1\u0e00\1\u0f00\41\u0100\1\u1000"+
    "\u0d8a\u0100\1\u1100\u017c\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\7\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\31"+
    "\1\12\1\7\1\33\1\34\1\35\1\36\1\7\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\0\1\72\1\73\1\74\1\12\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\42\0\1\7\6\0"+
    "\1\7\7\0\1\7\1\0\1\133\1\134\1\7\2\0"+
    "\1\7\1\0\1\135\5\0\4\7\1\0\1\7\2\0"+
    "\11\7\1\0\4\7\1\0\2\7\1\0\4\7\2\0"+
    "\4\7\1\0\1\7\2\0\11\7\1\0\4\7\1\0"+
    "\1\7\2\0\4\7\u0136\0\1\7\153\0\1\7\23\0"+
    "\1\7\25\0\1\136\31\0\1\137\36\0\1\140\1\0"+
    "\1\141\217\0\1\142\16\0\1\143\2\0\1\7\2\0"+
    "\1\7\7\0\5\7\2\0\1\144\2\0\2\7\3\0"+
    "\1\145\1\7\1\0\1\146\1\7\2\0\1\147\77\0"+
    "\1\150\23\0\1\151\44\0\1\7\43\0\1\7\362\0"+
    "\1\152\63\0\1\153\220\0\2\7\10\0\1\154\35\0"+
    "\1\155\66\0\1\156\4\0\1\157\1\160\1\161\1\162"+
    "\3\163\3\164\u0107\0\3\7\162\0\1\165\23\0\1\166"+
    "\5\0\1\7\12\0\1\7\64\0\1\7\3\0\2\7"+
    "\244\0\1\7\55\0\1\7\u0168\0\1\7\30\0\1\167"+
    "\11\0\1\170\125\0\1\7\u0147\0\1\7\242\0\1\171"+
    "\114\0\1\172\3\0\1\173\4\0\1\174\63\0\1\175"+
    "\u0151\0\1\176\223\0\1\177\311\0\1\7\1\0\1\7"+
    "\3\0\1\7\1\0\1\7\u01ad\0\1\7\12\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4608];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\1\4\5\3\3\5\2\3"+
    "\31\6\32\3\1\1\3\3\1\6\5\3\2\1\3\3"+
    "\1\5\1\3\1\1\1\7\1\1\2\10\1\11\2\12"+
    "\1\13\1\11\10\0\1\5\1\14\3\0\1\5\73\0"+
    "\1\15\57\0\1\3\31\0\2\16\137\0\1\3\12\0"+
    "\1\17\26\0\1\3\4\0\1\3\1\20\5\0\2\3"+
    "\1\0\1\3\1\21\2\0\1\22\3\0\1\5\17\0"+
    "\1\23\40\0\1\24\2\0\1\24\47\0\1\3\27\0"+
    "\1\25\14\0\1\24\35\0\1\26\23\0\1\27\42\0"+
    "\1\3\105\0\1\15\52\0\1\30\14\0\1\3\2\0"+
    "\1\24\77\0\1\31\121\0\1\3\4\0\1\32\32\0"+
    "\1\15\57\0\1\24\24\0\1\24\17\0\1\3\6\0"+
    "\1\24\105\0\1\3\3\0\1\6\13\0\1\15\17\0"+
    "\1\24\122\0\1\32\25\0\1\3\7\0\1\15\324\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\200\0\u0100\0\u0180\0\u0200\0\u0180\0\u0280\0\u0300"+
    "\0\u0380\0\u0180\0\u0180\0\u0400\0\u0480\0\u0500\0\u0580\0\u0600"+
    "\0\u0680\0\u0700\0\u0780\0\u0800\0\u0880\0\u0900\0\u0980\0\u0a00"+
    "\0\u0a80\0\u0b00\0\u0b80\0\u0c00\0\u0c80\0\u0180\0\u0d00\0\u0d80"+
    "\0\u0e00\0\u0e80\0\u0f00\0\u0f80\0\u1000\0\u1080\0\u1100\0\u1180"+
    "\0\u1200\0\u1280\0\u1300\0\u1380\0\u1400\0\u1480\0\u1500\0\u1580"+
    "\0\u1600\0\u1680\0\u1700\0\u1780\0\u1800\0\u1880\0\u1900\0\u1980"+
    "\0\u1a00\0\u1a80\0\u1b00\0\u1b80\0\u1c00\0\u1c80\0\u1d00\0\u1d80"+
    "\0\u1e00\0\u1e80\0\u1f00\0\u1f80\0\u2000\0\u2080\0\u2100\0\u2180"+
    "\0\u2200\0\u2280\0\u2300\0\u2380\0\u2400\0\u2480\0\u2500\0\u2180"+
    "\0\u2580\0\u2600\0\u2680\0\u2700\0\u2780\0\u2800\0\u0180\0\u2880"+
    "\0\u2900\0\u0180\0\u2780\0\u2980\0\u2a00\0\u0180\0\u0180\0\u2a80"+
    "\0\u0180\0\u2b00\0\u0200\0\u0580\0\u2b80\0\u2c00\0\u2c80\0\u2d00"+
    "\0\u2d80\0\u2e00\0\u2e80\0\u2f00\0\u2f80\0\u3000\0\u3080\0\u3100"+
    "\0\u3180\0\u3200\0\u3280\0\u3300\0\u3380\0\u3400\0\u3480\0\u3500"+
    "\0\u3580\0\u3600\0\u3680\0\u3700\0\u3780\0\u3800\0\u3880\0\u3900"+
    "\0\u3980\0\u3a00\0\u3a80\0\u3b00\0\u3b80\0\u3c00\0\u3c80\0\u3d00"+
    "\0\u3d80\0\u3e00\0\u3e80\0\u3f00\0\u3f80\0\u4000\0\u4080\0\u4100"+
    "\0\u4180\0\u4200\0\u4280\0\u4300\0\u4380\0\u4400\0\u4480\0\u4500"+
    "\0\u4580\0\u4600\0\u4680\0\u4700\0\u4780\0\u4800\0\u4880\0\u4900"+
    "\0\u4980\0\u4a00\0\u4a80\0\u4b00\0\u4b80\0\u4c00\0\u4c80\0\u4d00"+
    "\0\u4d80\0\u4e00\0\u4e80\0\u0180\0\u4f00\0\u4f80\0\u5000\0\u5080"+
    "\0\u5100\0\u5180\0\u5200\0\u5280\0\u5300\0\u5380\0\u5400\0\u5480"+
    "\0\u5500\0\u5580\0\u5600\0\u5680\0\u5700\0\u5780\0\u5800\0\u5880"+
    "\0\u5900\0\u5980\0\u5a00\0\u5a80\0\u5b00\0\u5b80\0\u5c00\0\u5c80"+
    "\0\u5d00\0\u5d80\0\u5e00\0\u5e80\0\u5f00\0\u5f80\0\u6000\0\u6080"+
    "\0\u6100\0\u6180\0\u6200\0\u6280\0\u6300\0\u6380\0\u6400\0\u6480"+
    "\0\u6500\0\u6580\0\u6600\0\u6680\0\u6700\0\u6780\0\u6800\0\u6880"+
    "\0\u6900\0\u6980\0\u6a00\0\u6a80\0\u6b00\0\u6b80\0\u6c00\0\u6c80"+
    "\0\u6d00\0\u6d80\0\u6e00\0\u6e80\0\u6f00\0\u6f80\0\u7000\0\u7080"+
    "\0\u7100\0\u7180\0\u7200\0\u7280\0\u7300\0\u0180\0\u7200\0\u7380"+
    "\0\u7400\0\u7480\0\u7500\0\u7580\0\u7600\0\u7680\0\u7700\0\u7780"+
    "\0\u7800\0\u7880\0\u7900\0\u2900\0\u7980\0\u7a00\0\u7a80\0\u7b00"+
    "\0\u7b80\0\u7c00\0\u7c80\0\u7d00\0\u7d80\0\u7e00\0\u7e80\0\u7f00"+
    "\0\u7f80\0\u8000\0\u8080\0\u8100\0\u8180\0\u8200\0\u8280\0\u8300"+
    "\0\u8380\0\u8400\0\u8480\0\u8500\0\u8580\0\u8600\0\u8680\0\u8700"+
    "\0\u8780\0\u8800\0\u8880\0\u8900\0\u8980\0\u8a00\0\u8a80\0\u8b00"+
    "\0\u8b80\0\u8c00\0\u8c80\0\u8d00\0\u8d80\0\u8e00\0\u8e80\0\u8f00"+
    "\0\u8f80\0\u9000\0\u9080\0\u9100\0\u9180\0\u9200\0\u9280\0\u9300"+
    "\0\u9380\0\u9400\0\u2800\0\u9480\0\u9500\0\u9580\0\u9600\0\u9680"+
    "\0\u9700\0\u9780\0\u9800\0\u9880\0\u9900\0\u9980\0\u9a00\0\u9a80"+
    "\0\u9b00\0\u9b80\0\u9c00\0\u2680\0\u9c80\0\u9d00\0\u9d80\0\u9e00"+
    "\0\u9e80\0\u9f00\0\u9f80\0\ua000\0\ua080\0\ua100\0\ua180\0\ua200"+
    "\0\ua280\0\ua300\0\ua380\0\u2500\0\ua400\0\ua480\0\ua500\0\ua580"+
    "\0\ua600\0\u0180\0\ua680\0\ua700\0\ua780\0\ua800\0\ua880\0\ua900"+
    "\0\ua980\0\uaa00\0\uaa80\0\uab00\0\uab80\0\uac00\0\uac80\0\uad00"+
    "\0\uad80\0\uae00\0\uae80\0\uaf00\0\uaf80\0\ub000\0\ub080\0\ub100"+
    "\0\ub180\0\ub200\0\ub280\0\ub300\0\ub380\0\ub400\0\u0180\0\ub480"+
    "\0\ub500\0\ub580\0\ub600\0\ub680\0\ub700\0\ub780\0\ub800\0\ub880"+
    "\0\u0180\0\ub900\0\ub980\0\u0180\0\uba00\0\uba80\0\ubb00\0\ubb80"+
    "\0\ubb80\0\ubc00\0\ubc80\0\ubd00\0\ubd80\0\ube00\0\ube80\0\ubf00"+
    "\0\ubf80\0\uc000\0\uc080\0\uc100\0\uc180\0\uc200\0\uc280\0\u0180"+
    "\0\uc300\0\uc380\0\uc400\0\uc480\0\uc500\0\uc580\0\uc600\0\uc680"+
    "\0\uc700\0\uc780\0\uc800\0\uc880\0\uc900\0\uc980\0\uca00\0\uca80"+
    "\0\ucb00\0\ucb80\0\ucc00\0\ucc80\0\ucd00\0\ucd80\0\uce00\0\uce80"+
    "\0\ucf00\0\ucf80\0\ud000\0\ud080\0\ud100\0\ud180\0\ud200\0\ud280"+
    "\0\ud300\0\ud380\0\ud400\0\u0180\0\ud480\0\ud500\0\ud580\0\ud600"+
    "\0\ud680\0\ud700\0\ud780\0\ud800\0\ud880\0\ud900\0\ud980\0\uda00"+
    "\0\uda80\0\udb00\0\udb80\0\udc00\0\udc80\0\udd00\0\udd80\0\ude00"+
    "\0\ude80\0\udf00\0\udf80\0\ue000\0\ue080\0\ue100\0\ue180\0\ue200"+
    "\0\ue280\0\ue300\0\ue380\0\ue400\0\ue480\0\ue500\0\ue580\0\ue600"+
    "\0\ue680\0\ue700\0\ue780\0\ue800\0\ue880\0\ue900\0\ue980\0\uea00"+
    "\0\uea80\0\ueb00\0\ueb80\0\uec00\0\uec80\0\ued00\0\ued80\0\uee00"+
    "\0\uee80\0\uef00\0\uef80\0\uf000\0\uf080\0\uf100\0\uf180\0\uf200"+
    "\0\uf280\0\uf300\0\uf380\0\u0180\0\uf400\0\uf480\0\uf500\0\uf580"+
    "\0\uf600\0\uf680\0\uf700\0\uf780\0\uf800\0\uf880\0\uf900\0\uf980"+
    "\0\ufa00\0\ufa80\0\ufb00\0\ufb80\0\ufc00\0\ufc80\0\ufd00\0\ufd80"+
    "\0\ufe00\0\ufe80\0\uff00\0\uff80\1\0\1\200\1\u0100\1\u0180"+
    "\1\u0200\1\u0280\1\u0300\1\u0380\1\u0400\1\u0480\1\u0500\1\u0580"+
    "\1\u0600\1\u0680\1\u0700\1\u0780\1\u0800\1\u0880\0\u0180\1\u0900"+
    "\1\u0980\1\u0a00\1\u0a80\1\u0b00\1\u0b80\1\u0c00\1\u0c80\1\u0d00"+
    "\1\u0d80\1\u0e00\1\u0e80\1\u0f00\1\u0f80\1\u1000\1\u1080\1\u1100"+
    "\1\u1180\1\u1200\0\u0180\1\u1280\1\u1300\1\u1380\1\u1400\1\u1480"+
    "\1\u1500\1\u1580\1\u1600\1\u1680\1\u1700\1\u1780\1\u1800\1\u1880"+
    "\1\u1900\1\u1980\1\u1a00\1\u1a80\1\u1b00\1\u1b80\1\u1c00\1\u1c80"+
    "\1\u1d00\1\u1d80\1\u1e00\1\u1e80\1\u1f00\1\u1f80\1\u2000\1\u2080"+
    "\1\u2100\1\u2180\1\u2200\1\u2280\1\u2300\1\u2380\1\u2400\1\u2480"+
    "\1\u2500\1\u2580\1\u2600\1\u2680\1\u2700\1\u2780\1\u2800\1\u2880"+
    "\1\u2900\1\u2980\1\u2a00\1\u2a80\1\u2b00\1\u2b80\1\u2c00\1\u2c80"+
    "\1\u2d00\1\u2d80\1\u2e00\1\u2e80\1\u2f00\1\u2f80\1\u3000\1\u3080"+
    "\1\u3100\1\u3180\1\u3200\1\u3280\1\u3300\1\u3380\1\u3400\1\u3480"+
    "\1\u3500\1\u3580\1\u3600\1\u3680\1\u3700\1\u3780\1\u3800\1\u3880"+
    "\1\u3900\1\u3980\1\u3a00\1\u3a80\1\u3b00\1\u3b80\1\u3c00\1\u3c80"+
    "\1\u3d00\1\u3d80\1\u3e00\1\u3e80\1\u3f00\1\u3f80\1\u4000\1\u4080"+
    "\1\u4100\1\u4180\1\u4200\1\u4280\1\u4300\1\u4380\1\u4400\1\u4480"+
    "\1\u4500\1\u4580\1\u4600\1\u4680\1\u4700\1\u4780\1\u4800\1\u4880"+
    "\1\u4900\1\u4980\1\u4a00\1\u4a80\1\u4b00\1\u4b80\1\u4c00\1\u4c80"+
    "\1\u4d00\1\u4d80\1\u4e00\1\u4e80\1\u4f00\1\u4f80\1\u5000\1\u5080"+
    "\1\u5100\1\u5180\1\u5200\1\u5280\1\u5300\1\u5380\1\u5400\1\u5480"+
    "\1\u5500\1\u5580\1\u5600\1\u5680\1\u5700\1\u5780\1\u5800\1\u5880"+
    "\1\u5900\1\u5980\1\u5a00\1\u5a80\1\u5b00\1\u5b80\0\u0180\1\u5c00"+
    "\1\u5c80\1\u5d00\1\u5d80\1\u5e00\1\u5e80\1\u5f00\1\u5f80\1\u6000"+
    "\1\u6080\1\u6100\1\u6180\1\u6200\1\u6280\1\u6300\1\u6380\1\u6400"+
    "\1\u6480\1\u6500\1\u6580\1\u6600\1\u6680\1\u6700\1\u6780\1\u6800"+
    "\1\u6880\1\u6900\1\u6980\1\u6a00\1\u6a80\1\u6b00\1\u6b80\1\u6c00"+
    "\1\u6c80\1\u6d00\1\u6d80\1\u6e00\1\u6e80\1\u6f00\1\u6f80\1\u7000"+
    "\1\u7080\1\u7100\1\u7180\1\u7200\1\u7280\1\u7300\1\u7380\1\u7400"+
    "\1\u7480\1\u7500\1\u7580\1\u7600\1\u7680\1\u7700\1\u7780\1\u7800"+
    "\1\u7880\1\u7900\1\u7980\1\u7a00\1\u7a80\1\u7b00\1\u7b80\1\u7c00"+
    "\1\u7c80\1\u7d00\1\u7d80\1\u7e00\1\u7e80\1\u7f00\1\u7f80\1\u8000"+
    "\1\u8080\1\u8100\1\u8180\1\u8200\1\u8280\1\u8300\0\u0180\1\u8380"+
    "\1\u8400\1\u8480\1\u8500\1\u8580\1\u8600\1\u8680\1\u8700\1\u8780"+
    "\1\u8800\1\u8880\1\u8900\1\u8980\1\u8a00\1\u8a80\1\u8b00\1\u8b80"+
    "\1\u8c00\1\u8c80\1\u8d00\1\u8d80\1\u8e00\1\u8e80\1\u8f00\1\u8f80"+
    "\1\u9000\1\u9080\1\u9100\1\u9180\1\u9200\1\u9280\1\u9300\1\u9380"+
    "\1\u9400\1\u9480\1\u9500\1\u9580\1\u9600\1\u9680\1\u9700\1\u9780"+
    "\1\u9800\1\u9880\1\u9900\1\u9980\1\u9a00\1\u9a80\1\u9b00\1\u9b80"+
    "\1\u9c00\1\u9c80\1\u9d00\1\u9d80\1\u9e00\1\u9e80\1\u9f00\1\u9f80"+
    "\1\ua000\1\ua080\1\ua100\1\ua180\1\ua200\1\ua280\1\ua300\1\ua380"+
    "\1\ua400\1\ua480\1\ua500\1\ua580\1\ua600\1\ua680\1\ua700\1\ua780"+
    "\1\ua800\1\ua880\1\ua900\1\ua980\1\uaa00\1\uaa80\1\uab00\1\uab80"+
    "\1\uac00\1\uac80\1\uad00\1\uad80\1\uae00\1\uae80\1\uaf00\1\uaf80"+
    "\1\ub000\1\ub080\1\ub100\1\ub180\1\ub200\1\ub280\1\ub300\1\ub380"+
    "\1\ub400\1\ub480\1\ub500\1\ub580\1\ub600\1\ub680\1\ub700\1\ub780"+
    "\1\ub800\1\ub880\1\ub900\1\ub980\1\uac00\1\uba00\1\uba80\1\ubb00"+
    "\1\ubb80\1\ubc00\1\ubc80\1\ubd00\1\ubd80\1\ube00\1\ube80\1\ubf00"+
    "\1\ubf80\1\uc000\1\uc080\1\uc100\1\uc180\1\uc200\1\uc280\1\uc300"+
    "\1\uc380\1\uc400\1\uc480\1\uc500\1\uc580\1\uc600\1\uc680\1\uc700"+
    "\1\uc780\1\uc800\1\uc880\1\uc900\1\uc980\1\uca00\1\uca80\1\ucb00"+
    "\1\ucb80\1\ucc00\1\ucc80\1\ucd00\1\ucd80\1\uce00\1\uce80\1\ucf00"+
    "\1\ucf80\1\ud000\1\ud080\1\ud100\1\ud180\1\ud200\1\ud280\1\ud300"+
    "\1\ud380\1\ud400\1\ud480\1\ud500\1\ud580\1\ud600\1\ud680\1\ud700"+
    "\1\ud780\1\ud800\1\ud880\1\ud900\1\ud980\1\uda00\1\uda80\1\udb00"+
    "\1\udb80\1\udc00\1\udc80\1\udd00\1\udd80\1\u7c00\1\u6380\1\ude00"+
    "\1\ude80\1\udf00\1\udf80\1\ue000\1\ue080\1\ue100\1\ue180\1\ue200"+
    "\1\ue280\1\ue300\1\ue380\1\ue400\1\ue480\1\ue500\1\ue580\1\ue600"+
    "\1\ue680\1\ue700\1\ue780\1\ue800\1\ue880\1\ue900\1\ue980\1\uea00"+
    "\1\uea80\1\ueb00\1\ueb80\1\uec00\1\uec80\1\ued00\1\ued80\1\uee00"+
    "\1\uee80\1\uef00\1\uef80\1\uf000\1\uf080\1\uf100\1\uf180\1\uf200"+
    "\1\uf280\1\uf300\1\uf380\1\uf400\1\uf480\1\uf500\1\uf580\1\uf600"+
    "\1\uf680\0\u2780\1\uf700\1\uf780\1\uf800\0\ub880\1\uf880\1\uf900"+
    "\1\uf980\1\ufa00\1\ufa80\1\ufb00\1\ufb80\1\ufc00\1\ufc80\1\ufd00"+
    "\1\ufd80\1\ufe00\1\ufe80\1\uff00\1\uff80\2\0\2\200\2\u0100"+
    "\2\u0180\2\u0200\2\u0280\2\u0300\2\u0380\2\u0400\2\u0480\2\u0500"+
    "\2\u0580\2\u0600\2\u0680\2\u0700\2\u0780\2\u0800\2\u0880\2\u0900"+
    "\2\u0980\2\u0a00\2\u0a80\2\u0b00\2\u0b80\2\u0c00\2\u0c80\2\u0d00"+
    "\2\u0d80\2\u0e00\2\u0e80\2\u0f00\2\u0f80\2\u1000\2\u1080\2\u1100"+
    "\2\u1180\2\u1200\2\u1280\2\u1300\2\u1380\2\u1400\2\u1480\2\u1500"+
    "\2\u1580\2\u1600\2\u1680\2\u1700\2\u1780\2\u1800\2\u1880\2\u1900"+
    "\2\u1980\2\u1a00\0\u4d80\2\u1a80\2\u1b00\2\u1b80\2\u1c00\2\u1c80"+
    "\2\u1d00\2\u1d80\2\u1e00\2\u1e80\2\u1f00\2\u1f80\2\u2000\2\u2080"+
    "\2\u2100\2\u2180\2\u2200\2\u2280\2\u2300\2\u2380\2\u2400\2\u2480"+
    "\2\u2500\2\u2580\2\u2600\2\u2680\2\u2700\2\u2780\2\u2800\2\u2880"+
    "\2\u2900\2\u2980\2\u2a00\2\u2a80\2\u2b00\2\u2b80\2\u2c00\2\u2c80"+
    "\2\u2d00\2\u2d80\2\u2e00\2\u2e80\2\u2f00\2\u2f80\2\u3000\2\u3080"+
    "\2\u3100\2\u3180\2\u3200\2\u3280\2\u3300\2\u3380\2\u3400\2\u3480"+
    "\2\u3500\2\u3580\2\u3600\2\u3680\2\u3700\2\u3780\2\u3800\2\u3880"+
    "\2\u3900\2\u3980\2\u3a00\2\u3a80\2\u3b00\2\u3b80\2\u3c00\2\u3c80"+
    "\2\u3d00\2\u3d80\2\u3e00\2\u3e80\2\u3f00\2\u3f80\2\u4000\2\u4080"+
    "\2\u4100\2\u4180\2\u4200\2\u4280\2\u4300\0\u0180\2\u4380\2\u4400"+
    "\2\u4480\2\u4500\2\u4580\2\u4600\2\u4680\2\u4700\2\u4780\2\u4800"+
    "\2\u4880\2\u4900\2\u4980\2\u4a00\2\u4a80\2\u4b00\2\u4b80\2\u4c00"+
    "\2\u4c80\2\u4d00\2\u4d80\2\u4e00\2\u4e80\2\u4f00\2\u4f80\2\u5000"+
    "\2\u5080\2\u5100\2\u5180\2\u5200\2\u5280\2\u5300\2\u5380\2\u5400"+
    "\2\u5480\2\u5500\2\u5580\2\u5600\2\u5680\2\u5700\2\u5780\2\u5800"+
    "\2\u5880\2\u5900\2\u5980\2\u5a00\2\u5a80\2\u5b00\2\u5b80\2\u5c00"+
    "\2\u5c80\2\u5d00\2\u5d80\2\u5e00\2\u5e80\2\u5f00\2\u5f80\2\u6000"+
    "\2\u6080\2\u6100\2\u6180\2\u6200\2\u6280\2\u6300\2\u6380\2\u6400"+
    "\2\u6480\2\u6500\2\u6580\2\u6600\2\u6680\2\u6700\2\u6780\2\u6800"+
    "\2\u6880\2\u6900\2\u6980\2\u6a00\2\u6a80\2\u6b00\2\u6b80\2\u6c00"+
    "\2\u6c80\2\u6d00\2\u6d80\2\u6e00\2\u6e80\2\u6f00\2\u6f80\2\u7000"+
    "\2\u7080\2\u7100\2\u7180\2\u7200\2\u7280\2\u7300\2\u7380\2\u7400"+
    "\2\u7480\2\u7500\2\u7580\2\u7600\2\u7680\2\u7700\2\u7780\2\u7800"+
    "\2\u7880\2\u7900\2\u7980\2\u7a00\2\u7a80\2\u7b00\2\u7b80\2\u7c00"+
    "\2\u7c80\2\u7d00\2\u7d80\2\u7e00\2\u7e80\2\u7f00\2\u7f80\2\u8000"+
    "\2\u8080\2\u8100\2\u8180\2\u8200\2\u8280\2\u8300\2\u8380\2\u8400"+
    "\2\u8480\2\u8500\2\u8580\2\u8600\2\u8680\2\u8700\2\u8780\2\u8800"+
    "\2\u8880\2\u8900\2\u8980\2\u8a00\2\u8a80\2\u8b00\2\u8b80\2\u4e00"+
    "\2\u8c00\2\u8c80\2\u8d00\2\u8d80\2\u8e00\2\u8e80\2\u8f00\2\u8f80"+
    "\2\u9000\2\u9080\2\u9100\2\u9180\2\u9200\2\u9280\2\u9300\2\u9380"+
    "\2\u9400\2\u9480\2\u9500\2\u9580\2\u9600\2\u9680\2\u9700\2\u9780"+
    "\2\u9800\2\u9880\2\u9900\2\u9980\2\u9a00\2\u9a80\2\u9b00\2\u9b80"+
    "\2\u9c00\2\u9c80\2\u9d00\2\u9d80\2\u9e00\2\u9e80\2\u9f00\2\u9f80"+
    "\2\ua000\2\ua080\2\ua100\2\ua180\2\ua200\2\ua280\2\ua300\2\ua380"+
    "\2\ua400\2\ua480\2\ua500\2\ua580\2\ua600\2\ua680\2\ua700\2\ua780"+
    "\2\ua800\2\ua880\2\ua900\2\ua980\2\uaa00\2\uaa80\2\uab00\2\uab80"+
    "\2\uac00\2\uac80\2\uad00\2\uad80\2\uae00\2\uae80\2\uaf00\2\uaf80"+
    "\2\ub000\2\ub080\2\ub100\2\ub180\2\ub200\2\ub280\2\ub300\2\ub380"+
    "\2\ub400\2\ub480\2\ub500\2\ub580\2\ub600\2\ub680\2\ub700\2\ub780"+
    "\2\ub800\2\ub880\2\ub900\2\ub980\2\uba00\2\uba80\2\ubb00\2\ubb80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\6\13"+
    "\1\14\1\13\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\6\20\1\23\1\13\1\24\1\13\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\13"+
    "\1\57\1\13\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\13\1\67\2\13\1\70\1\71\1\72\1\13"+
    "\1\73\1\13\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\13\1\104\1\105\1\13\1\106\1\13"+
    "\1\107\1\4\1\110\1\111\2\4\1\112\1\113\1\114"+
    "\1\4\1\115\1\116\2\13\2\117\2\13\1\120\1\13"+
    "\1\121\4\13\1\122\1\123\1\124\1\13\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\4\1\134\1\6"+
    "\1\7\1\135\1\11\1\12\6\13\1\14\1\13\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\6\20\1\23\1\13"+
    "\1\24\1\13\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\13\1\57\1\13\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\13\1\67"+
    "\2\13\1\70\1\71\1\72\1\13\1\73\1\13\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\13"+
    "\1\104\1\105\1\13\1\106\1\13\1\107\1\4\1\110"+
    "\1\111\2\4\1\112\1\113\1\114\1\4\1\115\1\116"+
    "\2\13\2\117\2\13\1\120\1\13\1\121\4\13\1\122"+
    "\1\123\1\124\1\13\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\2\136\1\137\1\140\2\136\1\141\10\136"+
    "\1\142\160\136\201\0\1\143\2\0\1\143\14\0\1\144"+
    "\160\0\1\6\176\0\1\143\2\0\1\143\14\0\1\144"+
    "\53\0\1\145\14\0\1\146\1\147\10\0\1\150\107\0"+
    "\1\13\261\0\1\151\116\0\1\13\162\0\1\152\1\0"+
    "\11\153\166\0\1\154\176\0\1\153\1\0\11\20\75\0"+
    "\1\155\17\0\1\156\46\0\1\157\1\153\1\0\1\160"+
    "\10\20\75\0\1\155\17\0\1\156\46\0\1\161\1\153"+
    "\1\0\11\20\75\0\1\155\17\0\1\156\63\0\1\13"+
    "\73\0\1\13\103\0\1\13\5\0\1\162\1\163\1\164"+
    "\7\0\1\165\1\0\1\166\1\0\1\167\31\0\1\170"+
    "\141\0\1\171\6\0\1\172\26\0\1\173\3\0\1\174"+
    "\1\175\4\0\1\176\125\0\1\177\5\0\1\200\14\0"+
    "\1\201\12\0\1\202\2\0\1\203\2\0\1\204\102\0"+
    "\1\205\21\0\1\206\6\0\1\207\32\0\1\210\2\0"+
    "\1\211\2\0\1\212\5\0\1\213\115\0\1\214\3\0"+
    "\1\215\15\0\1\216\13\0\1\217\3\0\1\220\3\0"+
    "\1\221\5\0\1\222\2\0\1\223\171\0\1\224\1\0"+
    "\1\225\2\0\1\226\6\0\1\227\133\0\1\230\3\0"+
    "\1\132\12\0\1\231\5\0\1\232\2\0\1\233\1\0"+
    "\1\234\1\235\1\231\4\0\1\236\75\0\1\237\22\0"+
    "\1\240\15\0\1\241\14\0\1\242\3\0\1\243\11\0"+
    "\1\244\2\0\1\245\166\0\1\246\5\0\1\247\74\0"+
    "\1\132\50\0\1\250\20\0\1\251\6\0\1\252\1\253"+
    "\110\0\6\254\12\0\1\255\16\0\1\256\12\0\1\257"+
    "\1\260\6\0\1\261\4\0\1\262\1\263\4\0\1\264"+
    "\37\0\4\254\53\0\1\265\3\0\1\266\31\0\1\267"+
    "\3\0\1\270\11\0\1\271\123\0\1\272\35\0\1\273"+
    "\15\0\1\274\144\0\1\275\30\0\1\276\2\0\1\277"+
    "\1\0\1\300\2\0\1\301\77\0\1\205\13\0\1\302"+
    "\15\0\1\303\10\0\1\132\10\0\1\304\6\0\1\305"+
    "\1\306\2\0\1\307\1\310\1\0\1\311\2\0\1\312"+
    "\1\0\1\313\2\0\1\314\1\315\42\0\1\302\131\0"+
    "\1\316\36\0\1\13\1\0\1\13\52\0\1\317\5\0"+
    "\1\320\3\0\1\321\25\0\1\322\3\0\1\323\31\0"+
    "\1\13\33\0\1\317\53\0\1\324\16\0\1\325\14\0"+
    "\1\326\1\0\1\327\2\0\1\330\1\331\5\0\1\332"+
    "\4\0\1\333\3\0\1\334\1\13\71\0\1\335\27\0"+
    "\1\336\25\0\1\337\1\340\2\0\1\341\2\0\1\342"+
    "\1\343\3\0\1\344\4\0\1\345\1\346\172\0\1\347"+
    "\61\0\2\350\103\0\1\351\10\0\1\352\61\0\1\350"+
    "\1\353\50\0\1\354\26\0\1\355\3\0\1\356\2\0"+
    "\1\357\137\0\1\360\44\0\1\344\4\0\1\361\1\362"+
    "\40\0\4\363\57\0\1\364\1\360\34\0\1\365\7\0"+
    "\1\344\5\0\1\362\37\0\1\366\4\367\1\366\32\0"+
    "\1\370\20\0\1\371\1\0\1\372\1\0\1\373\2\0"+
    "\1\374\6\0\1\375\1\376\1\0\1\377\1\u0100\2\u0101"+
    "\1\0\1\u0102\1\u0103\22\0\1\u0104\1\u0105\4\0\1\u0106"+
    "\2\u0107\1\u0108\20\0\1\u0109\27\0\2\u0104\41\0\1\u010a"+
    "\1\u010b\1\u010c\1\u010d\1\u010b\1\u010e\4\u010b\2\0\1\u010f"+
    "\3\0\1\u0110\1\u0111\1\u0112\1\0\1\u0113\13\0\1\u0114"+
    "\1\u0115\1\u0116\1\u0117\2\0\1\u0118\2\0\1\u0119\1\u011a"+
    "\1\u011b\1\0\1\u011c\1\0\1\u011d\1\u011e\1\u011f\1\u0120"+
    "\2\0\1\u0121\1\u0122\1\u011f\1\0\1\u0123\21\0\1\u011f"+
    "\22\0\1\u011f\75\0\1\u0124\122\0\1\u0125\57\0\1\u0126"+
    "\1\u0127\10\0\1\u0128\1\0\1\u0129\3\0\1\u012a\1\u012b"+
    "\1\u012c\1\u012d\153\0\1\u012e\3\0\1\u012f\3\0\1\u0130"+
    "\5\0\1\u0131\170\0\1\u0132\6\0\1\u0133\2\0\1\u0134"+
    "\2\0\1\u0135\153\0\1\u0136\1\u0137\2\0\1\u0138\3\0"+
    "\1\u0139\5\0\1\u013a\157\0\1\u013b\20\0\1\u013c\5\0"+
    "\1\u013d\1\0\1\u013e\126\0\1\u013f\2\0\1\u0140\33\0"+
    "\1\u0141\162\0\1\u0142\1\0\1\u0137\1\0\1\u0143\14\0"+
    "\1\u0144\137\0\1\u0140\21\0\1\u0145\10\0\1\u0146\1\u0147"+
    "\3\0\1\u0148\1\u0149\155\0\1\u014a\1\0\1\u0139\1\0"+
    "\1\u014b\10\0\1\u014c\1\u014d\161\0\1\u014e\3\0\1\u014f"+
    "\3\0\1\u0150\13\0\1\13\77\0\1\u0151\20\0\1\u0152"+
    "\10\0\1\344\5\0\1\u0153\31\0\1\u0154\1\u0155\40\0"+
    "\1\u0151\2\0\2\13\122\0\1\u0156\1\u0157\2\0\1\u0158"+
    "\2\0\1\u0159\2\0\1\u015a\5\0\1\u015b\13\0\1\u015c"+
    "\134\0\1\u015d\3\0\1\u015e\2\0\1\u015f\6\0\1\u0160"+
    "\2\0\1\u0161\14\0\1\13\24\0\4\u0162\6\0\1\u0163"+
    "\106\0\1\u0164\2\0\1\u0165\1\u0166\3\0\1\u0167\1\0"+
    "\1\u0168\1\0\1\u0169\2\0\1\u016a\1\u016b\153\0\1\u016c"+
    "\1\0\1\231\4\0\1\u016d\1\u016e\5\0\1\u016f\1\231"+
    "\5\0\1\u0170\70\0\1\u0171\100\0\1\u0172\5\0\2\u0173"+
    "\67\0\1\u0171\61\0\1\u0174\25\0\1\u0173\67\0\1\u0171"+
    "\270\0\1\u0175\4\0\1\u0176\4\0\1\u0177\6\0\1\u0178"+
    "\13\0\1\u0179\16\0\3\13\175\0\3\13\103\0\1\u017a"+
    "\1\u017b\26\0\1\u017c\66\0\1\13\4\0\1\13\4\0"+
    "\1\13\13\0\1\13\1\0\2\13\2\0\1\u017d\1\0"+
    "\2\13\5\0\1\u017e\1\0\1\132\1\0\1\u017d\42\0"+
    "\3\u017f\6\0\1\13\12\0\1\13\23\0\1\13\4\0"+
    "\1\132\21\0\1\u0180\1\0\11\20\333\0\1\u014c\146\0"+
    "\1\13\230\0\1\13\63\0\1\u0181\7\0\1\u0182\3\0"+
    "\2\132\123\0\1\13\33\0\1\u0183\6\0\1\u0184\45\0"+
    "\1\u0185\1\u0186\125\0\1\344\35\0\1\344\5\0\1\346"+
    "\204\0\2\13\145\0\1\u0187\37\0\1\u0188\67\0\2\13"+
    "\133\0\2\13\175\0\1\126\102\0\1\u0182\3\0\2\132"+
    "\123\0\1\u0189\226\0\1\162\1\163\1\u018a\7\0\1\165"+
    "\1\0\1\166\1\0\1\167\31\0\1\u018b\164\0\1\231"+
    "\14\0\1\231\156\0\1\u014c\157\0\1\344\5\0\1\u0153"+
    "\171\0\1\344\125\0\1\134\2\0\1\134\14\0\1\144"+
    "\157\0\1\134\2\0\1\134\14\0\1\144\53\0\1\145"+
    "\14\0\1\146\1\147\10\0\1\150\55\0\1\u018c\232\0"+
    "\1\u018c\254\0\1\u018d\126\0\1\147\14\0\1\147\237\0"+
    "\1\u018e\174\0\1\147\177\0\1\u018f\104\0\1\13\201\0"+
    "\11\153\75\0\1\155\17\0\1\156\27\0\2\154\2\0"+
    "\174\154\43\0\1\156\156\0\11\u0190\77\0\1\u0191\123\0"+
    "\1\u0192\5\0\1\u0193\133\0\1\153\1\0\11\20\40\0"+
    "\1\u013b\34\0\1\155\17\0\1\156\105\0\1\u0192\2\0"+
    "\1\u0194\2\0\1\u0193\166\0\1\u0195\25\0\1\u0196\200\0"+
    "\1\u0197\130\0\1\u0198\62\0\1\u0199\174\0\1\u0139\177\0"+
    "\1\u019a\165\0\1\u019b\117\0\1\u019c\133\0\1\u019d\77\0"+
    "\1\u019e\204\0\1\u019f\234\0\1\u01a0\157\0\1\u01a1\211\0"+
    "\1\u01a2\167\0\1\u01a3\135\0\1\u01a4\23\0\1\u01a5\171\0"+
    "\1\u01a6\221\0\1\u01a7\175\0\1\u01a8\23\0\1\u01a9\174\0"+
    "\1\u01aa\5\0\1\u01ab\166\0\1\u01ac\153\0\1\132\164\0"+
    "\1\u01ad\162\0\1\u01ae\256\0\1\u01af\162\0\1\u01b0\11\0"+
    "\1\u01b1\2\0\1\u01b2\173\0\1\u01b3\1\u01b4\1\u01b5\161\0"+
    "\1\u01b6\21\0\1\u01b7\137\0\1\u01b8\160\0\1\13\171\0"+
    "\1\u01b9\262\0\1\u01ba\164\0\1\u01bb\4\0\1\u01bc\3\0"+
    "\1\u01bd\3\0\1\u01be\154\0\1\u01bf\21\0\1\u01c0\200\0"+
    "\1\u01c1\154\0\1\u01c2\221\0\1\u01c3\163\0\1\u01c4\215\0"+
    "\1\u01c5\157\0\1\u01c6\12\0\1\u01c7\122\0\1\u01c8\240\0"+
    "\1\u0197\207\0\1\u01c9\13\0\1\251\166\0\1\u01ca\141\0"+
    "\1\u01cb\240\0\1\u01b9\171\0\1\u01cc\1\0\1\u01cd\147\0"+
    "\1\13\155\0\1\u01ce\176\0\1\u01cf\3\0\1\u01d0\252\0"+
    "\1\u01d1\201\0\1\u01d2\177\0\1\u01d3\154\0\1\u01d4\3\0"+
    "\1\u01d5\3\0\1\u01d6\211\0\1\u01d7\176\0\1\u01d8\116\0"+
    "\1\u01b9\146\0\1\u01c4\270\0\1\u01d9\202\0\1\u01da\13\0"+
    "\1\u01db\2\0\1\u01dc\124\0\1\237\173\0\1\u01dd\4\0"+
    "\1\u01de\230\0\1\u01df\211\0\1\251\201\0\1\u01e0\4\0"+
    "\1\u01e1\140\0\1\u01e2\222\0\1\u01e3\134\0\1\u01e4\4\0"+
    "\1\u01e5\177\0\1\u01e6\14\0\1\u01e7\157\0\1\u01e8\240\0"+
    "\1\u01e9\6\0\1\u01ea\5\0\1\u01eb\157\0\1\u01ec\11\0"+
    "\1\u01ed\165\0\1\u01ee\163\0\1\u01cf\235\0\1\u01ef\173\0"+
    "\1\u01f0\120\0\1\u01f1\241\0\1\u01f2\177\0\1\u01f3\173\0"+
    "\1\u01f4\222\0\1\u01f5\137\0\1\u01f6\201\0\1\132\233\0"+
    "\1\u01f7\1\u01f8\1\0\1\u01f9\163\0\1\13\171\0\1\u01ce"+
    "\213\0\1\u01fa\11\0\1\u01fb\172\0\1\u01fc\167\0\1\u01fd"+
    "\174\0\1\u01fe\5\0\1\u01ff\103\0\1\u0200\276\0\1\262"+
    "\171\0\1\313\164\0\1\u0201\7\0\1\u0202\150\0\1\u0203"+
    "\163\0\1\u0204\202\0\1\u0205\232\0\1\u0206\174\0\1\u0207"+
    "\1\0\1\u0208\1\u0204\2\0\1\u0209\10\0\1\u020a\3\0"+
    "\1\u020b\136\0\1\u020c\157\0\1\u020d\235\0\1\u020e\7\0"+
    "\1\u01c4\202\0\1\u020f\1\0\1\u0210\2\0\1\u0211\2\0"+
    "\1\u0212\154\0\1\u0213\205\0\1\u0214\5\0\1\u0215\1\262"+
    "\203\0\1\u0216\174\0\1\u0217\2\0\1\u0218\175\0\1\13"+
    "\43\0\2\13\100\0\1\u0219\227\0\1\u021a\177\0\1\u021b"+
    "\175\0\1\u021c\213\0\1\u021d\154\0\1\u021e\3\0\1\u021f"+
    "\203\0\1\u01c3\163\0\1\u0220\7\0\1\u0221\167\0\1\u0222"+
    "\222\0\1\u0223\76\0\1\u0224\1\0\1\u0151\15\0\1\u0225"+
    "\21\0\1\u0153\16\0\1\u0226\54\0\1\u0151\41\0\1\u0227"+
    "\276\0\1\u0228\100\0\1\u0224\41\0\1\u0153\135\0\1\u0227"+
    "\41\0\1\u0153\165\0\1\u0229\235\0\1\u022a\170\0\1\u01c4"+
    "\206\0\1\u022b\167\0\1\u022c\203\0\1\u022d\175\0\1\u022e"+
    "\251\0\1\u022f\100\0\1\u0230\235\0\1\u0231\151\0\1\u0232"+
    "\230\0\1\u0233\165\0\1\u0234\214\0\1\u0235\173\0\1\u0236"+
    "\175\0\1\u0237\5\0\1\u0238\202\0\1\u0239\173\0\1\u023a"+
    "\2\0\1\u023b\170\0\1\344\4\0\1\u023c\1\346\172\0"+
    "\1\u023d\176\0\1\344\4\0\1\361\1\362\171\0\1\344"+
    "\5\0\1\362\173\0\1\u023e\170\0\1\u023f\106\0\1\u0240"+
    "\177\0\1\u0241\275\0\1\344\5\0\1\346\143\0\1\u0242"+
    "\6\0\1\u0243\177\0\1\u0243\157\0\1\u0244\17\0\1\u0243"+
    "\150\0\1\u0245\26\0\1\u0243\165\0\1\u0246\11\0\1\u0243"+
    "\144\0\1\u0247\41\0\1\u0248\121\0\1\u011f\1\0\1\u011f"+
    "\132\0\1\u011f\1\0\1\u011f\110\0\1\u0249\5\0\1\u024a"+
    "\160\0\1\u024b\22\0\1\u024c\16\0\1\u024d\1\u011f\164\0"+
    "\1\u024e\171\0\1\u024f\175\0\1\u011f\167\0\1\13\23\0"+
    "\1\u0250\156\0\1\u0251\174\0\1\127\220\0\1\u0252\161\0"+
    "\1\u0253\7\0\1\u0254\113\0\1\u0248\1\0\2\u011f\45\0"+
    "\1\13\177\0\1\13\11\0\1\u0255\33\0\1\u011f\131\0"+
    "\1\13\1\u0249\5\0\1\u0256\170\0\1\13\12\0\1\u0257"+
    "\164\0\1\13\221\0\1\u0258\106\0\3\u011f\56\0\1\u0255"+
    "\116\0\3\u011f\56\0\1\u0259\137\0\1\u011f\30\0\5\u011f"+
    "\110\0\1\13\4\0\1\u025a\4\0\2\13\34\0\1\13"+
    "\30\0\1\13\2\0\1\13\5\0\1\13\151\0\1\u025b"+
    "\220\0\1\u014c\173\0\1\u025c\200\0\1\u025d\166\0\1\u025e"+
    "\173\0\1\u025f\205\0\1\u0260\167\0\1\u0260\205\0\1\u0261"+
    "\204\0\1\u014c\207\0\1\u0262\171\0\1\u0263\175\0\1\u0264"+
    "\170\0\1\u0265\3\0\1\u0266\204\0\1\u0267\4\0\1\u0268"+
    "\173\0\1\u0269\162\0\1\u026a\12\0\1\u026b\213\0\1\u026c"+
    "\152\0\1\u014c\207\0\1\u012f\7\0\1\u014c\170\0\1\u014c"+
    "\206\0\1\u01ab\2\0\1\u026d\173\0\1\u026e\155\0\1\u026f"+
    "\216\0\1\u0148\160\0\1\u0270\7\0\1\u0271\167\0\1\u0272"+
    "\151\0\1\u0183\241\0\1\u0273\201\0\1\u0274\4\0\1\u0275"+
    "\160\0\1\u0276\177\0\1\u0277\173\0\1\u0278\163\0\1\u0279"+
    "\36\0\1\u027a\1\0\1\u027b\173\0\1\u014c\122\0\1\u027c"+
    "\247\0\1\u027d\200\0\1\u027e\170\0\1\u027f\17\0\1\u0280"+
    "\174\0\1\u0281\3\0\1\u0282\150\0\1\u0271\2\0\1\u0283"+
    "\211\0\1\u0282\165\0\1\13\200\0\1\u0284\216\0\1\u0285"+
    "\175\0\1\u0286\1\0\1\u014c\201\0\1\u014c\152\0\1\u0287"+
    "\203\0\1\u0288\211\0\1\u0289\171\0\1\u028a\175\0\1\u028b"+
    "\7\0\1\u0137\174\0\1\u028c\201\0\1\u028d\160\0\1\u028e"+
    "\1\0\1\u012e\4\0\1\u014c\6\0\1\u028f\201\0\1\13"+
    "\205\0\1\u0290\1\0\1\u0291\155\0\1\u0197\171\0\1\u0292"+
    "\221\0\1\u014c\2\0\1\u0293\154\0\1\u0294\205\0\1\u0295"+
    "\6\0\1\u0268\162\0\1\u0296\212\0\1\u0297\205\0\1\u0298"+
    "\2\0\1\u0299\153\0\1\u029a\2\0\1\u029b\175\0\1\u014c"+
    "\12\0\1\u014c\200\0\1\u0268\6\0\1\13\157\0\1\u029c"+
    "\207\0\1\u029d\147\0\1\u029e\227\0\1\u029f\200\0\1\u02a0"+
    "\61\0\2\u02a0\77\0\1\u02a1\16\0\1\u0280\122\0\1\u02a2"+
    "\256\0\1\u02a3\156\0\1\u02a4\177\0\1\u02a5\215\0\1\u02a6"+
    "\136\0\1\u02a7\151\0\1\13\133\0\2\13\41\0\6\u02a8"+
    "\171\0\1\u02a9\6\u02aa\2\u02a9\170\0\6\u02ab\170\0\1\205"+
    "\215\0\32\u02ac\27\0\1\u02ad\23\0\1\u02ac\55\0\11\153"+
    "\252\0\1\u02ae\170\0\1\u022e\213\0\1\u0298\203\0\1\u0271"+
    "\154\0\1\u02af\31\0\1\13\5\0\1\13\137\0\1\u02af"+
    "\37\0\1\13\70\0\1\u0188\172\0\1\370\25\0\1\u02b0"+
    "\31\0\1\231\14\0\1\231\201\0\1\u0199\51\0\1\u02b1"+
    "\30\0\1\u02b2\133\0\1\u02b3\122\0\1\u018e\103\0\1\13"+
    "\316\0\1\u02b4\76\0\11\u0190\263\0\1\u02b5\156\0\1\u02b6"+
    "\177\0\1\u02b7\163\0\1\13\215\0\1\13\202\0\1\u014c"+
    "\132\0\1\u02b8\237\0\1\u0196\212\0\1\u02b9\166\0\1\u02ba"+
    "\200\0\1\u02bb\177\0\1\u02bc\163\0\1\u02bd\170\0\1\13"+
    "\226\0\1\u02be\106\0\1\13\16\0\1\u02bf\6\0\1\u02c0"+
    "\14\0\1\u02c1\240\0\1\u02c2\121\0\1\u02c3\201\0\1\u0204"+
    "\221\0\1\u02c4\221\0\1\u02c5\167\0\1\u02c6\201\0\1\u0204"+
    "\176\0\1\u02c7\213\0\1\u02c8\206\0\1\u02c9\136\0\1\u02ca"+
    "\176\0\1\u02cb\215\0\1\u02cc\175\0\1\u02cd\201\0\1\u02ce"+
    "\137\0\1\u02cf\2\0\1\u02d0\3\0\1\u02d1\3\0\1\u02d2"+
    "\7\0\1\u02d3\227\0\1\u02d4\203\0\1\u02d5\206\0\1\u01b7"+
    "\157\0\1\u02d6\76\0\1\u0178\244\0\1\u01e8\141\0\1\u02d7"+
    "\273\0\1\u02d8\206\0\1\u02d9\145\0\1\u02da\33\0\1\u02db"+
    "\160\0\1\u02dc\177\0\1\u02dd\201\0\1\u02de\210\0\1\u02df"+
    "\102\0\1\u02e0\303\0\1\u02e1\155\0\1\u01c4\133\0\1\u016f"+
    "\131\0\1\u016f\107\0\1\u02e2\160\0\1\u01e2\35\0\1\u02e3"+
    "\122\0\1\u02e4\246\0\1\u01b9\164\0\1\u02e5\204\0\1\u02e6"+
    "\7\0\1\251\175\0\1\u02e7\166\0\1\u01c4\122\0\11\13"+
    "\234\0\1\u0204\153\0\1\u02c4\23\0\1\u0204\206\0\1\u02e8"+
    "\114\0\1\u02d7\25\0\1\u02e9\251\0\1\251\200\0\1\u02ea"+
    "\10\0\1\u0204\153\0\1\u02c9\23\0\1\u0204\152\0\1\u02eb"+
    "\217\0\1\u02ec\164\0\1\u02ed\175\0\1\u02ee\210\0\1\u02ef"+
    "\204\0\1\u02f0\157\0\1\u02f1\150\0\1\u02f2\205\0\1\u02f3"+
    "\220\0\1\u02f4\156\0\1\u02f5\20\0\1\u01b9\216\0\1\u02f6"+
    "\160\0\1\u02f7\203\0\1\u02f8\202\0\1\u02f9\205\0\1\u02fa"+
    "\124\0\1\u02fb\202\0\1\u02fc\176\0\1\u01de\233\0\1\u02fd"+
    "\217\0\1\u02fe\174\0\1\u02ff\100\0\1\u0300\25\0\1\u01e5"+
    "\253\0\1\u01b9\116\0\1\u0301\264\0\1\u0204\163\0\1\u0302"+
    "\142\0\1\u0303\226\0\1\u0262\206\0\1\u0304\177\0\1\u0305"+
    "\201\0\1\u0306\207\0\2\u014c\147\0\1\u0307\222\0\1\u0308"+
    "\176\0\1\u0309\200\0\1\u030a\140\0\1\u030b\212\0\1\u030c"+
    "\200\0\1\u030d\214\0\1\u030e\176\0\1\u030f\127\0\1\u0310"+
    "\13\0\1\u0311\222\0\1\262\15\0\1\u0312\160\0\1\u0313"+
    "\20\0\1\u0314\175\0\1\u014c\1\0\1\u0315\23\0\1\u014c"+
    "\101\0\1\237\236\0\1\u0316\202\0\1\13\164\0\1\u0317"+
    "\22\0\1\u0318\122\0\1\u0319\235\0\1\u031a\217\0\1\u031b"+
    "\71\0\1\u031c\246\0\1\u031d\235\0\1\u031e\160\0\1\u031f"+
    "\176\0\1\u01b9\220\0\1\u0320\141\0\1\u0321\214\0\1\u0322"+
    "\210\0\1\u0323\207\0\1\u0324\176\0\1\u0325\173\0\1\u01c4"+
    "\1\0\1\u0326\103\0\11\u0327\52\0\1\u0328\173\0\1\u0329"+
    "\216\0\1\u032a\162\0\1\u032b\143\0\1\u032c\11\0\1\u0153"+
    "\236\0\1\u032d\171\0\1\u01c4\164\0\1\u032e\12\0\1\13"+
    "\211\0\1\132\165\0\1\132\164\0\1\u032f\201\0\1\u0330"+
    "\121\0\1\132\134\0\1\132\135\0\1\174\174\0\1\u0331"+
    "\244\0\1\132\137\0\1\u0332\141\0\1\u01a5\235\0\1\u018e"+
    "\167\0\1\u0309\7\0\1\u01a9\156\0\1\u0333\217\0\1\132"+
    "\170\0\1\132\141\0\1\u0334\235\0\1\u0335\170\0\1\u0336"+
    "\222\0\1\u01c4\152\0\1\u0337\175\0\1\u0338\222\0\1\u0339"+
    "\172\0\1\u033a\165\0\1\u033b\173\0\1\u033c\223\0\1\u033d"+
    "\153\0\1\u033e\207\0\1\225\153\0\1\u0153\227\0\1\u033f"+
    "\167\0\1\u0340\210\0\1\u0341\61\0\2\u0342\114\0\1\u0342"+
    "\61\0\2\u0342\64\0\1\u0343\154\0\1\u0344\201\0\1\u011f"+
    "\175\0\1\u0345\222\0\1\u0346\215\0\1\u011f\123\0\1\u011f"+
    "\256\0\1\u0347\133\0\1\u0348\243\0\1\u0349\117\0\2\u011f"+
    "\45\0\1\13\21\0\1\u011f\104\0\1\u0248\263\0\1\u034a"+
    "\210\0\1\u034b\160\0\1\u034c\223\0\1\u034d\200\0\1\u034e"+
    "\165\0\1\u034e\162\0\1\u034f\201\0\1\u0350\203\0\1\u0351"+
    "\210\0\1\u034d\160\0\1\u0352\125\0\1\13\261\0\1\13"+
    "\65\0\1\13\123\0\1\u0353\164\0\1\u0262\203\0\1\u0354"+
    "\166\0\1\u0127\17\0\1\u012b\1\u012c\171\0\1\u0353\176\0"+
    "\1\u0355\163\0\1\13\215\0\1\u0356\164\0\1\u0357\176\0"+
    "\1\u0358\173\0\1\u0359\37\0\1\u0188\152\0\1\u014c\104\0"+
    "\1\u0189\57\0\1\u035a\10\0\1\u035b\51\0\1\u035c\140\0"+
    "\1\u035d\161\0\1\u035e\157\0\1\u035f\173\0\1\u0360\234\0"+
    "\1\u0361\172\0\1\u0362\202\0\1\u0363\213\0\1\u014c\165\0"+
    "\1\u014c\203\0\1\u0298\172\0\1\u0262\177\0\1\u0364\130\0"+
    "\1\u0365\6\0\1\u0366\10\0\1\u0367\216\0\1\u0368\210\0"+
    "\1\u0369\170\0\1\u014c\214\0\1\u036a\72\0\1\u0189\65\0"+
    "\1\u036b\136\0\1\u036c\13\0\1\u036d\5\0\1\u0363\16\0"+
    "\1\u036e\206\0\1\u036f\165\0\1\u0370\204\0\1\u0371\107\0"+
    "\1\u0189\24\0\1\u0372\240\0\1\u0373\202\0\1\u0374\106\0"+
    "\1\u0189\52\0\2\13\215\0\1\u0375\210\0\1\u0376\156\0"+
    "\1\u0377\213\0\1\u0378\206\0\1\u0379\156\0\1\u037a\220\0"+
    "\1\u037b\176\0\1\u037c\171\0\1\13\105\0\1\u037d\260\0"+
    "\1\u037e\217\0\1\u037f\23\0\1\u025b\130\0\1\u0380\214\0"+
    "\1\u0137\103\0\1\u014c\42\0\1\u0381\262\0\1\u0382\75\0"+
    "\1\u0383\17\0\1\u0384\233\0\1\u0385\172\0\1\u0386\176\0"+
    "\1\u0387\211\0\1\u0354\175\0\1\u014c\154\0\1\u0388\220\0"+
    "\1\u0389\123\0\1\u038a\255\0\1\u038b\160\0\1\u038c\216\0"+
    "\1\u038d\153\0\1\u038e\117\0\1\13\1\0\1\u038f\1\u0390"+
    "\33\0\1\u0391\242\0\1\u0392\205\0\1\u0393\160\0\1\u0394"+
    "\212\0\1\u0395\175\0\1\u0396\174\0\1\u02ba\171\0\1\u0397"+
    "\154\0\1\u0398\246\0\1\366\130\0\1\u0398\46\0\1\366"+
    "\177\0\1\u0162\105\0\32\u0399\27\0\1\u039a\23\0\1\u0399"+
    "\137\0\1\u039b\212\0\1\u0298\104\0\1\13\230\0\1\u039c"+
    "\311\0\1\u02b8\110\0\1\u039d\177\0\1\u039e\112\0\1\u0189"+
    "\2\0\1\u014c\274\0\1\u039f\202\0\1\u03a0\172\0\1\u03a1"+
    "\130\0\1\13\232\0\1\u0373\222\0\1\13\112\0\1\u03a2"+
    "\177\0\1\u03a3\203\0\1\u0363\245\0\1\u03a4\120\0\1\u03a5"+
    "\264\0\1\u03a6\202\0\1\u03a7\136\0\1\u03a8\173\0\1\u0204"+
    "\202\0\1\u0204\226\0\1\u03a9\203\0\1\u0204\171\0\1\u03aa"+
    "\206\0\1\u02a6\201\0\1\u0204\130\0\1\u03ab\215\0\1\u03ac"+
    "\226\0\1\u03ad\205\0\1\u03ae\170\0\1\u02e3\200\0\1\u03af"+
    "\205\0\1\u03b0\174\0\1\343\171\0\1\u0329\167\0\1\u03b1"+
    "\203\0\1\u03b2\176\0\1\u03b3\176\0\1\u03b4\145\0\1\u01e5"+
    "\233\0\1\u01c3\173\0\1\u03b5\177\0\1\112\214\0\1\u03b6"+
    "\164\0\1\u03b7\212\0\1\u03b8\71\0\1\u01c4\40\0\1\u03b9"+
    "\14\0\1\u03ba\177\0\1\u03bb\161\0\1\251\2\0\1\u03bc"+
    "\202\0\1\u03bd\46\0\1\u03be\133\0\1\u03bf\141\0\1\u03c0"+
    "\300\0\1\u01c4\161\0\1\251\156\0\1\u03c1\213\0\1\u03c2"+
    "\177\0\1\u03c3\206\0\1\u03c4\135\0\1\u03c5\7\0\1\u03c6"+
    "\2\0\1\u03c7\235\0\1\u03c8\212\0\1\u03c9\152\0\1\u01ce"+
    "\210\0\1\u03ca\205\0\1\251\175\0\1\u03cb\144\0\1\u01a5"+
    "\153\0\1\u01cf\3\0\1\u01cf\244\0\1\u03b3\170\0\1\u03cc"+
    "\133\0\1\u03cd\131\0\1\u03cd\113\0\1\u018e\213\0\1\u03ce"+
    "\201\0\1\u01a9\153\0\1\u01ef\3\0\1\u01ef\152\0\1\u03cf"+
    "\201\0\1\u03d0\233\0\1\u03d1\162\0\1\u03d2\137\0\1\u03d3"+
    "\131\0\1\u03d3\63\0\1\u03d4\237\0\1\u03d5\142\0\1\u03d6"+
    "\16\0\1\u0324\147\0\1\u01a5\204\0\1\u03d7\230\0\1\u01a9"+
    "\215\0\1\u03d8\167\0\1\u01c4\167\0\1\u03d9\177\0\1\251"+
    "\121\0\3\u01b9\33\0\1\u03da\35\0\1\234\171\0\1\u03db"+
    "\126\0\1\u03dc\2\0\1\u03dd\252\0\1\u03de\201\0\1\u03df"+
    "\173\0\1\u02f0\167\0\1\u03e0\175\0\1\u03e1\7\0\1\u01b9"+
    "\205\0\1\u03e2\166\0\1\u03e3\74\0\1\u03e4\277\0\1\u03e5"+
    "\170\0\1\u021e\212\0\1\u03e6\134\0\1\u03e7\211\0\1\13"+
    "\215\0\1\u02f0\220\0\1\u021e\173\0\1\u03e8\61\0\2\u03e8"+
    "\67\0\1\u03e9\232\0\1\u0280\156\0\1\u03ea\201\0\1\u03eb"+
    "\212\0\1\u03ec\164\0\1\u03ed\173\0\1\u03ee\212\0\1\u01c4"+
    "\126\0\1\u01b9\2\0\1\u01b9\236\0\1\u03ef\210\0\1\u03f0"+
    "\204\0\1\u022a\161\0\1\u03f1\177\0\1\u03f2\210\0\1\u03f3"+
    "\100\0\1\u02d7\25\0\1\u03f4\245\0\1\u01c4\171\0\1\u03f5"+
    "\212\0\1\132\67\0\1\u03f6\300\0\1\u03f7\212\0\1\132"+
    "\134\0\1\u03f8\235\0\1\u03f9\203\0\1\u03ea\165\0\1\u03fa"+
    "\171\0\1\u03fb\201\0\1\u03fc\216\0\1\u03fd\201\0\1\u03fe"+
    "\155\0\1\u03ff\174\0\1\u0400\214\0\1\u0401\71\0\1\u0402"+
    "\37\0\1\u0403\13\0\1\u0404\1\u0405\236\0\1\u0406\132\0"+
    "\1\u0391\35\0\1\u0391\141\0\1\u0391\201\0\1\u011f\203\0"+
    "\1\u0407\157\0\1\u0408\204\0\1\u0409\174\0\1\u040a\216\0"+
    "\1\u040b\226\0\1\u040c\161\0\1\u0249\217\0\1\u040d\204\0"+
    "\1\u034b\160\0\1\u040e\164\0\2\u011f\230\0\1\u040f\200\0"+
    "\1\u0410\167\0\1\u0411\206\0\1\u011f\72\0\1\u0189\70\0"+
    "\1\u014c\174\0\1\u014c\177\0\1\u0183\207\0\1\u0412\166\0"+
    "\1\u0413\20\0\1\u0414\165\0\1\u0415\114\0\1\u0416\172\0"+
    "\1\u0417\173\0\1\u0189\57\0\1\u035a\62\0\1\u035c\156\0"+
    "\1\u014c\161\0\1\u01ab\176\0\1\u0418\202\0\1\u0139\160\0"+
    "\1\u0419\172\0\1\u02a1\212\0\1\u041a\102\0\1\13\265\0"+
    "\1\u041b\173\0\1\u041c\22\0\1\u041d\160\0\1\u041e\203\0"+
    "\1\u041f\3\0\1\u041d\175\0\1\u0420\210\0\1\u0421\175\0"+
    "\1\u0422\164\0\1\u0423\201\0\1\u0424\205\0\1\u0425\202\0"+
    "\1\u0426\174\0\1\u0427\164\0\1\u0262\217\0\1\u0428\116\0"+
    "\1\u0429\256\0\1\13\175\0\1\u042a\160\0\1\u0271\207\0"+
    "\1\u0155\210\0\1\u0333\156\0\1\u042b\262\0\2\13\117\0"+
    "\1\u042c\175\0\1\u042d\1\u02a6\16\0\1\u042e\1\u042f\176\0"+
    "\1\u0430\142\0\1\u0431\155\0\1\u0432\6\0\1\u0433\3\0"+
    "\1\u014c\1\u036d\227\0\1\u0434\200\0\1\u0435\215\0\1\u0436"+
    "\247\0\1\13\101\0\1\u0437\22\0\1\u0438\164\0\1\u0439"+
    "\3\0\1\u0438\202\0\1\u043a\160\0\1\u043b\212\0\1\u043c"+
    "\205\0\1\u043d\201\0\1\u043e\160\0\1\u0155\173\0\1\u043f"+
    "\143\0\1\u0440\254\0\1\u0441\125\0\1\u0442\2\0\1\u0443"+
    "\4\0\1\13\1\0\1\u0444\117\0\1\13\24\0\1\u0445"+
    "\177\0\2\u0445\260\0\1\u0446\210\0\1\u0447\162\0\1\u0448"+
    "\173\0\1\u0449\211\0\1\13\202\0\1\u044a\216\0\1\u022f"+
    "\105\0\32\u044b\27\0\1\u044c\23\0\1\u044b\137\0\1\u044d"+
    "\174\0\1\u044e\142\0\1\u044f\323\0\1\u0450\177\0\1\u0451"+
    "\123\0\1\u0452\67\0\1\u0453\307\0\1\u0454\120\0\1\u0455"+
    "\177\0\1\u0456\264\0\1\u0457\116\0\1\u0458\247\0\1\u0459"+
    "\171\0\1\u028b\176\0\1\u045a\7\0\1\u045b\203\0\1\u045c"+
    "\177\0\1\u045d\141\0\1\13\166\0\1\215\231\0\1\u01b9"+
    "\102\0\1\u045e\303\0\1\u045f\164\0\1\u0460\200\0\1\u0461"+
    "\200\0\1\u0462\155\0\1\u03c7\202\0\1\u0463\235\0\1\251"+
    "\161\0\1\u0464\217\0\1\u0465\172\0\1\u0466\202\0\1\u0467"+
    "\156\0\1\u0468\206\0\1\u0469\205\0\1\u046a\172\0\1\u046b"+
    "\212\0\1\u046c\161\0\1\u046d\7\0\1\13\124\0\1\u046e"+
    "\237\0\1\u046f\203\0\1\u0470\204\0\1\u0471\130\0\1\u03f4"+
    "\17\0\1\u0472\231\0\1\u02f0\171\0\1\u0473\174\0\1\u045a"+
    "\7\0\1\u01c4\170\0\1\u0474\207\0\1\u0475\204\0\1\u0464"+
    "\177\0\1\u0476\162\0\1\u0477\205\0\1\u0478\206\0\1\u0479"+
    "\141\0\1\u047a\175\0\1\u047b\237\0\1\u047c\167\0\1\u047d"+
    "\177\0\1\u047e\170\0\1\u018d\222\0\1\u01ab\171\0\1\u047f"+
    "\166\0\1\u0480\212\0\1\u01b9\63\0\1\u0481\313\0\1\u0482"+
    "\167\0\1\u0483\172\0\1\u0484\206\0\1\u0151\162\0\1\u0485"+
    "\204\0\1\u01b9\155\0\1\u0463\24\0\1\u0486\150\0\1\u0487"+
    "\164\0\1\u0488\235\0\1\u0489\206\0\1\u03ef\130\0\1\u01c4"+
    "\152\0\1\13\1\0\1\u0390\230\0\1\u048a\250\0\1\u0363"+
    "\171\0\1\u048b\130\0\1\u048c\147\0\1\u02d7\30\0\1\u0363"+
    "\7\0\1\u048d\17\0\1\u03ea\2\0\1\u048e\47\0\1\u048f"+
    "\21\0\1\u0363\5\0\1\u0363\13\0\1\13\33\0\1\u0183"+
    "\6\0\1\u0184\166\0\1\u0490\10\0\1\u0491\224\0\1\u0492"+
    "\212\0\1\u0493\173\0\1\u03d8\201\0\1\u0494\176\0\1\u0495"+
    "\145\0\1\346\157\0\1\u0496\235\0\1\u0497\165\0\1\u0204"+
    "\235\0\1\u0204\165\0\1\u0498\111\0\1\u0499\257\0\1\u049a"+
    "\12\0\1\u0493\142\0\1\u03da\223\0\1\u049b\210\0\1\u049c"+
    "\177\0\1\u01c3\161\0\1\u049d\146\0\1\u021e\5\0\1\u049e"+
    "\227\0\1\u02ba\171\0\1\u0324\220\0\1\u049f\154\0\1\u0109"+
    "\163\0\1\u04a0\135\0\1\u04a1\52\0\1\13\163\0\1\u04a2"+
    "\200\0\1\u011f\205\0\1\u04a3\207\0\1\u04a4\220\0\1\u04a5"+
    "\177\0\1\u011f\104\0\2\u011f\45\0\1\13\223\0\1\u04a6"+
    "\156\0\1\u04a7\215\0\1\u04a8\200\0\1\u0361\145\0\1\u04a9"+
    "\140\0\1\u014c\267\0\1\u04aa\151\0\1\u04ab\225\0\1\u0484"+
    "\204\0\1\u0412\177\0\1\u044a\123\0\1\u04ac\14\0\1\u04ad"+
    "\243\0\1\u04ae\163\0\1\u044a\162\0\1\u04af\210\0\1\u04b0"+
    "\177\0\1\u04b1\210\0\1\u04b2\173\0\1\u04b3\203\0\1\u0139"+
    "\201\0\1\u04b4\156\0\1\u04b5\204\0\1\u014c\154\0\1\u04b6"+
    "\234\0\1\u04b7\171\0\1\u0412\154\0\1\u04b8\35\0\1\u04b8"+
    "\172\0\1\u04b9\176\0\1\u04ba\167\0\1\u04bb\205\0\1\u04bc"+
    "\165\0\1\u02ae\203\0\1\u0271\204\0\1\u04bd\166\0\1\u04be"+
    "\210\0\1\u04bf\162\0\1\u04c0\222\0\1\u04c1\123\0\1\u04c2"+
    "\244\0\1\u04c1\205\0\1\13\204\0\2\u04c3\74\0\1\13"+
    "\1\u04c4\7\13\17\0\1\13\7\0\1\13\216\0\1\u04c5"+
    "\160\0\1\u04c6\170\0\1\344\43\0\1\346\172\0\1\u04c7"+
    "\172\0\1\u04c8\156\0\1\13\123\0\1\13\253\0\1\13"+
    "\24\0\1\u02ba\102\0\1\13\275\0\1\u04c9\200\0\1\u04ca"+
    "\203\0\1\u01c4\172\0\1\u04cb\166\0\1\13\135\0\32\u04cc"+
    "\27\0\1\u04cd\23\0\1\u04cc\137\0\1\u04ce\174\0\1\u04cf"+
    "\216\0\1\u04d0\76\0\1\370\347\0\1\u0455\177\0\1\u0456"+
    "\100\0\1\u04d1\170\0\1\u04d2\162\0\1\335\15\0\1\u04d3"+
    "\5\0\1\u04d1\100\0\1\335\5\0\1\335\63\0\1\u04d4"+
    "\177\0\1\u04d5\215\0\1\u018e\141\0\1\u04d6\12\0\1\u02c1"+
    "\235\0\1\u0363\165\0\1\u01c4\210\0\1\u04d7\125\0\1\u04d8"+
    "\201\0\1\u04d9\206\0\1\u04da\250\0\1\u01c4\164\0\1\u044a"+
    "\207\0\1\u04db\160\0\1\u04dc\135\0\1\u04dd\177\0\1\u04de"+
    "\257\0\1\u04df\155\0\1\u04e0\200\0\1\u04e1\206\0\1\u021f"+
    "\214\0\1\251\153\0\1\u018e\202\0\1\u04e2\200\0\1\13"+
    "\153\0\1\u04e3\237\0\1\u04e4\162\0\1\u04e5\175\0\1\u0363"+
    "\220\0\1\u04e6\171\0\1\u0457\203\0\1\u04e7\173\0\1\u04e8"+
    "\71\0\1\u04e9\206\0\1\u04ea\46\0\1\u04d3\212\0\1\u04eb"+
    "\207\0\1\u04ec\131\0\1\u0204\207\0\1\u04ed\225\0\1\u0204"+
    "\121\0\1\u04ee\265\0\1\u04ef\205\0\1\u04f0\162\0\1\u0363"+
    "\153\0\1\u04f1\222\0\1\u0377\3\0\1\u0330\216\0\1\u02af"+
    "\171\0\1\13\177\0\1\u04f2\175\0\1\u04f3\177\0\1\u04f4"+
    "\167\0\1\u04f5\217\0\1\u04f6\147\0\1\u04f7\227\0\1\u04f8"+
    "\157\0\1\u04f9\212\0\1\u04fa\170\0\1\u04fb\166\0\1\u04fc"+
    "\37\0\1\u0363\106\0\1\u04fd\242\0\1\u04fe\127\0\1\u04ff"+
    "\131\0\1\u04ff\132\0\1\u0500\176\0\1\u0333\166\0\1\u0501"+
    "\177\0\1\u0502\164\0\1\260\177\0\1\u0324\123\0\1\u0503"+
    "\133\0\1\u0503\123\0\1\u0504\211\0\1\u0505\161\0\1\u0506"+
    "\177\0\1\u0507\223\0\1\u02e5\153\0\1\u02e5\15\0\1\u01c4"+
    "\133\0\1\u0245\167\0\1\u0508\220\0\1\u0509\166\0\1\u050a"+
    "\254\0\1\u050b\1\u050c\125\0\1\u050d\5\0\1\u050d\16\0"+
    "\1\u0115\216\0\1\u050e\204\0\2\u011f\175\0\1\u026d\165\0"+
    "\1\u050f\201\0\1\u0298\173\0\1\u0363\201\0\1\u02ba\206\0"+
    "\1\u050f\173\0\1\305\203\0\1\u0510\171\0\1\u0278\162\0"+
    "\1\u0207\215\0\1\u0511\165\0\1\u0512\205\0\1\u0513\133\0"+
    "\1\u0363\241\0\1\u0514\177\0\1\u0515\205\0\1\u0516\205\0"+
    "\1\u0517\170\0\1\u0518\177\0\1\u0412\205\0\1\u0519\177\0"+
    "\1\u051a\157\0\1\u051b\213\0\1\u014c\164\0\1\u0363\207\0"+
    "\1\u03ea\221\0\1\13\66\0\1\13\271\0\1\u02c8\1\0"+
    "\1\u0177\172\0\1\u0373\210\0\1\u0363\167\0\1\u051c\101\0"+
    "\1\132\306\0\1\13\153\0\1\u0354\137\0\32\254\27\0"+
    "\1\u051d\23\0\1\254\137\0\1\u051e\174\0\1\u051f\216\0"+
    "\1\u0520\154\0\1\u02ac\151\0\1\u0521\12\0\1\u0232\235\0"+
    "\1\u0522\126\0\1\u0523\12\0\1\u0219\227\0\1\u0524\177\0"+
    "\1\u0525\143\0\1\u02c1\242\0\1\u0526\171\0\1\u0527\176\0"+
    "\1\u0528\172\0\1\u0529\173\0\1\u052a\201\0\1\251\213\0"+
    "\1\u032e\1\0\1\u052b\175\0\1\u052c\200\0\1\u052d\173\0"+
    "\1\u052e\173\0\1\u01c3\73\0\1\u052f\251\0\1\u0530\222\0"+
    "\1\u0531\137\0\1\u0532\263\0\1\u0533\147\0\1\u028b\222\0"+
    "\1\u0497\120\0\1\u0534\10\0\1\u0535\222\0\1\u0536\222\0"+
    "\1\235\156\0\1\u018e\154\0\1\237\167\0\1\355\252\0"+
    "\1\u03d8\156\0\1\u0537\206\0\1\u0538\175\0\1\u03ad\175\0"+
    "\1\u0539\211\0\1\u053a\171\0\1\u053b\167\0\1\u014c\141\0"+
    "\1\u053c\245\0\1\u0498\177\0\1\u053d\210\0\1\u0511\166\0"+
    "\1\u048f\116\0\1\u0363\213\0\1\251\236\0\1\251\143\0"+
    "\1\u053e\231\0\1\u053f\215\0\1\235\165\0\1\u02b9\121\0"+
    "\1\u0540\4\13\2\0\1\13\263\0\1\u01c4\202\0\1\u0448"+
    "\170\0\1\u0541\203\0\1\u052a\137\0\1\u0542\170\0\1\u0543"+
    "\220\0\1\u0544\201\0\1\13\1\u0249\31\0\1\u011f\144\0"+
    "\1\13\1\u0249\165\0\1\u011f\223\0\1\u0545\210\0\1\u0363"+
    "\206\0\1\u014c\163\0\1\u0363\166\0\1\u0546\154\0\1\u0484"+
    "\234\0\1\u0547\204\0\1\u04c1\177\0\1\u043a\155\0\1\u0548"+
    "\227\0\1\u0549\65\0\1\u0189\40\0\1\u054a\220\0\1\u025b"+
    "\203\0\1\u0148\201\0\1\u0363\200\0\1\u054b\174\0\1\u054c"+
    "\216\0\1\u054d\154\0\1\u0399\214\0\1\u03ea\162\0\1\u054e"+
    "\214\0\1\u022a\106\0\1\u0151\333\0\1\u0151\134\0\1\u054f"+
    "\175\0\1\150\207\0\1\u0550\176\0\1\u0551\160\0\1\u01c4"+
    "\217\0\1\u0552\204\0\1\u0553\157\0\1\u0554\176\0\1\u01c4"+
    "\151\0\1\u0555\201\0\1\u0556\220\0\1\u021e\211\0\1\u0557"+
    "\174\0\1\u04c1\202\0\1\u0558\171\0\1\u0559\110\0\1\u055a"+
    "\105\0\1\u055b\131\0\1\u02c8\233\0\1\u055c\204\0\1\u055d"+
    "\200\0\1\u055e\177\0\1\u055f\137\0\1\u0560\237\0\1\150"+
    "\174\0\1\u0561\172\0\1\u018e\207\0\1\u025a\135\0\1\u0562"+
    "\175\0\1\u0563\162\0\1\u0564\262\0\1\u0565\156\0\1\u0566"+
    "\216\0\1\u0567\175\0\1\u044a\161\0\1\u02a6\212\0\1\u0568"+
    "\165\0\1\u0569\216\0\1\u056a\154\0\1\u044b\222\0\1\u056b"+
    "\157\0\1\u056c\215\0\1\u056d\201\0\1\u043a\172\0\1\u01c4"+
    "\175\0\1\u02e3\165\0\1\u02e3\216\0\1\u02ec\136\0\1\u056e"+
    "\232\0\1\u056f\200\0\1\u0570\200\0\1\u0571\163\0\1\u0572"+
    "\117\0\1\u0573\262\0\1\u0574\102\0\1\u0575\204\0\1\u0576"+
    "\301\0\1\u0373\126\0\1\u0577\256\0\1\u0363\136\0\1\u0578"+
    "\201\0\1\u011f\175\0\1\u0579\220\0\1\u057a\213\0\1\u057b"+
    "\160\0\1\u057c\161\0\1\u057d\237\0\1\u057e\154\0\1\u04cc"+
    "\221\0\1\u018e\135\0\1\u057f\227\0\1\u0580\160\0\1\13"+
    "\221\0\1\167\200\0\1\u0581\167\0\1\u0582\222\0\1\u0583"+
    "\151\0\1\u0583\105\0\1\u0584\254\0\1\u0585\162\0\1\u0586"+
    "\137\0\1\u0587\250\0\1\u0588\164\0\1\u0589\247\0\1\u011f"+
    "\206\0\1\u04b2\171\0\1\u058a\165\0\1\u0459\173\0\1\254"+
    "\204\0\1\u046d\7\0\1\u018e\166\0\1\u043a\177\0\1\u058b"+
    "\102\0\1\u058c\207\0\1\u018e\223\0\1\u058d\240\0\1\u058e"+
    "\203\0\1\u058f\147\0\1\u0590\210\0\1\u011f\115\0\1\u0591"+
    "\317\0\1\13\165\0\1\u0592\124\0\1\u0593\241\0\1\u0594"+
    "\216\0\1\u0595\177\0\1\u0596\123\0\1\u0597\7\0\1\13"+
    "\200\0\1\u0598\242\0\1\u0582\155\0\1\u0599\211\0\1\u0447"+
    "\207\0\1\u059a\76\0\1\u0209\224\0\1\13\177\0\1\u059b"+
    "\7\0\1\u011f\236\0\1\u059c\171\0\1\u059d\136\0\1\u011f"+
    "\255\0\1\u044a\167\0\1\u059e\170\0\1\u059f\114\0\1\u05a0"+
    "\133\0\1\13\43\0\1\152\157\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[179200];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\2\11\22\1\1\11"+
    "\70\1\1\11\2\1\1\11\3\1\2\11\1\1\1\11"+
    "\1\1\10\0\2\1\3\0\1\1\73\0\1\11\57\0"+
    "\1\1\31\0\1\11\1\1\137\0\1\1\12\0\1\11"+
    "\26\0\1\1\4\0\1\1\1\11\5\0\2\1\1\0"+
    "\1\1\1\11\2\0\1\11\3\0\1\1\17\0\1\11"+
    "\40\0\1\1\2\0\1\11\47\0\1\1\27\0\1\11"+
    "\14\0\1\1\35\0\1\11\23\0\1\11\42\0\1\1"+
    "\105\0\1\1\52\0\1\11\14\0\1\1\2\0\1\1"+
    "\77\0\1\11\121\0\1\1\4\0\1\1\32\0\1\1"+
    "\57\0\1\1\24\0\1\1\17\0\1\1\6\0\1\1"+
    "\105\0\1\1\3\0\1\1\13\0\1\1\17\0\1\1"+
    "\122\0\1\11\25\0\1\1\7\0\1\1\324\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TIBasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }  // fall though
            case 1441: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 27: break;
          case 2:
            { return TIBasicTypes.CRLF;
            }
          // fall through
          case 28: break;
          case 3:
            { return TIBasicTypes.TOKEN;
            }
          // fall through
          case 29: break;
          case 4:
            { yybegin(STRING);
            }
          // fall through
          case 30: break;
          case 5:
            { return TIBasicTypes.NUMBER;
            }
          // fall through
          case 31: break;
          case 6:
            { return TIBasicTypes.SIMPLE_VARIABLE;
            }
          // fall through
          case 32: break;
          case 7:
            { return TIBasicTypes.WINDOW_TOKENS;
            }
          // fall through
          case 33: break;
          case 8:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 34: break;
          case 9:
            { 
            }
          // fall through
          case 35: break;
          case 10:
            { yypushback(1); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 36: break;
          case 11:
            { yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 37: break;
          case 12:
            { return TIBasicTypes.COMMENT;
            }
          // fall through
          case 38: break;
          case 13:
            { return TIBasicTypes.LIST_VARIABLE;
            }
          // fall through
          case 39: break;
          case 14:
            { return TIBasicTypes.EQUATION_VARIABLE_1;
            }
          // fall through
          case 40: break;
          case 15:
            { return TIBasicTypes.EQUATION_VARIABLE_3;
            }
          // fall through
          case 41: break;
          case 16:
            { return TIBasicTypes.EQUATION_VARIABLE_4;
            }
          // fall through
          case 42: break;
          case 17:
            { return TIBasicTypes.EXPR_FUNCTIONS_WITH_ARGS;
            }
          // fall through
          case 43: break;
          case 18:
            { yypushback(2); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 44: break;
          case 19:
            { return TIBasicTypes.ANS_VARIABLE;
            }
          // fall through
          case 45: break;
          case 20:
            { return TIBasicTypes.COMMAND_NO_PARENS;
            }
          // fall through
          case 46: break;
          case 21:
            { return TIBasicTypes.COLOR_VARIABLE;
            }
          // fall through
          case 47: break;
          case 22:
            { return TIBasicTypes.EQUATION_VARIABLE_2;
            }
          // fall through
          case 48: break;
          case 23:
            { return TIBasicTypes.MATRIX_VARIABLE;
            }
          // fall through
          case 49: break;
          case 24:
            { return TIBasicTypes.COMMAND_WITH_PARENS;
            }
          // fall through
          case 50: break;
          case 25:
            { return TIBasicTypes.STRING_VARIABLE;
            }
          // fall through
          case 51: break;
          case 26:
            { return TIBasicTypes.EXPR_FUNCTIONS_NO_ARGS;
            }
          // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
