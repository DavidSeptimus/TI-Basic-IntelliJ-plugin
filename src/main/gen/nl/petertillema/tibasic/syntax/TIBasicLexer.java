// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TIBasic.flex

package nl.petertillema.tibasic.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import nl.petertillema.tibasic.psi.TIBasicTypes;


class TIBasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\31\u0100\1\u0400\1\u0500\1\u0100"+
    "\1\u0600\1\u0700\1\u0800\1\u0900\1\u0100\1\u0a00\5\u0100\1\u0b00"+
    "\322\u0100\1\u0c00\325\u0100\1\u0d00\1\u0e00\1\u0f00\41\u0100\1\u1000"+
    "\u0d8a\u0100\1\u1100\u017c\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\34"+
    "\1\36\1\11\1\37\1\40\1\41\1\42\1\11\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\0\1\76\1\77\1\100\1\14\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\6\0\1\3\33\0"+
    "\1\11\6\0\1\11\7\0\1\11\1\0\1\137\1\140"+
    "\1\11\2\0\1\11\1\0\1\141\5\0\4\11\1\0"+
    "\1\11\2\0\11\11\1\0\4\11\1\0\2\11\1\0"+
    "\4\11\2\0\4\11\1\0\1\11\2\0\11\11\1\0"+
    "\4\11\1\0\1\11\2\0\4\11\u0136\0\1\11\153\0"+
    "\1\11\23\0\1\11\25\0\1\142\31\0\1\143\36\0"+
    "\1\144\1\0\1\145\217\0\1\146\16\0\1\147\2\0"+
    "\1\11\2\0\1\11\7\0\5\11\2\0\1\150\2\0"+
    "\2\11\3\0\1\151\1\11\1\0\1\152\1\11\2\0"+
    "\1\153\123\0\1\154\44\0\1\11\43\0\1\11\362\0"+
    "\1\155\63\0\1\156\220\0\2\11\10\0\1\157\1\0"+
    "\2\3\32\0\1\160\66\0\1\161\4\0\1\162\1\163"+
    "\1\164\1\165\3\166\3\167\u0107\0\1\11\1\0\1\11"+
    "\162\0\1\170\23\0\1\171\5\0\1\11\12\0\1\11"+
    "\336\0\1\11\55\0\1\11\u0168\0\1\11\30\0\1\172"+
    "\11\0\1\173\125\0\1\11\u0147\0\1\11\242\0\1\174"+
    "\114\0\1\175\3\0\1\176\4\0\1\177\63\0\1\200"+
    "\u0151\0\1\201\223\0\1\202\311\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\u01ad\0\1\11\12\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4608];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\3\14\1\15"+
    "\1\16\1\17\1\20\31\21\1\22\1\23\25\3\1\24"+
    "\1\3\1\25\1\26\1\3\1\1\3\3\1\21\4\3"+
    "\2\1\3\3\1\14\1\3\1\1\1\27\1\1\2\30"+
    "\1\31\2\32\1\33\1\31\1\0\3\34\4\0\1\35"+
    "\1\0\1\36\1\0\1\14\1\37\2\0\1\14\1\0"+
    "\1\40\1\41\72\0\1\42\57\0\1\3\31\0\2\43"+
    "\137\0\1\3\12\0\1\44\26\0\1\3\4\0\1\3"+
    "\1\45\5\0\2\3\1\0\1\3\1\46\2\0\1\47"+
    "\1\50\24\0\1\51\40\0\1\52\2\0\1\53\1\52"+
    "\26\0\1\54\24\0\1\3\27\0\1\55\14\0\1\52"+
    "\36\0\1\56\23\0\1\57\42\0\1\3\105\0\1\42"+
    "\11\0\1\60\2\0\1\14\43\0\1\61\12\0\1\62"+
    "\2\0\1\3\2\0\1\63\1\52\16\0\1\64\62\0"+
    "\1\65\6\0\1\66\115\0\1\3\4\0\1\67\32\0"+
    "\1\42\5\0\1\70\1\71\45\0\1\72\5\0\1\52"+
    "\24\0\1\52\21\0\1\3\6\0\1\52\106\0\1\3"+
    "\3\0\1\21\13\0\1\42\17\0\1\52\76\0\1\73"+
    "\26\0\1\67\25\0\1\3\7\0\1\42\52\0\1\74"+
    "\255\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\203\0\u0106\0\u0189\0\u020c\0\u0189\0\u028f\0\u0312"+
    "\0\u0395\0\u0189\0\u0189\0\u0189\0\u0189\0\u0418\0\u0189\0\u0189"+
    "\0\u049b\0\u051e\0\u05a1\0\u0624\0\u06a7\0\u072a\0\u0189\0\u07ad"+
    "\0\u0189\0\u0830\0\u08b3\0\u0936\0\u09b9\0\u0a3c\0\u0abf\0\u0b42"+
    "\0\u0bc5\0\u0c48\0\u0ccb\0\u0189\0\u0d4e\0\u0dd1\0\u0e54\0\u0ed7"+
    "\0\u0f5a\0\u0fdd\0\u1060\0\u10e3\0\u1166\0\u11e9\0\u126c\0\u12ef"+
    "\0\u1372\0\u13f5\0\u1478\0\u14fb\0\u0189\0\u157e\0\u1601\0\u1684"+
    "\0\u1707\0\u178a\0\u180d\0\u1890\0\u1913\0\u1996\0\u1a19\0\u1a9c"+
    "\0\u1b1f\0\u1ba2\0\u1c25\0\u1ca8\0\u1d2b\0\u1dae\0\u1e31\0\u1eb4"+
    "\0\u1f37\0\u1fba\0\u203d\0\u20c0\0\u0189\0\u2143\0\u21c6\0\u2249"+
    "\0\u22cc\0\u234f\0\u23d2\0\u2455\0\u24d8\0\u255b\0\u25de\0\u2661"+
    "\0\u26e4\0\u2767\0\u27ea\0\u286d\0\u28f0\0\u0189\0\u2973\0\u29f6"+
    "\0\u0189\0\u286d\0\u2a79\0\u2afc\0\u0189\0\u0189\0\u2b7f\0\u0189"+
    "\0\u2c02\0\u020c\0\u0189\0\u020c\0\u2c85\0\u2d08\0\u2d8b\0\u2e0e"+
    "\0\u2e91\0\u0189\0\u2f14\0\u0189\0\u2f97\0\u301a\0\u309d\0\u3120"+
    "\0\u31a3\0\u3226\0\u32a9\0\u0189\0\u0189\0\u332c\0\u33af\0\u3432"+
    "\0\u34b5\0\u3538\0\u35bb\0\u363e\0\u36c1\0\u3744\0\u37c7\0\u384a"+
    "\0\u38cd\0\u3950\0\u39d3\0\u3a56\0\u3ad9\0\u3b5c\0\u3bdf\0\u3c62"+
    "\0\u3ce5\0\u3d68\0\u3deb\0\u3e6e\0\u3ef1\0\u3f74\0\u3ff7\0\u407a"+
    "\0\u40fd\0\u4180\0\u4203\0\u4286\0\u4309\0\u438c\0\u440f\0\u4492"+
    "\0\u4515\0\u4598\0\u461b\0\u469e\0\u4721\0\u47a4\0\u4827\0\u48aa"+
    "\0\u492d\0\u49b0\0\u4a33\0\u4ab6\0\u4b39\0\u4bbc\0\u4c3f\0\u4cc2"+
    "\0\u4d45\0\u4dc8\0\u4e4b\0\u4ece\0\u4f51\0\u4fd4\0\u5057\0\u0189"+
    "\0\u50da\0\u515d\0\u51e0\0\u5263\0\u52e6\0\u5369\0\u53ec\0\u546f"+
    "\0\u54f2\0\u5575\0\u55f8\0\u567b\0\u56fe\0\u5781\0\u5804\0\u5887"+
    "\0\u590a\0\u598d\0\u5a10\0\u5a93\0\u5b16\0\u5b99\0\u5c1c\0\u5c9f"+
    "\0\u5d22\0\u5da5\0\u5e28\0\u5eab\0\u5f2e\0\u5fb1\0\u6034\0\u60b7"+
    "\0\u613a\0\u61bd\0\u6240\0\u62c3\0\u6346\0\u63c9\0\u644c\0\u64cf"+
    "\0\u6552\0\u65d5\0\u6658\0\u66db\0\u675e\0\u67e1\0\u6864\0\u68e7"+
    "\0\u696a\0\u69ed\0\u6a70\0\u6af3\0\u6b76\0\u6bf9\0\u6c7c\0\u6cff"+
    "\0\u6d82\0\u6e05\0\u6e88\0\u6f0b\0\u6f8e\0\u7011\0\u7094\0\u7117"+
    "\0\u719a\0\u721d\0\u72a0\0\u7323\0\u73a6\0\u7429\0\u74ac\0\u752f"+
    "\0\u75b2\0\u0189\0\u74ac\0\u7635\0\u76b8\0\u773b\0\u77be\0\u7841"+
    "\0\u78c4\0\u7947\0\u79ca\0\u7a4d\0\u7ad0\0\u7b53\0\u7bd6\0\u29f6"+
    "\0\u7c59\0\u7cdc\0\u7d5f\0\u7de2\0\u7e65\0\u7ee8\0\u7f6b\0\u7fee"+
    "\0\u8071\0\u80f4\0\u8177\0\u81fa\0\u827d\0\u8300\0\u8383\0\u8406"+
    "\0\u8489\0\u850c\0\u858f\0\u8612\0\u8695\0\u8718\0\u879b\0\u881e"+
    "\0\u88a1\0\u8924\0\u89a7\0\u8a2a\0\u8aad\0\u8b30\0\u8bb3\0\u8c36"+
    "\0\u8cb9\0\u8d3c\0\u8dbf\0\u8e42\0\u8ec5\0\u8f48\0\u8fcb\0\u904e"+
    "\0\u90d1\0\u9154\0\u91d7\0\u925a\0\u92dd\0\u9360\0\u93e3\0\u9466"+
    "\0\u94e9\0\u956c\0\u95ef\0\u9672\0\u96f5\0\u9778\0\u28f0\0\u97fb"+
    "\0\u987e\0\u9901\0\u9984\0\u9a07\0\u9a8a\0\u9b0d\0\u9b90\0\u9c13"+
    "\0\u9c96\0\u9d19\0\u9d9c\0\u9e1f\0\u9ea2\0\u9f25\0\u9fa8\0\u2767"+
    "\0\ua02b\0\ua0ae\0\ua131\0\ua1b4\0\ua237\0\ua2ba\0\ua33d\0\ua3c0"+
    "\0\ua443\0\ua4c6\0\ua549\0\ua5cc\0\ua64f\0\ua6d2\0\ua755\0\u25de"+
    "\0\ua7d8\0\ua85b\0\ua8de\0\ua961\0\ua9e4\0\u0189\0\uaa67\0\uaaea"+
    "\0\uab6d\0\uabf0\0\uac73\0\uacf6\0\uad79\0\uadfc\0\uae7f\0\uaf02"+
    "\0\uaf85\0\ub008\0\ub08b\0\ub10e\0\ub191\0\ub214\0\ub297\0\ub31a"+
    "\0\ub39d\0\ub420\0\ub4a3\0\ub526\0\ub5a9\0\ub62c\0\ub6af\0\ub732"+
    "\0\ub7b5\0\ub838\0\u0189\0\ub8bb\0\ub93e\0\ub9c1\0\uba44\0\ubac7"+
    "\0\ubb4a\0\ubbcd\0\ubc50\0\ubcd3\0\u0189\0\ubd56\0\ubdd9\0\u0189"+
    "\0\u0189\0\ube5c\0\ubedf\0\ubf62\0\ubfe5\0\uc068\0\uc0eb\0\uc16e"+
    "\0\uc1f1\0\uc274\0\uc2f7\0\uc37a\0\uc3fd\0\uc480\0\uc503\0\uc586"+
    "\0\uc609\0\uc68c\0\uc70f\0\uc792\0\uc815\0\u0189\0\uc898\0\uc91b"+
    "\0\uc99e\0\uca21\0\ucaa4\0\ucb27\0\ucbaa\0\ucc2d\0\uccb0\0\ucd33"+
    "\0\ucdb6\0\uce39\0\ucebc\0\ucf3f\0\ucfc2\0\ud045\0\ud0c8\0\ud14b"+
    "\0\ud1ce\0\ud251\0\ud2d4\0\ud357\0\ud3da\0\ud45d\0\ud4e0\0\ud563"+
    "\0\ud5e6\0\ud669\0\ud6ec\0\ud76f\0\ud7f2\0\ud875\0\ud8f8\0\ud97b"+
    "\0\ud9fe\0\u0189\0\u0189\0\uda81\0\udb04\0\udb87\0\udc0a\0\udc8d"+
    "\0\udd10\0\udd93\0\ude16\0\ude99\0\udf1c\0\udf9f\0\ue022\0\ue0a5"+
    "\0\ue128\0\ue1ab\0\ue22e\0\ue2b1\0\ue334\0\ue3b7\0\ue43a\0\ue4bd"+
    "\0\ue540\0\u0189\0\ue5c3\0\ue646\0\ue6c9\0\ue74c\0\ue7cf\0\ue852"+
    "\0\ue8d5\0\ue958\0\ue9db\0\uea5e\0\ueae1\0\ueb64\0\uebe7\0\uec6a"+
    "\0\ueced\0\ued70\0\uedf3\0\uee76\0\ueef9\0\uef7c\0\uefff\0\uf082"+
    "\0\uf105\0\uf188\0\uf20b\0\uf28e\0\uf311\0\uf394\0\uf417\0\uf49a"+
    "\0\uf51d\0\uf5a0\0\uf623\0\uf6a6\0\uf729\0\uf7ac\0\uf82f\0\uf8b2"+
    "\0\uf935\0\uf9b8\0\ufa3b\0\ufabe\0\ufb41\0\ufbc4\0\u0189\0\ufc47"+
    "\0\ufcca\0\ufd4d\0\ufdd0\0\ufe53\0\ufed6\0\uff59\0\uffdc\1\137"+
    "\1\342\1\u0165\1\u01e8\1\u026b\1\u02ee\1\u0371\1\u03f4\1\u0477"+
    "\1\u04fa\1\u057d\1\u0600\1\u0683\1\u0706\1\u0789\1\u080c\1\u088f"+
    "\1\u0912\1\u0995\1\u0a18\1\u0a9b\1\u0b1e\1\u0ba1\1\u0c24\1\u0ca7"+
    "\1\u0d2a\1\u0dad\1\u0e30\1\u0eb3\1\u0f36\1\u0fb9\1\u103c\1\u10bf"+
    "\1\u1142\1\u11c5\0\u0189\1\u1248\1\u12cb\1\u134e\1\u13d1\1\u1454"+
    "\1\u14d7\1\u155a\1\u15dd\1\u1660\1\u16e3\1\u1766\1\u17e9\1\u186c"+
    "\1\u18ef\1\u1972\1\u19f5\1\u1a78\1\u1afb\1\u1b7e\0\u0189\1\u1c01"+
    "\1\u1c84\1\u1d07\1\u1d8a\1\u1e0d\1\u1e90\1\u1f13\1\u1f96\1\u2019"+
    "\1\u209c\1\u211f\1\u21a2\1\u2225\1\u22a8\1\u232b\1\u23ae\1\u2431"+
    "\1\u24b4\1\u2537\1\u25ba\1\u263d\1\u26c0\1\u2743\1\u27c6\1\u2849"+
    "\1\u28cc\1\u294f\1\u29d2\1\u2a55\1\u2ad8\1\u2b5b\1\u2bde\1\u2c61"+
    "\1\u2ce4\1\u2d67\1\u2dea\1\u2e6d\1\u2ef0\1\u2f73\1\u2ff6\1\u3079"+
    "\1\u30fc\1\u317f\1\u3202\1\u3285\1\u3308\1\u338b\1\u340e\1\u3491"+
    "\1\u3514\1\u3597\1\u361a\1\u369d\1\u3720\1\u37a3\1\u3826\1\u38a9"+
    "\1\u392c\1\u39af\1\u3a32\1\u3ab5\1\u3b38\1\u3bbb\1\u3c3e\1\u3cc1"+
    "\1\u3d44\1\u3dc7\1\u3e4a\1\u3ecd\1\u3f50\1\u3fd3\1\u4056\1\u40d9"+
    "\1\u415c\1\u41df\1\u4262\1\u42e5\1\u4368\1\u43eb\1\u446e\1\u44f1"+
    "\1\u4574\1\u45f7\1\u467a\1\u46fd\1\u4780\1\u4803\1\u4886\1\u4909"+
    "\1\u498c\1\u4a0f\1\u4a92\1\u4b15\1\u4b98\1\u4c1b\1\u4c9e\1\u4d21"+
    "\1\u4da4\1\u4e27\1\u4eaa\1\u4f2d\1\u4fb0\1\u5033\1\u50b6\1\u5139"+
    "\1\u51bc\1\u523f\1\u52c2\1\u5345\1\u53c8\1\u544b\1\u54ce\1\u5551"+
    "\1\u55d4\0\u0189\1\u5657\1\u56da\1\u575d\1\u575d\1\u57e0\1\u5863"+
    "\1\u58e6\1\u5969\1\u59ec\1\u5a6f\1\u5af2\1\u5b75\1\u5bf8\1\u5c7b"+
    "\1\u5cfe\1\u5d81\1\u5e04\1\u5e87\1\u5f0a\1\u5f8d\1\u6010\1\u6093"+
    "\1\u6116\1\u6199\1\u621c\1\u629f\1\u6322\1\u63a5\1\u6428\1\u64ab"+
    "\1\u652e\1\u65b1\1\u6634\1\u66b7\1\u673a\1\u67bd\1\u6840\1\u68c3"+
    "\0\u0189\1\u6946\1\u69c9\1\u6a4c\1\u6acf\1\u6b52\1\u6bd5\1\u6c58"+
    "\1\u6cdb\1\u6d5e\1\u6de1\0\u0189\1\u6e64\1\u6ee7\1\u6f6a\1\u6fed"+
    "\1\u7070\0\u0189\1\u70f3\1\u7176\1\u71f9\1\u727c\1\u72ff\1\u7382"+
    "\1\u7405\1\u7488\1\u750b\1\u758e\1\u7611\1\u7694\1\u7717\1\u779a"+
    "\1\u781d\0\u0189\1\u78a0\1\u7923\1\u79a6\1\u7a29\1\u7aac\1\u7b2f"+
    "\1\u7bb2\1\u7c35\1\u7cb8\1\u7d3b\1\u7dbe\1\u7e41\1\u7ec4\1\u7f47"+
    "\1\u7fca\1\u804d\1\u80d0\1\u8153\1\u81d6\1\u8259\1\u82dc\1\u835f"+
    "\1\u83e2\1\u8465\1\u84e8\1\u856b\1\u85ee\1\u8671\1\u86f4\1\u8777"+
    "\1\u87fa\1\u887d\1\u8900\1\u8983\1\u8a06\1\u8a89\1\u8b0c\1\u8b8f"+
    "\1\u8c12\1\u8c95\1\u8d18\1\u8d9b\1\u8e1e\1\u8ea1\1\u8f24\1\u8fa7"+
    "\1\u902a\1\u90ad\1\u9130\1\u91b3\0\u0189\1\u9236\1\u92b9\1\u933c"+
    "\1\u93bf\1\u9442\1\u94c5\0\u0189\1\u9548\1\u95cb\1\u964e\1\u96d1"+
    "\1\u9754\1\u97d7\1\u985a\1\u98dd\1\u9960\1\u99e3\1\u9a66\1\u9ae9"+
    "\1\u9b6c\1\u9bef\1\u9c72\1\u9cf5\1\u9d78\1\u9dfb\1\u9e7e\1\u9f01"+
    "\1\u9f84\1\ua007\1\ua08a\1\ua10d\1\ua190\1\ua213\1\ua296\1\ua319"+
    "\1\ua39c\1\ua41f\1\ua4a2\1\ua525\1\ua5a8\1\ua62b\1\ua6ae\1\ua731"+
    "\1\ua7b4\1\ua837\1\ua8ba\1\ua93d\1\ua9c0\1\uaa43\1\uaac6\1\uab49"+
    "\1\uabcc\1\uac4f\1\uacd2\1\uad55\1\uadd8\1\uae5b\1\uaede\1\uaf61"+
    "\1\uafe4\1\ub067\1\ub0ea\1\ub16d\1\ub1f0\1\ub273\1\ub2f6\1\ub379"+
    "\1\ub3fc\1\ub47f\1\ub502\1\ub585\1\ub608\1\ub68b\1\ub70e\1\ub791"+
    "\1\ub814\1\ub897\1\ub91a\1\ub99d\1\uba20\1\ubaa3\1\ubb26\1\ubba9"+
    "\1\ubc2c\1\ubcaf\1\ubd32\1\ubdb5\1\ube38\1\ubebb\1\ubf3e\1\ubfc1"+
    "\1\uc044\1\uc0c7\1\uc14a\1\uc1cd\1\uc250\1\uc2d3\1\uc356\1\uc3d9"+
    "\1\uc45c\1\uc4df\1\uc562\1\uc5e5\1\uc668\1\uc6eb\1\uc76e\1\uc7f1"+
    "\1\uc874\1\uc8f7\1\uc97a\1\uc9fd\1\uca80\1\ubcaf\1\ucb03\1\ucb86"+
    "\1\ucc09\1\ucc8c\1\ucd0f\1\ucd92\1\uce15\1\uce98\1\ucf1b\0\u0189"+
    "\0\u0189\1\ucf9e\1\ud021\1\ud0a4\1\ud127\1\ud1aa\1\ud22d\1\ud2b0"+
    "\1\ud333\1\ud3b6\1\ud439\1\ud4bc\1\ud53f\1\ud5c2\1\ud645\1\ud6c8"+
    "\1\ud74b\1\ud7ce\1\ud851\1\ud8d4\1\ud957\1\ud9da\1\uda5d\1\udae0"+
    "\1\udb63\1\udbe6\1\udc69\1\udcec\1\udd6f\1\uddf2\1\ude75\1\udef8"+
    "\1\udf7b\1\udffe\1\ue081\1\ue104\1\ue187\1\ue20a\0\u0189\1\ue28d"+
    "\1\ue310\1\ue393\1\ue416\1\ue499\1\ue51c\1\ue59f\1\ue622\1\ue6a5"+
    "\1\ue728\1\ue7ab\1\ue82e\1\ue8b1\1\ue934\1\ue9b7\1\uea3a\1\ueabd"+
    "\1\ueb40\1\uebc3\1\uec46\1\uecc9\1\ued4c\1\uedcf\1\uee52\1\ueed5"+
    "\1\uef58\1\u8a89\1\u70f3\1\uefdb\1\uf05e\1\uf0e1\1\uf164\1\uf1e7"+
    "\1\uf26a\1\uf2ed\1\uf370\1\uf3f3\1\uf476\1\uf4f9\1\uf57c\1\uf5ff"+
    "\1\uf682\1\uf705\1\uf788\1\uf80b\1\uf88e\1\uf911\1\uf994\1\ufa17"+
    "\1\ufa9a\1\ufb1d\1\ufba0\1\ufc23\1\ufca6\1\ufd29\1\ufdac\1\ufe2f"+
    "\1\ufeb2\1\uff35\1\uffb8\2\73\2\276\2\u0141\2\u01c4\2\u0247"+
    "\2\u02ca\2\u034d\2\u03d0\2\u0453\2\u04d6\2\u0559\2\u05dc\2\u065f"+
    "\2\u06e2\2\u0765\2\u07e8\2\u086b\2\u08ee\2\u0971\2\u09f4\2\u0a77"+
    "\0\u286d\2\u0afa\2\u0b7d\2\u0c00\0\ubcd3\2\u0c83\2\u0d06\2\u0d89"+
    "\2\u0e0c\2\u0e8f\2\u0f12\2\u0f95\2\u1018\2\u109b\2\u111e\2\u11a1"+
    "\2\u1224\2\u12a7\2\u132a\2\u13ad\2\u1430\2\u14b3\2\u1536\2\u15b9"+
    "\2\u163c\2\u16bf\2\u1742\2\u17c5\2\u1848\2\u18cb\2\u194e\2\u19d1"+
    "\2\u1a54\2\u1ad7\2\u1b5a\2\u1bdd\2\u1c60\2\u1ce3\2\u1d66\2\u1de9"+
    "\2\u1e6c\2\u1eef\2\u1f72\2\u1ff5\2\u2078\2\u20fb\2\u217e\2\u2201"+
    "\2\u2284\2\u2307\2\u238a\2\u240d\2\u2490\2\u2513\2\u2596\2\u2619"+
    "\2\u269c\2\u271f\2\u27a2\2\u2825\2\u28a8\2\u292b\2\u29ae\2\u2a31"+
    "\2\u2ab4\2\u2b37\2\u2bba\2\u2c3d\2\u2cc0\2\u2d43\2\u2dc6\2\u2e49"+
    "\2\u2ecc\0\udd10\2\u2f4f\2\u2fd2\2\u3055\2\u30d8\2\u315b\2\u31de"+
    "\2\u3261\2\u32e4\2\u3367\2\u33ea\2\u346d\2\u34f0\2\u3573\2\u35f6"+
    "\2\u3679\2\u36fc\2\u377f\2\u3802\2\u3885\2\u3908\2\u398b\2\u3a0e"+
    "\2\u3a91\2\u3b14\2\u3b97\2\u3c1a\2\u3c9d\2\u3d20\2\u3da3\2\u3e26"+
    "\2\u3ea9\2\u3f2c\2\u3faf\2\u4032\2\u40b5\2\u4138\2\u41bb\2\u423e"+
    "\2\u42c1\2\u4344\2\u43c7\2\u444a\2\u44cd\2\u4550\2\u45d3\2\u4656"+
    "\2\u46d9\2\u475c\2\u47df\2\u4862\2\u48e5\2\u4968\2\u49eb\2\u4a6e"+
    "\2\u4af1\2\u4b74\2\u4bf7\2\u4c7a\2\u4cfd\2\u4d80\2\u4e03\2\u4e86"+
    "\0\u0189\2\u4f09\2\u4f8c\2\u500f\2\u5092\2\u5115\2\u5198\2\u521b"+
    "\2\u529e\2\u5321\2\u53a4\2\u5427\2\u54aa\2\u552d\2\u55b0\2\u5633"+
    "\2\u56b6\2\u5739\2\u57bc\2\u583f\2\u58c2\2\u5945\2\u59c8\0\u0189"+
    "\2\u5a4b\2\u5ace\2\u5b51\2\u5bd4\2\u5c57\2\u5cda\2\u5d5d\2\u5de0"+
    "\2\u5e63\2\u5ee6\2\u5f69\2\u5fec\2\u606f\2\u60f2\2\u6175\2\u61f8"+
    "\2\u627b\2\u62fe\2\u6381\2\u6404\2\u6487\2\u650a\2\u658d\2\u6610"+
    "\2\u6693\2\u6716\2\u6799\2\u681c\2\u689f\2\u6922\2\u69a5\2\u6a28"+
    "\2\u6aab\2\u6b2e\2\u6bb1\2\u6c34\2\u6cb7\2\u6d3a\2\u6dbd\2\u6e40"+
    "\2\u6ec3\2\u6f46\2\u6fc9\2\u704c\2\u70cf\2\u7152\2\u71d5\2\u7258"+
    "\2\u72db\2\u735e\2\u73e1\2\u7464\2\u74e7\2\u756a\2\u75ed\2\u7670"+
    "\2\u76f3\2\u7776\2\u77f9\2\u787c\2\u78ff\2\u7982\2\u7a05\2\u7a88"+
    "\2\u7b0b\2\u7b8e\2\u7c11\2\u7c94\2\u7d17\2\u7d9a\2\u7e1d\2\u7ea0"+
    "\0\u0189\2\u7f23\2\u7fa6\2\u8029\2\u80ac\2\u812f\2\u81b2\2\u8235"+
    "\2\u82b8\2\u833b\2\u83be\2\u8441\2\u84c4\2\u8547\2\u85ca\2\u864d"+
    "\2\u86d0\2\u8753\2\u87d6\2\u8859\2\u88dc\2\u895f\2\u89e2\2\u8a65"+
    "\2\u8ae8\2\u8b6b\2\u8bee\2\u8c71\2\u8cf4\2\u8d77\2\u8dfa\2\u8e7d"+
    "\2\u8f00\2\u8f83\2\u9006\2\u9089\2\u910c\2\u918f\2\u9212\2\u9295"+
    "\2\u9318\2\u939b\2\u941e\2\u94a1\2\u9524\2\u95a7\2\u962a\2\u96ad"+
    "\2\u9730\2\u97b3\2\u9836\2\u98b9\2\u993c\2\u99bf\2\u9a42\2\u9ac5"+
    "\2\u9b48\2\u9bcb\2\u9c4e\2\u9cd1\2\u9d54\2\u9dd7\2\u9e5a\2\u9edd"+
    "\2\u9f60\2\u9fe3\2\ua066\2\ua0e9\2\ua16c\2\ua1ef\2\ua272\2\ua2f5"+
    "\2\ua378\2\ua3fb\2\ua47e\2\ua501\2\u650a\2\ua584\2\ua607\2\ua68a"+
    "\2\ua70d\2\ua790\2\ua813\2\ua896\2\ua919\2\ua99c\2\uaa1f\2\uaaa2"+
    "\2\uab25\2\uaba8\2\uac2b\2\uacae\2\uad31\2\uadb4\2\uae37\2\uaeba"+
    "\2\uaf3d\2\uafc0\2\ub043\2\ub0c6\2\ub149\2\ub1cc\2\ub24f\2\ub2d2"+
    "\2\ub355\2\ub3d8\2\ub45b\2\ub4de\2\ub561\2\ub5e4\2\ub667\2\ub6ea"+
    "\2\ub76d\2\ub7f0\2\ub873\2\ub8f6\2\ub979\2\ub9fc\2\uba7f\2\ubb02"+
    "\2\ubb85\2\ubc08\2\ubc8b\2\ubd0e\2\ubd91\2\ube14\2\ube97\2\ubf1a"+
    "\2\ubf9d\2\uc020\2\uc0a3\2\uc126\2\uc1a9\2\uc22c\2\uc2af\2\uc332"+
    "\2\uc3b5\2\uc438\2\uc4bb\2\uc53e\2\uc5c1\2\uc644\2\uc6c7\2\uc74a"+
    "\2\uc7cd\2\uc850\2\uc8d3\2\uc956\2\uc9d9\2\uca5c\2\ucadf\2\ucb62"+
    "\2\ucbe5\2\ucc68\2\ucceb\2\ucd6e\2\ucdf1\2\uce74\2\ucef7\2\ucf7a"+
    "\2\ucffd\2\ud080\2\ud103\2\ud186\2\ud209\2\ud28c\2\ud30f\2\ud392"+
    "\2\ud415\2\ud498\2\ud51b\2\ud59e\2\ud621\2\ud6a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\4\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\6\24\1\27\1\30"+
    "\1\31\1\32\1\13\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\13"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\13"+
    "\1\76\2\13\1\77\1\100\1\101\1\13\1\102\1\13"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\13\1\113\1\114\1\115\1\116\1\13\1\117\1\4"+
    "\1\120\1\121\2\4\1\122\1\123\1\124\1\4\1\125"+
    "\1\126\1\13\2\127\2\13\1\120\1\13\1\130\4\13"+
    "\1\131\1\132\1\133\1\13\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\4\1\143\1\6\1\4\1\143"+
    "\1\7\1\144\1\11\1\12\4\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\6\24\1\27\1\30\1\31\1\32\1\13\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\13\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\13\1\76\2\13\1\77\1\100\1\101"+
    "\1\13\1\102\1\13\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\13\1\113\1\114\1\115\1\116"+
    "\1\13\1\117\1\4\1\120\1\121\2\4\1\122\1\123"+
    "\1\124\1\4\1\125\1\126\1\13\2\127\2\13\1\120"+
    "\1\13\1\130\4\13\1\131\1\132\1\133\1\13\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\2\145\1\146"+
    "\2\145\1\147\2\145\1\150\11\145\1\151\160\145\204\0"+
    "\1\152\2\153\1\154\1\155\1\152\176\0\1\6\201\0"+
    "\1\152\2\153\1\154\1\155\1\152\72\0\1\156\14\0"+
    "\1\157\1\160\10\0\1\161\112\0\1\162\264\0\1\163"+
    "\121\0\1\164\164\0\1\165\1\0\11\166\171\0\1\167"+
    "\201\0\1\166\1\0\11\24\76\0\1\170\70\0\1\171"+
    "\1\166\1\0\1\172\10\24\76\0\1\170\70\0\1\173"+
    "\1\166\1\0\11\24\76\0\1\170\106\0\1\174\73\0"+
    "\1\13\106\0\1\175\5\0\1\176\1\177\1\200\7\0"+
    "\1\201\1\0\1\202\1\0\1\203\31\0\1\204\144\0"+
    "\1\205\6\0\1\206\26\0\1\207\3\0\1\210\1\211"+
    "\4\0\1\212\130\0\1\213\5\0\1\214\14\0\1\215"+
    "\12\0\1\216\2\0\1\217\2\0\1\220\104\0\1\221"+
    "\22\0\1\222\6\0\1\223\32\0\1\224\2\0\1\225"+
    "\2\0\1\226\5\0\1\227\120\0\1\230\3\0\1\231"+
    "\15\0\1\232\13\0\1\233\3\0\1\234\3\0\1\235"+
    "\5\0\1\236\2\0\1\237\174\0\1\240\1\0\1\241"+
    "\2\0\1\242\6\0\1\243\136\0\1\244\3\0\1\141"+
    "\12\0\1\245\5\0\1\246\2\0\1\247\1\0\1\250"+
    "\1\251\1\245\4\0\1\252\77\0\1\253\23\0\1\254"+
    "\15\0\1\255\14\0\1\256\3\0\1\257\11\0\1\260"+
    "\2\0\1\261\171\0\1\262\5\0\1\263\75\0\1\141"+
    "\52\0\1\264\20\0\1\265\6\0\1\266\1\267\112\0"+
    "\6\270\13\0\1\271\16\0\1\272\12\0\1\273\1\274"+
    "\6\0\1\275\4\0\1\276\1\277\4\0\1\300\36\0"+
    "\4\270\57\0\1\301\3\0\1\302\31\0\1\303\3\0"+
    "\1\304\11\0\1\305\126\0\1\306\35\0\1\307\15\0"+
    "\1\310\147\0\1\311\30\0\1\312\2\0\1\313\1\0"+
    "\1\314\2\0\1\315\101\0\1\221\14\0\1\316\15\0"+
    "\1\317\10\0\1\141\10\0\1\320\6\0\1\321\1\322"+
    "\2\0\1\323\1\324\1\0\1\325\2\0\1\326\1\0"+
    "\1\327\2\0\1\330\1\331\41\0\1\316\135\0\1\332"+
    "\35\0\1\13\1\0\1\13\56\0\1\333\5\0\1\334"+
    "\3\0\1\335\25\0\1\336\3\0\1\337\31\0\1\13"+
    "\32\0\1\333\57\0\1\340\16\0\1\341\14\0\1\342"+
    "\1\0\1\343\2\0\1\344\1\345\5\0\1\346\4\0"+
    "\1\347\3\0\1\350\1\13\73\0\1\351\30\0\1\352"+
    "\25\0\1\353\1\354\2\0\1\355\2\0\1\356\1\357"+
    "\3\0\1\360\4\0\1\361\1\362\175\0\1\363\60\0"+
    "\2\364\107\0\1\365\10\0\1\366\60\0\1\364\1\367"+
    "\54\0\1\370\26\0\1\371\3\0\1\372\2\0\1\373"+
    "\142\0\1\374\44\0\1\360\4\0\1\375\1\376\37\0"+
    "\4\377\63\0\1\u0100\1\374\34\0\1\u0101\7\0\1\360"+
    "\5\0\1\376\36\0\1\u0102\4\u0103\1\u0102\35\0\1\u0104"+
    "\21\0\1\u0105\1\0\1\u0106\1\0\1\u0107\2\0\1\u0108"+
    "\6\0\1\u0109\1\u010a\1\0\1\u010b\1\u010c\2\u010d\1\0"+
    "\1\u010e\1\u010f\22\0\1\u0110\1\u0111\4\0\1\u0112\2\u0113"+
    "\1\u0114\20\0\1\u0115\26\0\2\u0110\45\0\1\u0116\1\u0117"+
    "\1\u0118\1\u0119\1\u0117\1\u011a\4\u0117\2\0\1\u011b\3\0"+
    "\1\u011c\1\u011d\1\u011e\1\0\1\u011f\13\0\1\u0120\1\u0121"+
    "\1\u0122\1\u0123\2\0\1\u0124\2\0\1\u0125\1\u0126\1\u0127"+
    "\1\0\1\u0128\1\0\1\u0129\1\u012a\1\u012b\1\u012c\2\0"+
    "\1\u012d\1\u012e\1\u012b\1\0\1\u012f\20\0\1\u012b\22\0"+
    "\1\u012b\101\0\1\u0130\123\0\1\u0131\61\0\1\u0132\1\u0133"+
    "\10\0\1\u0134\1\0\1\u0135\3\0\1\u0136\1\u0137\1\u0138"+
    "\1\u0139\156\0\1\u013a\3\0\1\u013b\3\0\1\u013c\5\0"+
    "\1\u013d\173\0\1\u013e\6\0\1\u013f\2\0\1\u0140\2\0"+
    "\1\u0141\156\0\1\u0142\1\u0143\2\0\1\u0144\3\0\1\u0145"+
    "\5\0\1\u0146\162\0\1\u0147\20\0\1\u0148\5\0\1\u0149"+
    "\1\0\1\u014a\131\0\1\u014b\2\0\1\u014c\33\0\1\u014d"+
    "\165\0\1\u014e\1\0\1\u0143\1\0\1\u014f\14\0\1\u0150"+
    "\142\0\1\u014c\21\0\1\u0151\10\0\1\u0152\1\u0153\3\0"+
    "\1\u0154\1\u0155\160\0\1\u0156\1\0\1\u0145\1\0\1\u0157"+
    "\10\0\1\u0158\1\u0159\164\0\1\u015a\3\0\1\u015b\3\0"+
    "\1\u015c\13\0\1\13\101\0\1\u015d\21\0\1\u015e\10\0"+
    "\1\360\5\0\1\u015f\31\0\1\u0160\1\u0161\37\0\1\u015d"+
    "\2\0\2\13\126\0\1\u0162\1\u0163\2\0\1\u0164\2\0"+
    "\1\u0165\2\0\1\u0166\5\0\1\u0167\13\0\1\u0168\137\0"+
    "\1\u0169\3\0\1\u016a\2\0\1\u016b\6\0\1\u016c\2\0"+
    "\1\u016d\14\0\1\13\23\0\4\u016e\6\0\1\u016f\112\0"+
    "\1\u0170\2\0\1\u0171\1\u0172\3\0\1\u0173\1\0\1\u0174"+
    "\1\0\1\u0175\2\0\1\u0176\1\u0177\156\0\1\u0178\1\0"+
    "\1\245\4\0\1\u0179\1\u017a\5\0\1\u017b\1\245\5\0"+
    "\1\u017c\71\0\1\u017d\102\0\1\u017e\5\0\2\u017f\70\0"+
    "\1\u017d\63\0\1\u0180\25\0\1\u017f\70\0\1\u017d\275\0"+
    "\1\u0181\4\0\1\u0182\4\0\1\u0183\6\0\1\u0184\13\0"+
    "\1\u0185\15\0\3\13\200\0\3\13\107\0\1\u0186\1\u0187"+
    "\26\0\1\u0188\67\0\1\13\4\0\1\13\21\0\2\13"+
    "\1\0\2\13\2\0\1\u0189\2\0\1\13\5\0\1\u018a"+
    "\1\0\1\141\1\0\1\u0189\42\0\3\u018b\6\0\1\13"+
    "\12\0\1\13\22\0\1\13\4\0\1\141\24\0\1\u018c"+
    "\1\0\11\24\336\0\1\u0158\152\0\1\13\232\0\1\13"+
    "\67\0\1\u018d\7\0\1\u018e\3\0\2\141\124\0\1\13"+
    "\35\0\1\u018f\6\0\1\u0190\45\0\1\u0191\1\u0192\130\0"+
    "\1\360\35\0\1\360\5\0\1\362\207\0\2\13\150\0"+
    "\1\u0193\37\0\1\u0194\71\0\2\13\133\0\2\13\200\0"+
    "\1\135\106\0\1\u018e\3\0\2\141\124\0\1\u0195\233\0"+
    "\1\176\1\177\1\u0196\7\0\1\201\1\0\1\202\1\0"+
    "\1\203\31\0\1\u0197\167\0\1\245\14\0\1\245\161\0"+
    "\1\u0158\162\0\1\360\5\0\1\u015f\174\0\1\360\124\0"+
    "\1\143\2\153\1\143\1\155\1\143\175\0\1\143\2\153"+
    "\1\143\1\155\1\143\72\0\1\156\14\0\1\157\1\160"+
    "\10\0\1\161\54\0\1\u0198\241\0\1\u0198\143\0\1\u0199"+
    "\316\0\1\u019a\131\0\1\u019b\14\0\1\u019b\242\0\1\u019c"+
    "\177\0\1\u019d\202\0\1\u019e\106\0\1\13\204\0\11\166"+
    "\76\0\1\170\46\0\2\167\1\0\2\167\1\0\175\167"+
    "\47\0\1\u019f\215\0\1\u01a0\5\0\1\u01a1\135\0\1\166"+
    "\1\0\11\24\41\0\1\u0147\34\0\1\170\130\0\1\u01a0"+
    "\2\0\1\u01a2\2\0\1\u01a1\171\0\1\u01a3\25\0\1\u01a4"+
    "\203\0\1\u01a5\133\0\1\u01a6\62\0\1\u01a7\177\0\1\u0145"+
    "\202\0\1\u01a8\170\0\1\u01a9\121\0\1\u01aa\133\0\1\u01ab"+
    "\103\0\1\u01ac\207\0\1\u01ad\237\0\1\u01ae\162\0\1\u01af"+
    "\214\0\1\u01b0\172\0\1\u01b1\140\0\1\u01b2\23\0\1\u01b3"+
    "\174\0\1\u01b4\224\0\1\u01b5\200\0\1\u01b6\23\0\1\u01b7"+
    "\177\0\1\u01b8\5\0\1\u01b9\171\0\1\u01ba\156\0\1\141"+
    "\167\0\1\u01bb\165\0\1\u01bc\261\0\1\u01bd\165\0\1\u01be"+
    "\11\0\1\u01bf\2\0\1\u01c0\176\0\1\u01c1\1\u01c2\1\u01c3"+
    "\164\0\1\u01c4\21\0\1\u01c5\142\0\1\u01c6\163\0\1\13"+
    "\174\0\1\u01c7\265\0\1\u01c8\167\0\1\u01c9\4\0\1\u01ca"+
    "\3\0\1\u01cb\3\0\1\u01cc\157\0\1\u01cd\21\0\1\u01ce"+
    "\203\0\1\u01cf\157\0\1\u01d0\224\0\1\u01d1\163\0\1\u01d2"+
    "\2\0\1\u01d3\220\0\1\u01d4\162\0\1\u01d5\12\0\1\u01d6"+
    "\125\0\1\u01d7\243\0\1\u01a5\212\0\1\u01d8\13\0\1\u01d9"+
    "\171\0\1\u01da\144\0\1\u01db\243\0\1\u01dc\174\0\1\u01dd"+
    "\1\0\1\u01de\152\0\1\13\160\0\1\u01df\201\0\1\u01e0"+
    "\3\0\1\u01e1\255\0\1\u01e2\204\0\1\u01e3\202\0\1\u01e4"+
    "\157\0\1\u01e5\3\0\1\u01e6\3\0\1\u01e7\214\0\1\u01e8"+
    "\201\0\1\u01e9\121\0\1\u01c7\147\0\1\u01ea\275\0\1\u01eb"+
    "\205\0\1\u01ec\13\0\1\u01ed\2\0\1\u01ee\127\0\1\253"+
    "\176\0\1\u01ef\4\0\1\u01f0\233\0\1\u01f1\214\0\1\u01f2"+
    "\204\0\1\u01f3\4\0\1\u01f4\143\0\1\u01f5\225\0\1\u01f6"+
    "\137\0\1\u01f7\4\0\1\u01f8\202\0\1\u01f9\14\0\1\u01fa"+
    "\162\0\1\u01fb\243\0\1\u01fc\6\0\1\u01fd\5\0\1\u01fe"+
    "\162\0\1\u01ff\11\0\1\u0200\170\0\1\u0201\166\0\1\u01e0"+
    "\240\0\1\u0202\176\0\1\u0203\123\0\1\u0204\244\0\1\u0205"+
    "\202\0\1\u0206\176\0\1\u0207\225\0\1\u0208\142\0\1\u0209"+
    "\204\0\1\141\236\0\1\u020a\1\u020b\1\0\1\u020c\166\0"+
    "\1\13\174\0\1\u01df\216\0\1\u020d\11\0\1\u020e\175\0"+
    "\1\u020f\172\0\1\u0210\177\0\1\u0211\5\0\1\u0212\105\0"+
    "\1\u0213\302\0\1\276\174\0\1\327\167\0\1\u0214\7\0"+
    "\1\u0215\153\0\1\u0216\166\0\1\u0217\205\0\1\u0218\235\0"+
    "\1\u0219\177\0\1\u021a\1\0\1\u021b\1\u0217\2\0\1\u021c"+
    "\10\0\1\u021d\3\0\1\u021e\141\0\1\u021f\162\0\1\u0220"+
    "\240\0\1\u0221\7\0\1\u01d3\205\0\1\u0222\1\0\1\u0223"+
    "\2\0\1\u0224\2\0\1\u0225\157\0\1\u0226\210\0\1\u0227"+
    "\5\0\1\u0228\1\276\206\0\1\u0229\177\0\1\u022a\2\0"+
    "\1\u022b\200\0\1\13\42\0\2\13\104\0\1\u022c\232\0"+
    "\1\u022d\202\0\1\u022e\200\0\1\u022f\216\0\1\u0230\157\0"+
    "\1\u0231\3\0\1\u0232\206\0\1\u0233\166\0\1\u0234\7\0"+
    "\1\u0235\172\0\1\u0236\225\0\1\u0237\100\0\1\u0238\1\0"+
    "\1\u015d\16\0\1\u0239\21\0\1\u015f\16\0\1\u023a\53\0"+
    "\1\u015d\44\0\1\u023b\302\0\1\u023c\102\0\1\u0238\42\0"+
    "\1\u015f\137\0\1\u023b\42\0\1\u015f\170\0\1\u023d\240\0"+
    "\1\u023e\173\0\1\u01d3\211\0\1\u023f\172\0\1\u0240\206\0"+
    "\1\u0241\200\0\1\u0242\253\0\1\u0243\104\0\1\u0244\240\0"+
    "\1\u0245\154\0\1\u0246\233\0\1\u0247\170\0\1\u0248\217\0"+
    "\1\u0249\176\0\1\u024a\200\0\1\u024b\5\0\1\u024c\205\0"+
    "\1\u024d\176\0\1\u024e\2\0\1\u024f\173\0\1\360\4\0"+
    "\1\u0250\1\362\175\0\1\u0251\201\0\1\360\4\0\1\375"+
    "\1\376\174\0\1\360\5\0\1\376\176\0\1\u0252\173\0"+
    "\1\u0253\107\0\1\u0254\202\0\1\u0255\302\0\1\360\5\0"+
    "\1\362\146\0\1\u0256\6\0\1\u0257\202\0\1\u0257\162\0"+
    "\1\u0258\17\0\1\u0257\153\0\1\u0259\26\0\1\u0257\170\0"+
    "\1\u025a\11\0\1\u0257\147\0\1\u025b\41\0\1\u025c\123\0"+
    "\1\u012b\1\0\1\u012b\132\0\1\u012b\1\0\1\u012b\114\0"+
    "\1\u025d\5\0\1\u025e\163\0\1\u025f\22\0\1\u0260\16\0"+
    "\1\u0261\1\u012b\167\0\1\u0262\174\0\1\u0263\200\0\1\u012b"+
    "\172\0\1\13\23\0\1\u0264\161\0\1\u0265\177\0\1\136"+
    "\223\0\1\u0266\164\0\1\u0267\7\0\1\u0268\115\0\1\u025c"+
    "\1\0\2\u012b\46\0\1\13\202\0\1\13\11\0\1\u0269"+
    "\33\0\1\u012b\134\0\1\13\1\u025d\5\0\1\u026a\173\0"+
    "\1\13\12\0\1\u026b\167\0\1\13\224\0\1\u026c\110\0"+
    "\3\u012b\57\0\1\u0269\120\0\3\u012b\57\0\1\u026d\142\0"+
    "\1\u012b\30\0\5\u012b\111\0\1\13\5\0\1\u026e\4\0"+
    "\2\13\5\0\1\13\27\0\1\13\30\0\1\13\2\0"+
    "\1\13\5\0\1\13\154\0\1\u026f\223\0\1\u0158\176\0"+
    "\1\u0270\203\0\1\u0271\171\0\1\u0272\176\0\1\u0273\210\0"+
    "\1\u0274\172\0\1\u0274\210\0\1\u0275\207\0\1\u0158\212\0"+
    "\1\u0276\174\0\1\u0277\200\0\1\u0278\173\0\1\u0279\3\0"+
    "\1\u027a\207\0\1\u027b\4\0\1\u027c\176\0\1\u027d\165\0"+
    "\1\u027e\12\0\1\u027f\216\0\1\u0280\155\0\1\u0158\212\0"+
    "\1\u013b\7\0\1\u0158\173\0\1\u0158\211\0\1\u01b9\2\0"+
    "\1\u0281\176\0\1\u0282\160\0\1\u0283\221\0\1\u0154\163\0"+
    "\1\u0284\7\0\1\u0285\172\0\1\u0286\154\0\1\u018f\244\0"+
    "\1\u0287\204\0\1\u0288\4\0\1\u0289\163\0\1\u028a\202\0"+
    "\1\u028b\176\0\1\u028c\166\0\1\u028d\36\0\1\u028e\1\0"+
    "\1\u028f\176\0\1\u0158\125\0\1\u0290\252\0\1\u0291\203\0"+
    "\1\u0292\173\0\1\u0293\17\0\1\u0294\177\0\1\u0295\3\0"+
    "\1\u0296\153\0\1\u0285\2\0\1\u0297\214\0\1\u0296\170\0"+
    "\1\13\203\0\1\u0298\221\0\1\u0299\200\0\1\u029a\1\0"+
    "\1\u0158\204\0\1\u0158\155\0\1\u029b\206\0\1\u029c\214\0"+
    "\1\u029d\174\0\1\u029e\200\0\1\u029f\7\0\1\u0143\177\0"+
    "\1\u02a0\204\0\1\u02a1\163\0\1\u02a2\1\0\1\u013a\4\0"+
    "\1\u0158\6\0\1\u02a3\204\0\1\13\210\0\1\u02a4\1\0"+
    "\1\u02a5\160\0\1\u01a5\174\0\1\u02a6\224\0\1\u0158\2\0"+
    "\1\u02a7\157\0\1\u02a8\210\0\1\u02a9\6\0\1\u027c\165\0"+
    "\1\u02aa\215\0\1\u02ab\210\0\1\u02ac\2\0\1\u02ad\156\0"+
    "\1\u02ae\2\0\1\u02af\200\0\1\u0158\12\0\1\u0158\203\0"+
    "\1\u027c\6\0\1\13\162\0\1\u02b0\212\0\1\u02b1\152\0"+
    "\1\u02b2\232\0\1\u02b3\203\0\1\u02b4\60\0\2\u02b4\103\0"+
    "\1\u02b5\16\0\1\u0294\125\0\1\u02b6\261\0\1\u02b7\161\0"+
    "\1\u02b8\202\0\1\u02b9\220\0\1\u02ba\141\0\1\u02bb\153\0"+
    "\1\13\133\0\2\13\44\0\6\u02bc\174\0\1\u02bd\6\u02be"+
    "\2\u02bd\173\0\6\u02bf\173\0\1\221\221\0\32\u02c0\27\0"+
    "\1\u02c1\23\0\1\u02c0\57\0\11\166\256\0\1\u02c2\173\0"+
    "\1\u0242\216\0\1\u02ac\206\0\1\u0285\157\0\1\u02c3\31\0"+
    "\1\13\5\0\1\13\142\0\1\u02c3\37\0\1\13\72\0"+
    "\1\u0194\175\0\1\u0104\26\0\1\u02c4\31\0\1\245\14\0"+
    "\1\245\204\0\1\u01a7\50\0\1\u02c5\33\0\1\u02c6\133\0"+
    "\1\u02c7\126\0\1\u02c8\220\0\1\u02c9\66\0\1\u02ca\316\0"+
    "\1\u02cb\207\0\1\u02cc\100\0\11\u02cd\100\0\1\u02ce\166\0"+
    "\1\u02cf\161\0\1\u02d0\202\0\1\u02d1\166\0\1\13\220\0"+
    "\1\13\205\0\1\u0158\135\0\1\u02d2\242\0\1\u01a4\215\0"+
    "\1\u02d3\171\0\1\u02d4\203\0\1\u02d5\202\0\1\u02d6\166\0"+
    "\1\u02d7\173\0\1\13\231\0\1\u02d8\107\0\1\13\17\0"+
    "\1\u02d9\7\0\1\u02da\14\0\1\u02db\243\0\1\u02dc\124\0"+
    "\1\u02dd\204\0\1\u0217\224\0\1\u02de\224\0\1\u02df\172\0"+
    "\1\u02e0\204\0\1\u0217\201\0\1\u02e1\216\0\1\u02e2\211\0"+
    "\1\u02e3\141\0\1\u02e4\201\0\1\u02e5\220\0\1\u02e6\200\0"+
    "\1\u02e7\204\0\1\u02e8\142\0\1\u02e9\2\0\1\u02ea\3\0"+
    "\1\u02eb\3\0\1\u02ec\7\0\1\u02ed\232\0\1\u02ee\206\0"+
    "\1\u02ef\211\0\1\u01c5\162\0\1\u02f0\77\0\1\u0184\251\0"+
    "\1\u01fb\142\0\1\u02f1\300\0\1\u02f2\211\0\1\u02f3\150\0"+
    "\1\u02f4\33\0\1\u02f5\163\0\1\u02f6\202\0\1\u02f7\204\0"+
    "\1\u02f8\213\0\1\u02f9\104\0\1\u02fa\307\0\1\u02fb\160\0"+
    "\1\u02fc\136\0\1\u017b\130\0\1\u017b\113\0\1\u02fd\163\0"+
    "\1\u01f5\35\0\1\u02fe\125\0\1\u02ff\251\0\1\u01c7\74\0"+
    "\1\u01d3\275\0\1\u0300\207\0\1\u0301\7\0\1\u01d9\101\0"+
    "\1\u0302\301\0\1\u0303\171\0\1\u01d3\124\0\11\13\240\0"+
    "\1\u0217\156\0\1\u02de\23\0\1\u0217\211\0\1\u0304\115\0"+
    "\1\u02f1\27\0\1\u0305\254\0\1\u0306\203\0\1\u0307\10\0"+
    "\1\u0217\156\0\1\u02e3\23\0\1\u0217\155\0\1\u0308\222\0"+
    "\1\u0309\167\0\1\u030a\200\0\1\u030b\213\0\1\u030c\207\0"+
    "\1\u030d\162\0\1\u030e\153\0\1\u030f\210\0\1\u0310\223\0"+
    "\1\u0311\103\0\1\u0312\260\0\1\u0313\20\0\1\u01c7\221\0"+
    "\1\u0314\163\0\1\u0315\206\0\1\u0316\205\0\1\u0317\210\0"+
    "\1\u0318\127\0\1\u0319\205\0\1\u031a\201\0\1\u01f0\236\0"+
    "\1\u031b\222\0\1\u031c\177\0\1\u031d\102\0\1\u031e\26\0"+
    "\1\u01f8\256\0\1\u01c7\121\0\1\u031f\267\0\1\u0217\166\0"+
    "\1\u0320\145\0\1\u0321\231\0\1\u0276\211\0\1\u0322\202\0"+
    "\1\u0323\204\0\1\u0324\212\0\2\u0158\152\0\1\u0325\225\0"+
    "\1\u0326\201\0\1\u0327\203\0\1\u0328\143\0\1\u0329\215\0"+
    "\1\u032a\203\0\1\u032b\217\0\1\u032c\201\0\1\u032d\132\0"+
    "\1\u032e\13\0\1\u032f\225\0\1\276\15\0\1\u0330\163\0"+
    "\1\u0331\20\0\1\u0332\200\0\1\u0158\1\0\1\u0333\23\0"+
    "\1\u0158\104\0\1\253\241\0\1\u0334\205\0\1\13\167\0"+
    "\1\u0335\22\0\1\u0336\125\0\1\u0337\240\0\1\u0338\222\0"+
    "\1\u0339\72\0\1\u033a\253\0\1\u033b\240\0\1\u033c\163\0"+
    "\1\u033d\201\0\1\u01c7\223\0\1\u033e\144\0\1\u033f\217\0"+
    "\1\u0340\213\0\1\u0341\212\0\1\u0342\201\0\1\u0343\176\0"+
    "\1\u01d3\1\0\1\u0344\105\0\11\u0345\53\0\1\u0346\176\0"+
    "\1\u0347\221\0\1\u0348\165\0\1\u0349\146\0\1\u034a\11\0"+
    "\1\u015f\241\0\1\u034b\174\0\1\u034c\167\0\1\u034d\12\0"+
    "\1\13\171\0\1\u01d3\225\0\1\141\170\0\1\141\167\0"+
    "\1\u034e\204\0\1\u034f\123\0\1\141\134\0\1\141\141\0"+
    "\1\210\177\0\1\u0350\246\0\1\141\143\0\1\u0351\144\0"+
    "\1\u01b3\240\0\1\u02c9\172\0\1\u0352\7\0\1\u01b7\161\0"+
    "\1\u0353\222\0\1\141\173\0\1\141\144\0\1\u0354\240\0"+
    "\1\u0355\173\0\1\u0356\225\0\1\u01d3\155\0\1\u0357\200\0"+
    "\1\u0358\225\0\1\u0359\175\0\1\u035a\170\0\1\u035b\176\0"+
    "\1\u035c\226\0\1\u035d\156\0\1\u035e\212\0\1\u035f\156\0"+
    "\1\u015f\232\0\1\u0360\172\0\1\u0361\213\0\1\u0362\60\0"+
    "\2\u0363\120\0\1\u0363\60\0\2\u0363\70\0\1\u0364\157\0"+
    "\1\u0365\204\0\1\u012b\200\0\1\u0366\225\0\1\u0367\220\0"+
    "\1\u012b\125\0\1\u012b\262\0\1\u0368\136\0\1\u0369\246\0"+
    "\1\u036a\121\0\2\u012b\46\0\1\13\21\0\1\u012b\106\0"+
    "\1\u025c\267\0\1\u036b\213\0\1\u036c\163\0\1\u036d\226\0"+
    "\1\u036e\203\0\1\u036f\170\0\1\u036f\165\0\1\u0370\204\0"+
    "\1\u0371\206\0\1\u0372\213\0\1\u036e\163\0\1\u0373\127\0"+
    "\1\13\265\0\1\13\64\0\1\13\127\0\1\u0374\167\0"+
    "\1\u0276\206\0\1\u0375\171\0\1\u0133\17\0\1\u0137\1\u0138"+
    "\174\0\1\u0374\201\0\1\u0376\166\0\1\13\220\0\1\u0377"+
    "\167\0\1\u0378\201\0\1\u0379\176\0\1\u037a\37\0\1\u0194"+
    "\155\0\1\u0158\105\0\1\u0195\61\0\1\u037b\10\0\1\u037c"+
    "\50\0\1\u037d\144\0\1\u037e\164\0\1\u037f\162\0\1\u0380"+
    "\176\0\1\u0381\237\0\1\u0382\175\0\1\u0383\205\0\1\u0384"+
    "\216\0\1\u0158\170\0\1\u0158\206\0\1\u02ac\175\0\1\u0276"+
    "\202\0\1\u0385\133\0\1\u0386\6\0\1\u0387\10\0\1\u0388"+
    "\221\0\1\u0389\213\0\1\u038a\173\0\1\u0158\217\0\1\u038b"+
    "\73\0\1\u0195\67\0\1\u038c\141\0\1\u038d\13\0\1\u038e"+
    "\5\0\1\u0384\16\0\1\u038f\211\0\1\u0390\170\0\1\u0391"+
    "\207\0\1\u0392\110\0\1\u0195\26\0\1\u0393\243\0\1\u0394"+
    "\205\0\1\u0395\107\0\1\u0195\54\0\2\13\220\0\1\u0396"+
    "\213\0\1\u0397\161\0\1\u0398\216\0\1\u0399\211\0\1\u039a"+
    "\161\0\1\u039b\223\0\1\u039c\201\0\1\u039d\174\0\1\13"+
    "\107\0\1\u039e\264\0\1\u039f\222\0\1\u03a0\23\0\1\u026f"+
    "\133\0\1\u03a1\217\0\1\u0143\104\0\1\u0158\44\0\1\u03a2"+
    "\265\0\1\u03a3\100\0\1\u03a4\17\0\1\u03a5\236\0\1\u03a6"+
    "\175\0\1\u03a7\201\0\1\u03a8\214\0\1\u0375\200\0\1\u0158"+
    "\157\0\1\u03a9\223\0\1\u03aa\126\0\1\u03ab\260\0\1\u03ac"+
    "\163\0\1\u03ad\221\0\1\u03ae\156\0\1\u03af\120\0\1\13"+
    "\1\0\1\u03b0\1\0\1\u03b1\34\0\1\u03b2\245\0\1\u03b3"+
    "\210\0\1\u03b4\163\0\1\u03b5\215\0\1\u03b6\200\0\1\u03b7"+
    "\177\0\1\u02d4\174\0\1\u03b8\157\0\1\u03b9\251\0\1\u0102"+
    "\133\0\1\u03b9\46\0\1\u0102\202\0\1\u016e\110\0\32\u03ba"+
    "\27\0\1\u03bb\23\0\1\u03ba\142\0\1\u03bc\215\0\1\u02ac"+
    "\106\0\1\13\234\0\1\u03bd\313\0\1\u02d2\114\0\1\u03be"+
    "\202\0\1\u03bf\104\0\1\u03c0\202\0\1\13\202\0\1\u03c1"+
    "\211\0\1\u0195\2\0\1\u0158\207\0\11\u02cd\264\0\1\u03c2"+
    "\205\0\1\u03c3\175\0\1\u03c4\133\0\1\13\235\0\1\u0394"+
    "\225\0\1\13\115\0\1\u03c5\202\0\1\u03c6\206\0\1\u0384"+
    "\250\0\1\u03c7\122\0\1\u03c8\270\0\1\u03c9\205\0\1\u03ca"+
    "\141\0\1\u03cb\176\0\1\u0217\205\0\1\u0217\231\0\1\u03cc"+
    "\206\0\1\u0217\174\0\1\u03cd\211\0\1\u02ba\204\0\1\u0217"+
    "\133\0\1\u03ce\220\0\1\u03cf\231\0\1\u03d0\210\0\1\u03d1"+
    "\173\0\1\u02fe\203\0\1\u03d2\210\0\1\u03d3\177\0\1\357"+
    "\174\0\1\u0347\172\0\1\u03d4\206\0\1\u03d5\201\0\1\u03d6"+
    "\201\0\1\u03d7\150\0\1\u01f8\236\0\1\u0233\176\0\1\u03d8"+
    "\202\0\1\122\217\0\1\u03d9\167\0\1\u03da\215\0\1\u03db"+
    "\72\0\1\u01d3\42\0\1\u03dc\14\0\1\u03dd\202\0\1\u03de"+
    "\164\0\1\u01d9\2\0\1\u03df\205\0\1\u03e0\46\0\1\u03e1"+
    "\136\0\1\u03e2\143\0\1\u03e3\304\0\1\u01d3\164\0\1\u01d9"+
    "\161\0\1\u03e4\216\0\1\u03e5\202\0\1\u03e6\107\0\1\u03e7"+
    "\304\0\1\u03e8\140\0\1\u03e9\7\0\1\u03ea\2\0\1\u03eb"+
    "\240\0\1\u03ec\215\0\1\u03ed\155\0\1\u01df\213\0\1\u03ee"+
    "\210\0\1\u01d9\200\0\1\u03ef\147\0\1\u01b3\156\0\1\u01e0"+
    "\3\0\1\u01e0\247\0\1\u03d6\173\0\1\u03f0\136\0\1\u03f1"+
    "\130\0\1\u03f1\117\0\1\u02c9\216\0\1\u03f2\204\0\1\u01b7"+
    "\156\0\1\u0202\3\0\1\u0202\155\0\1\u03f3\204\0\1\u03f4"+
    "\236\0\1\u03f5\165\0\1\u03f6\142\0\1\u03f7\130\0\1\u03f7"+
    "\67\0\1\u03f8\242\0\1\u03f9\145\0\1\u03fa\16\0\1\u0342"+
    "\152\0\1\u01b3\207\0\1\u03fb\233\0\1\u01b7\220\0\1\u03fc"+
    "\172\0\1\u01d3\172\0\1\u03fd\202\0\1\u01d9\123\0\3\u01c7"+
    "\34\0\1\u03fe\35\0\1\250\174\0\1\u03ff\131\0\1\u0400"+
    "\2\0\1\u0401\255\0\1\u0402\204\0\1\u0403\176\0\1\u030d"+
    "\172\0\1\u0404\200\0\1\u0405\7\0\1\u01c7\210\0\1\u0406"+
    "\171\0\1\u0407\75\0\1\u0408\304\0\1\u0409\173\0\1\u040a"+
    "\215\0\1\u040b\137\0\1\u040c\214\0\1\13\220\0\1\u040d"+
    "\223\0\1\u040a\176\0\1\u040e\60\0\2\u040e\73\0\1\u040f"+
    "\235\0\1\u0294\161\0\1\u0410\204\0\1\u0411\215\0\1\u0412"+
    "\167\0\1\u0413\176\0\1\u0414\215\0\1\u01d3\131\0\1\u01c7"+
    "\2\0\1\u01c7\241\0\1\u0415\213\0\1\u0416\207\0\1\u023e"+
    "\164\0\1\u0417\202\0\1\u0418\213\0\1\u0419\101\0\1\u02f1"+
    "\27\0\1\u041a\250\0\1\u01d3\174\0\1\u041b\215\0\1\141"+
    "\70\0\1\u041c\305\0\1\u041d\176\0\1\u041e\221\0\1\141"+
    "\137\0\1\u041f\240\0\1\u0420\206\0\1\u0410\170\0\1\u0421"+
    "\174\0\1\u0422\204\0\1\u0423\221\0\1\u0424\204\0\1\u0425"+
    "\160\0\1\u0426\177\0\1\u0427\217\0\1\u0428\173\0\1\u01d3"+
    "\101\0\1\u0429\41\0\1\u042a\13\0\1\u042b\1\u042c\241\0"+
    "\1\u042d\135\0\1\u03b2\35\0\1\u03b2\144\0\1\u03b2\204\0"+
    "\1\u012b\206\0\1\u042e\162\0\1\u042f\207\0\1\u0430\177\0"+
    "\1\u0431\221\0\1\u0432\231\0\1\u0433\164\0\1\u025d\222\0"+
    "\1\u0434\207\0\1\u036c\163\0\1\u0435\167\0\2\u012b\233\0"+
    "\1\u0436\203\0\1\u0437\172\0\1\u0438\211\0\1\u012b\73\0"+
    "\1\u0195\72\0\1\u0158\177\0\1\u0158\202\0\1\u018f\212\0"+
    "\1\u0439\171\0\1\u043a\20\0\1\u043b\170\0\1\u043c\116\0"+
    "\1\u043d\175\0\1\u043e\175\0\1\u0195\61\0\1\u037b\61\0"+
    "\1\u037d\162\0\1\u0158\164\0\1\u01b9\201\0\1\u043f\205\0"+
    "\1\u0145\163\0\1\u0440\175\0\1\u02b5\215\0\1\u0441\103\0"+
    "\1\13\272\0\1\u0442\176\0\1\u0443\22\0\1\u0444\163\0"+
    "\1\u0445\206\0\1\u0446\3\0\1\u0444\200\0\1\u0447\213\0"+
    "\1\u0448\200\0\1\u0449\167\0\1\u044a\204\0\1\u044b\210\0"+
    "\1\u044c\205\0\1\u044d\177\0\1\u044e\167\0\1\u0276\222\0"+
    "\1\u044f\121\0\1\u0450\261\0\1\13\200\0\1\u0451\163\0"+
    "\1\u0285\212\0\1\u0161\213\0\1\u0353\161\0\1\u0452\264\0"+
    "\2\13\123\0\1\u0453\200\0\1\u0454\1\u02ba\16\0\1\u0455"+
    "\1\u0456\201\0\1\u0457\145\0\1\u0458\160\0\1\u0459\6\0"+
    "\1\u045a\3\0\1\u0158\1\u038e\232\0\1\u045b\203\0\1\u045c"+
    "\220\0\1\u045d\251\0\1\13\105\0\1\u045e\22\0\1\u045f"+
    "\167\0\1\u0460\3\0\1\u045f\205\0\1\u0461\163\0\1\u0462"+
    "\215\0\1\u0463\210\0\1\u0464\204\0\1\u0465\163\0\1\u0161"+
    "\176\0\1\u0466\146\0\1\u0467\257\0\1\u0468\130\0\1\u0469"+
    "\2\0\1\u046a\4\0\1\13\1\0\1\u046b\116\0\1\13"+
    "\27\0\1\u046c\202\0\2\u046c\264\0\1\u046d\213\0\1\u046e"+
    "\165\0\1\u046f\176\0\1\u0470\214\0\1\13\205\0\1\u0471"+
    "\221\0\1\u0243\110\0\32\u0472\27\0\1\u0473\23\0\1\u0472"+
    "\142\0\1\u0474\177\0\1\u0475\145\0\1\u0476\325\0\1\u0477"+
    "\202\0\1\u0478\127\0\1\u0479\70\0\1\u047a\314\0\1\u047b"+
    "\123\0\1\u047c\202\0\1\u047d\267\0\1\u047e\121\0\1\u047f"+
    "\252\0\1\u0480\174\0\1\u029f\201\0\1\u0481\7\0\1\u0482"+
    "\206\0\1\u0483\202\0\1\u0484\144\0\1\13\171\0\1\231"+
    "\234\0\1\u01c7\103\0\1\u0485\310\0\1\u0486\167\0\1\u0487"+
    "\203\0\1\u0488\203\0\1\u0489\160\0\1\u03eb\205\0\1\u048a"+
    "\240\0\1\u01d9\164\0\1\u048b\222\0\1\u048c\175\0\1\u048d"+
    "\205\0\1\u048e\161\0\1\u048f\211\0\1\u0490\210\0\1\u0491"+
    "\175\0\1\u0492\215\0\1\u0493\164\0\1\u0494\7\0\1\13"+
    "\127\0\1\u0495\242\0\1\u0496\206\0\1\u0497\207\0\1\u0498"+
    "\133\0\1\u041a\17\0\1\u0499\234\0\1\u030d\174\0\1\u049a"+
    "\177\0\1\u0481\7\0\1\u01d3\173\0\1\u049b\212\0\1\u049c"+
    "\207\0\1\u048b\202\0\1\u049d\165\0\1\u049e\210\0\1\u049f"+
    "\211\0\1\u04a0\144\0\1\u04a1\200\0\1\u04a2\242\0\1\u04a3"+
    "\172\0\1\u04a4\202\0\1\u04a5\173\0\1\u04a6\225\0\1\u01b9"+
    "\174\0\1\u04a7\171\0\1\u04a8\215\0\1\u01c7\64\0\1\u04a9"+
    "\320\0\1\u04aa\172\0\1\u04ab\175\0\1\u04ac\211\0\1\u015d"+
    "\165\0\1\u04ad\207\0\1\u01c7\160\0\1\u048a\24\0\1\u04ae"+
    "\153\0\1\u04af\167\0\1\u04b0\240\0\1\u04b1\213\0\1\u01d3"+
    "\200\0\1\u0415\133\0\1\u01d3\261\0\1\u04b2\74\0\1\13"+
    "\1\0\1\u03b1\235\0\1\u04b3\253\0\1\u0384\174\0\1\u04b4"+
    "\133\0\1\u04b5\150\0\1\u02f1\32\0\1\u0384\7\0\1\u04b6"+
    "\17\0\1\u0410\2\0\1\u04b7\47\0\1\u04b8\20\0\1\u0384"+
    "\5\0\1\u0384\15\0\1\13\35\0\1\u018f\6\0\1\u0190"+
    "\171\0\1\u04b9\10\0\1\u04ba\227\0\1\u04bb\215\0\1\u04bc"+
    "\176\0\1\u03fc\204\0\1\u04bd\201\0\1\u04be\150\0\1\362"+
    "\162\0\1\u04bf\240\0\1\u04c0\105\0\1\u04c1\265\0\1\u0217"+
    "\240\0\1\u0217\170\0\1\u04c2\113\0\1\u04c3\263\0\1\u04c4"+
    "\12\0\1\u04bc\145\0\1\u03fe\226\0\1\u04c5\213\0\1\u04c6"+
    "\202\0\1\u0233\164\0\1\u04c7\151\0\1\u040a\5\0\1\u04c8"+
    "\232\0\1\u02d4\174\0\1\u0342\223\0\1\u04c9\157\0\1\u0115"+
    "\166\0\1\u04ca\137\0\1\u04cb\53\0\1\13\166\0\1\u04cc"+
    "\203\0\1\u012b\210\0\1\u04cd\212\0\1\u04ce\223\0\1\u04cf"+
    "\202\0\1\u012b\106\0\2\u012b\46\0\1\13\226\0\1\u04d0"+
    "\161\0\1\u04d1\220\0\1\u04d2\203\0\1\u0382\150\0\1\u04d3"+
    "\142\0\1\u0158\273\0\1\u04d4\154\0\1\u04d5\230\0\1\u04ac"+
    "\207\0\1\u0439\202\0\1\u0471\126\0\1\u04d6\14\0\1\u04d7"+
    "\246\0\1\u04d8\166\0\1\u0471\165\0\1\u04d9\213\0\1\u04da"+
    "\202\0\1\u04db\213\0\1\u04dc\176\0\1\u04dd\206\0\1\u0145"+
    "\204\0\1\u04de\161\0\1\u04df\207\0\1\u0158\157\0\1\u04e0"+
    "\237\0\1\u04e1\174\0\1\u0439\157\0\1\u04e2\35\0\1\u04e2"+
    "\175\0\1\u04e3\201\0\1\u04e4\172\0\1\u04e5\210\0\1\u04e6"+
    "\170\0\1\u02c2\206\0\1\u0285\207\0\1\u04e7\171\0\1\u04e8"+
    "\213\0\1\u04e9\165\0\1\u04ea\225\0\1\u04eb\126\0\1\u04ec"+
    "\247\0\1\u04eb\210\0\1\13\207\0\2\u04ed\76\0\1\13"+
    "\1\u04ee\7\13\20\0\1\13\7\0\1\13\221\0\1\u04ef"+
    "\163\0\1\u04f0\173\0\1\360\43\0\1\362\175\0\1\u04f1"+
    "\175\0\1\u04f2\161\0\1\13\124\0\1\13\260\0\1\13"+
    "\24\0\1\u02d4\103\0\1\13\302\0\1\u04f3\203\0\1\u04f4"+
    "\206\0\1\u01d3\175\0\1\u04f5\171\0\1\13\140\0\32\u04f6"+
    "\27\0\1\u04f7\23\0\1\u04f6\142\0\1\u04f8\177\0\1\u04f9"+
    "\221\0\1\u04fa\100\0\1\u0104\352\0\1\u047c\202\0\1\u047d"+
    "\104\0\1\u04fb\173\0\1\u04fc\165\0\1\351\15\0\1\u04fd"+
    "\5\0\1\u04fb\77\0\1\351\5\0\1\351\67\0\1\u04fe"+
    "\202\0\1\u04ff\220\0\1\u02c9\144\0\1\u0500\12\0\1\u02db"+
    "\240\0\1\u0384\170\0\1\u01d3\213\0\1\u0501\130\0\1\u0502"+
    "\204\0\1\u0503\211\0\1\u0504\253\0\1\u01d3\167\0\1\u0471"+
    "\212\0\1\u0505\163\0\1\u0506\140\0\1\u0507\202\0\1\u0508"+
    "\262\0\1\u0509\160\0\1\u050a\203\0\1\u050b\211\0\1\u0232"+
    "\217\0\1\u01d9\156\0\1\u02c9\205\0\1\u050c\203\0\1\13"+
    "\156\0\1\u050d\242\0\1\u050e\165\0\1\u050f\200\0\1\u0384"+
    "\223\0\1\u0510\174\0\1\u047e\206\0\1\u0511\176\0\1\u0512"+
    "\72\0\1\u0513\211\0\1\u0514\50\0\1\u04fd\215\0\1\u0515"+
    "\212\0\1\u0516\134\0\1\u0217\212\0\1\u0517\230\0\1\u0217"+
    "\123\0\1\u0518\271\0\1\u0519\175\0\1\u02c9\215\0\1\u051a"+
    "\165\0\1\u0384\156\0\1\u051b\225\0\1\u0398\3\0\1\u034f"+
    "\221\0\1\u02c3\174\0\1\13\202\0\1\u051c\200\0\1\u051d"+
    "\202\0\1\u051e\172\0\1\u051f\222\0\1\u0520\64\0\1\u0521"+
    "\270\0\1\u0522\232\0\1\u0523\162\0\1\u0524\215\0\1\u0525"+
    "\173\0\1\u0526\171\0\1\u0527\37\0\1\u0384\111\0\1\u0528"+
    "\245\0\1\u0529\132\0\1\u052a\130\0\1\u052a\136\0\1\u052b"+
    "\201\0\1\u0353\171\0\1\u052c\202\0\1\u052d\167\0\1\u052e"+
    "\202\0\1\u0342\125\0\1\u052f\133\0\1\u052f\127\0\1\u0530"+
    "\214\0\1\u0531\164\0\1\u0532\202\0\1\u0533\226\0\1\u0300"+
    "\156\0\1\u0300\15\0\1\u01d3\136\0\1\u0259\172\0\1\u0534"+
    "\223\0\1\u0535\171\0\1\u0536\257\0\1\u0537\1\u0538\130\0"+
    "\1\u0539\5\0\1\u0539\16\0\1\u0121\221\0\1\u053a\207\0"+
    "\2\u012b\200\0\1\u0281\170\0\1\u053b\204\0\1\u02ac\176\0"+
    "\1\u0384\204\0\1\u02d4\211\0\1\u053b\176\0\1\321\206\0"+
    "\1\u053c\174\0\1\u028c\165\0\1\u021a\220\0\1\u053d\170\0"+
    "\1\u053e\210\0\1\u053f\136\0\1\u0384\244\0\1\u0540\202\0"+
    "\1\u0541\210\0\1\u0542\210\0\1\u0543\173\0\1\u0544\202\0"+
    "\1\u0439\210\0\1\u0545\202\0\1\u0546\162\0\1\u0547\216\0"+
    "\1\u0158\167\0\1\u0384\212\0\1\u0410\224\0\1\13\70\0"+
    "\1\13\275\0\1\u02e2\1\0\1\u0183\175\0\1\u0394\213\0"+
    "\1\u0384\172\0\1\u0548\102\0\1\141\313\0\1\13\156\0"+
    "\1\u0375\142\0\32\270\27\0\1\u0549\23\0\1\270\142\0"+
    "\1\u054a\177\0\1\u054b\221\0\1\u054c\157\0\1\u02c0\154\0"+
    "\1\u054d\12\0\1\u0246\240\0\1\u054e\131\0\1\u054f\12\0"+
    "\1\u022c\232\0\1\u0550\202\0\1\u0551\146\0\1\u02db\245\0"+
    "\1\u0552\174\0\1\u0553\201\0\1\u0554\175\0\1\u0555\176\0"+
    "\1\u0556\204\0\1\u01d9\216\0\1\u034d\1\0\1\u0557\200\0"+
    "\1\u0558\203\0\1\u0559\176\0\1\u055a\176\0\1\u0233\74\0"+
    "\1\u055b\256\0\1\u055c\225\0\1\u055d\142\0\1\u055e\266\0"+
    "\1\u055f\152\0\1\u029f\225\0\1\u04c0\123\0\1\u0560\10\0"+
    "\1\u0561\225\0\1\u0562\225\0\1\u0563\161\0\1\u02c9\157\0"+
    "\1\253\172\0\1\371\255\0\1\u03fc\161\0\1\u0564\211\0"+
    "\1\u0565\200\0\1\u03d0\200\0\1\u0566\214\0\1\u0567\174\0"+
    "\1\u0568\172\0\1\u0158\144\0\1\u0569\250\0\1\u04c2\202\0"+
    "\1\u056a\213\0\1\u053d\171\0\1\u04b8\120\0\1\u0384\217\0"+
    "\1\u01d9\241\0\1\u01d9\146\0\1\u056b\234\0\1\u056c\220\0"+
    "\1\u0563\170\0\1\u02d3\211\0\1\u01d9\114\0\1\u056d\4\13"+
    "\2\0\1\13\267\0\1\u01d3\205\0\1\u046f\173\0\1\u056e"+
    "\206\0\1\u0556\142\0\1\u056f\173\0\1\u0570\223\0\1\u0571"+
    "\204\0\1\13\1\u025d\31\0\1\u012b\147\0\1\13\1\u025d"+
    "\170\0\1\u012b\226\0\1\u0572\213\0\1\u0384\211\0\1\u0158"+
    "\166\0\1\u0384\171\0\1\u0573\157\0\1\u04ac\237\0\1\u0574"+
    "\207\0\1\u04eb\202\0\1\u0461\160\0\1\u0575\232\0\1\u0576"+
    "\66\0\1\u0195\42\0\1\u0577\223\0\1\u026f\206\0\1\u0154"+
    "\204\0\1\u0384\203\0\1\u0578\177\0\1\u0579\221\0\1\u057a"+
    "\157\0\1\u03ba\217\0\1\u0410\165\0\1\u057b\217\0\1\u023e"+
    "\110\0\1\u015d\336\0\1\u015d\140\0\1\u057c\200\0\1\u057d"+
    "\212\0\1\u057e\201\0\1\u057f\163\0\1\u01d3\222\0\1\u0580"+
    "\207\0\1\u0581\162\0\1\u0582\201\0\1\u01d3\154\0\1\u0583"+
    "\204\0\1\u0584\223\0\1\u040a\214\0\1\u0585\177\0\1\u04eb"+
    "\205\0\1\u0586\174\0\1\u0587\111\0\1\u0588\107\0\1\u0589"+
    "\174\0\1\u01c7\142\0\1\u02e2\236\0\1\u058a\207\0\1\u058b"+
    "\203\0\1\u058c\202\0\1\u058d\142\0\1\u058e\242\0\1\u057d"+
    "\177\0\1\u058f\175\0\1\u02c9\212\0\1\u026e\140\0\1\u0590"+
    "\200\0\1\u0591\165\0\1\u0592\265\0\1\u0593\161\0\1\u0594"+
    "\221\0\1\u0595\200\0\1\u0471\164\0\1\u02ba\215\0\1\u0596"+
    "\170\0\1\u0597\221\0\1\u0598\157\0\1\u0472\225\0\1\u0599"+
    "\162\0\1\u059a\215\0\1\u019b\205\0\1\u059b\204\0\1\u0461"+
    "\175\0\1\u01d3\200\0\1\u02fe\170\0\1\u02fe\221\0\1\u0309"+
    "\141\0\1\u059c\235\0\1\u059d\203\0\1\u059e\203\0\1\u059f"+
    "\166\0\1\u05a0\120\0\1\u05a1\267\0\1\u05a2\103\0\1\u05a3"+
    "\207\0\1\u05a4\306\0\1\u0394\131\0\1\u05a5\261\0\1\u0384"+
    "\141\0\1\u05a6\204\0\1\u012b\200\0\1\u05a7\223\0\1\u05a8"+
    "\216\0\1\u05a9\163\0\1\u05aa\164\0\1\u05ab\242\0\1\u05ac"+
    "\157\0\1\u04f6\224\0\1\u02c9\140\0\1\u05ad\232\0\1\u05ae"+
    "\163\0\1\13\224\0\1\203\203\0\1\u05af\172\0\1\u05b0"+
    "\225\0\1\u05b1\154\0\1\u05b1\106\0\1\u05b2\261\0\1\u05b3"+
    "\165\0\1\u05b4\140\0\1\u05b5\255\0\1\u05b6\167\0\1\u05b7"+
    "\252\0\1\u012b\211\0\1\u04dc\174\0\1\u05b8\170\0\1\u0480"+
    "\176\0\1\270\207\0\1\u0494\7\0\1\u02c9\171\0\1\u0461"+
    "\202\0\1\u05b9\103\0\1\u05ba\212\0\1\u02c9\230\0\1\u05bb"+
    "\243\0\1\u05bc\206\0\1\u05bd\152\0\1\u05be\213\0\1\u012b"+
    "\116\0\1\u05bf\324\0\1\13\170\0\1\u05c0\127\0\1\u05c1"+
    "\244\0\1\u05c2\221\0\1\u05c3\202\0\1\u05c4\126\0\1\u05c5"+
    "\7\0\1\13\203\0\1\u05c6\245\0\1\u05b0\160\0\1\u05c7"+
    "\214\0\1\u046e\212\0\1\u05c8\100\0\1\u021c\230\0\1\13"+
    "\202\0\1\u05c9\7\0\1\u012b\241\0\1\u05ca\174\0\1\u05cb"+
    "\141\0\1\u012b\260\0\1\u0471\172\0\1\u05cc\173\0\1\u05cd"+
    "\116\0\1\u05ce\133\0\1\13\46\0\1\165\157\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[186151];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\4\11\1\1\2\11"+
    "\6\1\1\11\1\1\1\11\12\1\1\11\20\1\1\11"+
    "\27\1\1\11\20\1\1\11\2\1\1\11\3\1\2\11"+
    "\1\1\1\11\1\1\1\0\1\11\2\1\4\0\1\11"+
    "\1\0\1\11\1\0\2\1\2\0\1\1\1\0\2\11"+
    "\72\0\1\11\57\0\1\1\31\0\1\11\1\1\137\0"+
    "\1\1\12\0\1\11\26\0\1\1\4\0\1\1\1\11"+
    "\5\0\2\1\1\0\1\1\1\11\2\0\2\11\24\0"+
    "\1\11\40\0\1\1\2\0\2\11\26\0\1\11\24\0"+
    "\1\1\27\0\1\11\14\0\1\1\36\0\1\11\23\0"+
    "\1\11\42\0\1\1\105\0\1\1\11\0\1\11\2\0"+
    "\1\1\43\0\1\11\12\0\1\11\2\0\1\1\2\0"+
    "\1\11\1\1\16\0\1\11\62\0\1\11\6\0\1\11"+
    "\115\0\1\1\4\0\1\1\32\0\1\1\5\0\2\11"+
    "\45\0\1\11\5\0\1\1\24\0\1\1\21\0\1\1"+
    "\6\0\1\1\106\0\1\1\3\0\1\1\13\0\1\1"+
    "\17\0\1\1\76\0\1\11\26\0\1\11\25\0\1\1"+
    "\7\0\1\1\52\0\1\11\255\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TIBasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }  // fall though
            case 1487: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 61: break;
          case 2:
            { return TIBasicTypes.CRLF;
            }
          // fall through
          case 62: break;
          case 3:
            { return TIBasicTypes.TOKEN;
            }
          // fall through
          case 63: break;
          case 4:
            { yybegin(STRING);
            }
          // fall through
          case 64: break;
          case 5:
            { return TIBasicTypes.LPAREN;
            }
          // fall through
          case 65: break;
          case 6:
            { return TIBasicTypes.RPAREN;
            }
          // fall through
          case 66: break;
          case 7:
            { return TIBasicTypes.TIMES;
            }
          // fall through
          case 67: break;
          case 8:
            { return TIBasicTypes.PLUS;
            }
          // fall through
          case 68: break;
          case 9:
            { return TIBasicTypes.COMMA;
            }
          // fall through
          case 69: break;
          case 10:
            { return TIBasicTypes.MINUS;
            }
          // fall through
          case 70: break;
          case 11:
            { return TIBasicTypes.DIVIDE;
            }
          // fall through
          case 71: break;
          case 12:
            { return TIBasicTypes.NUMBER;
            }
          // fall through
          case 72: break;
          case 13:
            { return TIBasicTypes.COLON;
            }
          // fall through
          case 73: break;
          case 14:
            { return TIBasicTypes.LT;
            }
          // fall through
          case 74: break;
          case 15:
            { return TIBasicTypes.EQ;
            }
          // fall through
          case 75: break;
          case 16:
            { return TIBasicTypes.GT;
            }
          // fall through
          case 76: break;
          case 17:
            { return TIBasicTypes.SIMPLE_VARIABLE;
            }
          // fall through
          case 77: break;
          case 18:
            { return TIBasicTypes.LBRACKET;
            }
          // fall through
          case 78: break;
          case 19:
            { return TIBasicTypes.RBRACKET;
            }
          // fall through
          case 79: break;
          case 20:
            { return TIBasicTypes.LCURLY;
            }
          // fall through
          case 80: break;
          case 21:
            { return TIBasicTypes.RCURLY;
            }
          // fall through
          case 81: break;
          case 22:
            { return TIBasicTypes.NEG;
            }
          // fall through
          case 82: break;
          case 23:
            { return TIBasicTypes.WINDOW_TOKENS;
            }
          // fall through
          case 83: break;
          case 24:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 25:
            { 
            }
          // fall through
          case 85: break;
          case 26:
            { yypushback(1); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 86: break;
          case 27:
            { yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 87: break;
          case 28:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 29:
            { return TIBasicTypes.NE;
            }
          // fall through
          case 89: break;
          case 30:
            { return TIBasicTypes.STO;
            }
          // fall through
          case 90: break;
          case 31:
            { return TIBasicTypes.COMMENT;
            }
          // fall through
          case 91: break;
          case 32:
            { return TIBasicTypes.LE;
            }
          // fall through
          case 92: break;
          case 33:
            { return TIBasicTypes.GE;
            }
          // fall through
          case 93: break;
          case 34:
            { return TIBasicTypes.LIST_VARIABLE;
            }
          // fall through
          case 94: break;
          case 35:
            { return TIBasicTypes.EQUATION_VARIABLE_1;
            }
          // fall through
          case 95: break;
          case 36:
            { return TIBasicTypes.EQUATION_VARIABLE_3;
            }
          // fall through
          case 96: break;
          case 37:
            { return TIBasicTypes.EQUATION_VARIABLE_4;
            }
          // fall through
          case 97: break;
          case 38:
            { return TIBasicTypes.EXPR_FUNCTIONS_WITH_ARGS;
            }
          // fall through
          case 98: break;
          case 39:
            { yypushback(2); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 99: break;
          case 40:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 100: break;
          case 41:
            { return TIBasicTypes.ANS_VARIABLE;
            }
          // fall through
          case 101: break;
          case 42:
            { return TIBasicTypes.COMMAND_NO_PARENS;
            }
          // fall through
          case 102: break;
          case 43:
            { return TIBasicTypes.END;
            }
          // fall through
          case 103: break;
          case 44:
            { return TIBasicTypes.IF;
            }
          // fall through
          case 104: break;
          case 45:
            { return TIBasicTypes.COLOR_VARIABLE;
            }
          // fall through
          case 105: break;
          case 46:
            { return TIBasicTypes.EQUATION_VARIABLE_2;
            }
          // fall through
          case 106: break;
          case 47:
            { return TIBasicTypes.MATRIX_VARIABLE;
            }
          // fall through
          case 107: break;
          case 48:
            { return TIBasicTypes.OR;
            }
          // fall through
          case 108: break;
          case 49:
            { return TIBasicTypes.COMMAND_WITH_PARENS;
            }
          // fall through
          case 109: break;
          case 50:
            { return TIBasicTypes.ELSE;
            }
          // fall through
          case 110: break;
          case 51:
            { return TIBasicTypes.FOR;
            }
          // fall through
          case 111: break;
          case 52:
            { return TIBasicTypes.LBL;
            }
          // fall through
          case 112: break;
          case 53:
            { return TIBasicTypes.STRING_VARIABLE;
            }
          // fall through
          case 113: break;
          case 54:
            { return TIBasicTypes.THEN;
            }
          // fall through
          case 114: break;
          case 55:
            { return TIBasicTypes.EXPR_FUNCTIONS_NO_ARGS;
            }
          // fall through
          case 115: break;
          case 56:
            { return TIBasicTypes.AND;
            }
          // fall through
          case 116: break;
          case 57:
            { return TIBasicTypes.XOR;
            }
          // fall through
          case 117: break;
          case 58:
            { return TIBasicTypes.GOTO;
            }
          // fall through
          case 118: break;
          case 59:
            { return TIBasicTypes.WHILE;
            }
          // fall through
          case 119: break;
          case 60:
            { return TIBasicTypes.REPEAT;
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
