// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TIBasic.flex

package nl.petertillema.tibasic.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import nl.petertillema.tibasic.psi.TIBasicTypes;


class TIBasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\31\u0100\1\u0400\1\u0500\1\u0100"+
    "\1\u0600\1\u0700\1\u0800\1\u0900\1\u0100\1\u0a00\5\u0100\1\u0b00"+
    "\322\u0100\1\u0c00\325\u0100\1\u0d00\1\u0e00\1\u0f00\41\u0100\1\u1000"+
    "\u0d8a\u0100\1\u1100\u017c\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\34"+
    "\1\36\1\11\1\37\1\40\1\41\1\42\1\11\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\0\1\76\1\77\1\100\1\14\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\6\0\1\3\33\0"+
    "\1\11\6\0\1\11\7\0\1\11\1\0\1\137\1\140"+
    "\1\11\2\0\1\11\1\0\1\141\5\0\4\11\1\0"+
    "\1\11\2\0\11\11\1\0\4\11\1\0\2\11\1\0"+
    "\4\11\2\0\4\11\1\0\1\11\2\0\11\11\1\0"+
    "\4\11\1\0\1\11\2\0\4\11\u0136\0\1\11\153\0"+
    "\1\11\23\0\1\11\25\0\1\142\31\0\1\143\36\0"+
    "\1\144\1\0\1\145\217\0\1\146\16\0\1\147\2\0"+
    "\1\11\2\0\1\11\7\0\5\11\2\0\1\150\2\0"+
    "\2\11\3\0\1\151\1\11\1\0\1\152\1\11\2\0"+
    "\1\153\123\0\1\154\44\0\1\11\43\0\1\11\362\0"+
    "\1\155\63\0\1\156\220\0\2\11\10\0\1\157\1\0"+
    "\2\3\32\0\1\160\66\0\1\161\4\0\1\162\1\163"+
    "\1\164\1\165\3\166\3\167\u0107\0\3\11\162\0\1\170"+
    "\23\0\1\171\5\0\1\11\12\0\1\11\336\0\1\11"+
    "\55\0\1\11\u0168\0\1\11\30\0\1\172\11\0\1\173"+
    "\125\0\1\11\u0147\0\1\11\242\0\1\174\114\0\1\175"+
    "\3\0\1\176\4\0\1\177\63\0\1\200\u0151\0\1\201"+
    "\223\0\1\202\311\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\11\u01ad\0\1\11\12\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4608];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\3\14\1\15"+
    "\1\16\1\17\1\20\31\21\1\22\1\23\25\3\1\24"+
    "\1\3\1\25\1\26\1\3\1\1\3\3\1\21\4\3"+
    "\2\1\3\3\1\14\1\3\1\1\1\27\1\1\2\30"+
    "\1\31\2\32\1\33\1\31\1\0\3\34\4\0\1\35"+
    "\2\0\1\14\1\36\2\0\1\14\1\0\1\37\1\40"+
    "\72\0\1\41\57\0\1\3\31\0\2\42\137\0\1\3"+
    "\12\0\1\43\26\0\1\3\4\0\1\3\1\44\5\0"+
    "\2\3\1\0\1\3\1\45\2\0\1\46\1\47\24\0"+
    "\1\50\40\0\1\51\2\0\1\52\1\51\26\0\1\53"+
    "\24\0\1\3\27\0\1\54\14\0\1\51\36\0\1\55"+
    "\23\0\1\56\42\0\1\3\105\0\1\41\11\0\1\57"+
    "\2\0\1\14\43\0\1\60\12\0\1\61\2\0\1\3"+
    "\2\0\1\62\1\51\16\0\1\63\62\0\1\64\6\0"+
    "\1\65\115\0\1\3\4\0\1\66\32\0\1\41\5\0"+
    "\1\67\1\70\45\0\1\71\5\0\1\51\24\0\1\51"+
    "\21\0\1\3\6\0\1\51\106\0\1\3\3\0\1\21"+
    "\13\0\1\41\17\0\1\51\76\0\1\72\26\0\1\66"+
    "\25\0\1\3\7\0\1\41\52\0\1\73\255\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\203\0\u0106\0\u0189\0\u020c\0\u0189\0\u028f\0\u0312"+
    "\0\u0395\0\u0189\0\u0189\0\u0189\0\u0189\0\u0418\0\u0189\0\u0189"+
    "\0\u049b\0\u051e\0\u05a1\0\u0624\0\u06a7\0\u072a\0\u0189\0\u07ad"+
    "\0\u0189\0\u0830\0\u08b3\0\u0936\0\u09b9\0\u0a3c\0\u0abf\0\u0b42"+
    "\0\u0bc5\0\u0c48\0\u0ccb\0\u0189\0\u0d4e\0\u0dd1\0\u0e54\0\u0ed7"+
    "\0\u0f5a\0\u0fdd\0\u1060\0\u10e3\0\u1166\0\u11e9\0\u126c\0\u12ef"+
    "\0\u1372\0\u13f5\0\u1478\0\u14fb\0\u0189\0\u157e\0\u1601\0\u1684"+
    "\0\u1707\0\u178a\0\u180d\0\u1890\0\u1913\0\u1996\0\u1a19\0\u1a9c"+
    "\0\u1b1f\0\u1ba2\0\u1c25\0\u1ca8\0\u1d2b\0\u1dae\0\u1e31\0\u1eb4"+
    "\0\u1f37\0\u1fba\0\u203d\0\u20c0\0\u0189\0\u2143\0\u21c6\0\u2249"+
    "\0\u22cc\0\u234f\0\u23d2\0\u2455\0\u24d8\0\u255b\0\u25de\0\u2661"+
    "\0\u26e4\0\u2767\0\u27ea\0\u286d\0\u28f0\0\u0189\0\u2973\0\u29f6"+
    "\0\u0189\0\u286d\0\u2a79\0\u2afc\0\u0189\0\u0189\0\u2b7f\0\u0189"+
    "\0\u2c02\0\u020c\0\u0189\0\u020c\0\u2c85\0\u2d08\0\u2d8b\0\u2e0e"+
    "\0\u2e91\0\u0189\0\u2f14\0\u2f97\0\u301a\0\u309d\0\u3120\0\u31a3"+
    "\0\u3226\0\u32a9\0\u0189\0\u0189\0\u332c\0\u33af\0\u3432\0\u34b5"+
    "\0\u3538\0\u35bb\0\u363e\0\u36c1\0\u3744\0\u37c7\0\u384a\0\u38cd"+
    "\0\u3950\0\u39d3\0\u3a56\0\u3ad9\0\u3b5c\0\u3bdf\0\u3c62\0\u3ce5"+
    "\0\u3d68\0\u3deb\0\u3e6e\0\u3ef1\0\u3f74\0\u3ff7\0\u407a\0\u40fd"+
    "\0\u4180\0\u4203\0\u4286\0\u4309\0\u438c\0\u440f\0\u4492\0\u4515"+
    "\0\u4598\0\u461b\0\u469e\0\u4721\0\u47a4\0\u4827\0\u48aa\0\u492d"+
    "\0\u49b0\0\u4a33\0\u4ab6\0\u4b39\0\u4bbc\0\u4c3f\0\u4cc2\0\u4d45"+
    "\0\u4dc8\0\u4e4b\0\u4ece\0\u4f51\0\u4fd4\0\u5057\0\u0189\0\u50da"+
    "\0\u515d\0\u51e0\0\u5263\0\u52e6\0\u5369\0\u53ec\0\u546f\0\u54f2"+
    "\0\u5575\0\u55f8\0\u567b\0\u56fe\0\u5781\0\u5804\0\u5887\0\u590a"+
    "\0\u598d\0\u5a10\0\u5a93\0\u5b16\0\u5b99\0\u5c1c\0\u5c9f\0\u5d22"+
    "\0\u5da5\0\u5e28\0\u5eab\0\u5f2e\0\u5fb1\0\u6034\0\u60b7\0\u613a"+
    "\0\u61bd\0\u6240\0\u62c3\0\u6346\0\u63c9\0\u644c\0\u64cf\0\u6552"+
    "\0\u65d5\0\u6658\0\u66db\0\u675e\0\u67e1\0\u6864\0\u68e7\0\u696a"+
    "\0\u69ed\0\u6a70\0\u6af3\0\u6b76\0\u6bf9\0\u6c7c\0\u6cff\0\u6d82"+
    "\0\u6e05\0\u6e88\0\u6f0b\0\u6f8e\0\u7011\0\u7094\0\u7117\0\u719a"+
    "\0\u721d\0\u72a0\0\u7323\0\u73a6\0\u7429\0\u74ac\0\u752f\0\u75b2"+
    "\0\u0189\0\u74ac\0\u7635\0\u76b8\0\u773b\0\u77be\0\u7841\0\u78c4"+
    "\0\u7947\0\u79ca\0\u7a4d\0\u7ad0\0\u7b53\0\u7bd6\0\u29f6\0\u7c59"+
    "\0\u7cdc\0\u7d5f\0\u7de2\0\u7e65\0\u7ee8\0\u7f6b\0\u7fee\0\u8071"+
    "\0\u80f4\0\u8177\0\u81fa\0\u827d\0\u8300\0\u8383\0\u8406\0\u8489"+
    "\0\u850c\0\u858f\0\u8612\0\u8695\0\u8718\0\u879b\0\u881e\0\u88a1"+
    "\0\u8924\0\u89a7\0\u8a2a\0\u8aad\0\u8b30\0\u8bb3\0\u8c36\0\u8cb9"+
    "\0\u8d3c\0\u8dbf\0\u8e42\0\u8ec5\0\u8f48\0\u8fcb\0\u904e\0\u90d1"+
    "\0\u9154\0\u91d7\0\u925a\0\u92dd\0\u9360\0\u93e3\0\u9466\0\u94e9"+
    "\0\u956c\0\u95ef\0\u9672\0\u96f5\0\u9778\0\u28f0\0\u97fb\0\u987e"+
    "\0\u9901\0\u9984\0\u9a07\0\u9a8a\0\u9b0d\0\u9b90\0\u9c13\0\u9c96"+
    "\0\u9d19\0\u9d9c\0\u9e1f\0\u9ea2\0\u9f25\0\u9fa8\0\u2767\0\ua02b"+
    "\0\ua0ae\0\ua131\0\ua1b4\0\ua237\0\ua2ba\0\ua33d\0\ua3c0\0\ua443"+
    "\0\ua4c6\0\ua549\0\ua5cc\0\ua64f\0\ua6d2\0\ua755\0\u25de\0\ua7d8"+
    "\0\ua85b\0\ua8de\0\ua961\0\ua9e4\0\u0189\0\uaa67\0\uaaea\0\uab6d"+
    "\0\uabf0\0\uac73\0\uacf6\0\uad79\0\uadfc\0\uae7f\0\uaf02\0\uaf85"+
    "\0\ub008\0\ub08b\0\ub10e\0\ub191\0\ub214\0\ub297\0\ub31a\0\ub39d"+
    "\0\ub420\0\ub4a3\0\ub526\0\ub5a9\0\ub62c\0\ub6af\0\ub732\0\ub7b5"+
    "\0\ub838\0\u0189\0\ub8bb\0\ub93e\0\ub9c1\0\uba44\0\ubac7\0\ubb4a"+
    "\0\ubbcd\0\ubc50\0\ubcd3\0\u0189\0\ubd56\0\ubdd9\0\u0189\0\u0189"+
    "\0\ube5c\0\ubedf\0\ubf62\0\ubfe5\0\uc068\0\uc0eb\0\uc16e\0\uc1f1"+
    "\0\uc274\0\uc2f7\0\uc37a\0\uc3fd\0\uc480\0\uc503\0\uc586\0\uc609"+
    "\0\uc68c\0\uc70f\0\uc792\0\uc815\0\u0189\0\uc898\0\uc91b\0\uc99e"+
    "\0\uca21\0\ucaa4\0\ucb27\0\ucbaa\0\ucc2d\0\uccb0\0\ucd33\0\ucdb6"+
    "\0\uce39\0\ucebc\0\ucf3f\0\ucfc2\0\ud045\0\ud0c8\0\ud14b\0\ud1ce"+
    "\0\ud251\0\ud2d4\0\ud357\0\ud3da\0\ud45d\0\ud4e0\0\ud563\0\ud5e6"+
    "\0\ud669\0\ud6ec\0\ud76f\0\ud7f2\0\ud875\0\ud8f8\0\ud97b\0\ud9fe"+
    "\0\u0189\0\u0189\0\uda81\0\udb04\0\udb87\0\udc0a\0\udc8d\0\udd10"+
    "\0\udd93\0\ude16\0\ude99\0\udf1c\0\udf9f\0\ue022\0\ue0a5\0\ue128"+
    "\0\ue1ab\0\ue22e\0\ue2b1\0\ue334\0\ue3b7\0\ue43a\0\ue4bd\0\ue540"+
    "\0\u0189\0\ue5c3\0\ue646\0\ue6c9\0\ue74c\0\ue7cf\0\ue852\0\ue8d5"+
    "\0\ue958\0\ue9db\0\uea5e\0\ueae1\0\ueb64\0\uebe7\0\uec6a\0\ueced"+
    "\0\ued70\0\uedf3\0\uee76\0\ueef9\0\uef7c\0\uefff\0\uf082\0\uf105"+
    "\0\uf188\0\uf20b\0\uf28e\0\uf311\0\uf394\0\uf417\0\uf49a\0\uf51d"+
    "\0\uf5a0\0\uf623\0\uf6a6\0\uf729\0\uf7ac\0\uf82f\0\uf8b2\0\uf935"+
    "\0\uf9b8\0\ufa3b\0\ufabe\0\ufb41\0\ufbc4\0\u0189\0\ufc47\0\ufcca"+
    "\0\ufd4d\0\ufdd0\0\ufe53\0\ufed6\0\uff59\0\uffdc\1\137\1\342"+
    "\1\u0165\1\u01e8\1\u026b\1\u02ee\1\u0371\1\u03f4\1\u0477\1\u04fa"+
    "\1\u057d\1\u0600\1\u0683\1\u0706\1\u0789\1\u080c\1\u088f\1\u0912"+
    "\1\u0995\1\u0a18\1\u0a9b\1\u0b1e\1\u0ba1\1\u0c24\1\u0ca7\1\u0d2a"+
    "\1\u0dad\1\u0e30\1\u0eb3\1\u0f36\1\u0fb9\1\u103c\1\u10bf\1\u1142"+
    "\1\u11c5\0\u0189\1\u1248\1\u12cb\1\u134e\1\u13d1\1\u1454\1\u14d7"+
    "\1\u155a\1\u15dd\1\u1660\1\u16e3\1\u1766\1\u17e9\1\u186c\1\u18ef"+
    "\1\u1972\1\u19f5\1\u1a78\1\u1afb\1\u1b7e\0\u0189\1\u1c01\1\u1c84"+
    "\1\u1d07\1\u1d8a\1\u1e0d\1\u1e90\1\u1f13\1\u1f96\1\u2019\1\u209c"+
    "\1\u211f\1\u21a2\1\u2225\1\u22a8\1\u232b\1\u23ae\1\u2431\1\u24b4"+
    "\1\u2537\1\u25ba\1\u263d\1\u26c0\1\u2743\1\u27c6\1\u2849\1\u28cc"+
    "\1\u294f\1\u29d2\1\u2a55\1\u2ad8\1\u2b5b\1\u2bde\1\u2c61\1\u2ce4"+
    "\1\u2d67\1\u2dea\1\u2e6d\1\u2ef0\1\u2f73\1\u2ff6\1\u3079\1\u30fc"+
    "\1\u317f\1\u3202\1\u3285\1\u3308\1\u338b\1\u340e\1\u3491\1\u3514"+
    "\1\u3597\1\u361a\1\u369d\1\u3720\1\u37a3\1\u3826\1\u38a9\1\u392c"+
    "\1\u39af\1\u3a32\1\u3ab5\1\u3b38\1\u3bbb\1\u3c3e\1\u3cc1\1\u3d44"+
    "\1\u3dc7\1\u3e4a\1\u3ecd\1\u3f50\1\u3fd3\1\u4056\1\u40d9\1\u415c"+
    "\1\u41df\1\u4262\1\u42e5\1\u4368\1\u43eb\1\u446e\1\u44f1\1\u4574"+
    "\1\u45f7\1\u467a\1\u46fd\1\u4780\1\u4803\1\u4886\1\u4909\1\u498c"+
    "\1\u4a0f\1\u4a92\1\u4b15\1\u4b98\1\u4c1b\1\u4c9e\1\u4d21\1\u4da4"+
    "\1\u4e27\1\u4eaa\1\u4f2d\1\u4fb0\1\u5033\1\u50b6\1\u5139\1\u51bc"+
    "\1\u523f\1\u52c2\1\u5345\1\u53c8\1\u544b\1\u54ce\1\u5551\1\u55d4"+
    "\0\u0189\1\u5657\1\u56da\1\u575d\1\u575d\1\u57e0\1\u5863\1\u58e6"+
    "\1\u5969\1\u59ec\1\u5a6f\1\u5af2\1\u5b75\1\u5bf8\1\u5c7b\1\u5cfe"+
    "\1\u5d81\1\u5e04\1\u5e87\1\u5f0a\1\u5f8d\1\u6010\1\u6093\1\u6116"+
    "\1\u6199\1\u621c\1\u629f\1\u6322\1\u63a5\1\u6428\1\u64ab\1\u652e"+
    "\1\u65b1\1\u6634\1\u66b7\1\u673a\1\u67bd\1\u6840\1\u68c3\0\u0189"+
    "\1\u6946\1\u69c9\1\u6a4c\1\u6acf\1\u6b52\1\u6bd5\1\u6c58\1\u6cdb"+
    "\1\u6d5e\1\u6de1\0\u0189\1\u6e64\1\u6ee7\1\u6f6a\1\u6fed\1\u7070"+
    "\0\u0189\1\u70f3\1\u7176\1\u71f9\1\u727c\1\u72ff\1\u7382\1\u7405"+
    "\1\u7488\1\u750b\1\u758e\1\u7611\1\u7694\1\u7717\1\u779a\1\u781d"+
    "\0\u0189\1\u78a0\1\u7923\1\u79a6\1\u7a29\1\u7aac\1\u7b2f\1\u7bb2"+
    "\1\u7c35\1\u7cb8\1\u7d3b\1\u7dbe\1\u7e41\1\u7ec4\1\u7f47\1\u7fca"+
    "\1\u804d\1\u80d0\1\u8153\1\u81d6\1\u8259\1\u82dc\1\u835f\1\u83e2"+
    "\1\u8465\1\u84e8\1\u856b\1\u85ee\1\u8671\1\u86f4\1\u8777\1\u87fa"+
    "\1\u887d\1\u8900\1\u8983\1\u8a06\1\u8a89\1\u8b0c\1\u8b8f\1\u8c12"+
    "\1\u8c95\1\u8d18\1\u8d9b\1\u8e1e\1\u8ea1\1\u8f24\1\u8fa7\1\u902a"+
    "\1\u90ad\1\u9130\1\u91b3\0\u0189\1\u9236\1\u92b9\1\u933c\1\u93bf"+
    "\1\u9442\1\u94c5\0\u0189\1\u9548\1\u95cb\1\u964e\1\u96d1\1\u9754"+
    "\1\u97d7\1\u985a\1\u98dd\1\u9960\1\u99e3\1\u9a66\1\u9ae9\1\u9b6c"+
    "\1\u9bef\1\u9c72\1\u9cf5\1\u9d78\1\u9dfb\1\u9e7e\1\u9f01\1\u9f84"+
    "\1\ua007\1\ua08a\1\ua10d\1\ua190\1\ua213\1\ua296\1\ua319\1\ua39c"+
    "\1\ua41f\1\ua4a2\1\ua525\1\ua5a8\1\ua62b\1\ua6ae\1\ua731\1\ua7b4"+
    "\1\ua837\1\ua8ba\1\ua93d\1\ua9c0\1\uaa43\1\uaac6\1\uab49\1\uabcc"+
    "\1\uac4f\1\uacd2\1\uad55\1\uadd8\1\uae5b\1\uaede\1\uaf61\1\uafe4"+
    "\1\ub067\1\ub0ea\1\ub16d\1\ub1f0\1\ub273\1\ub2f6\1\ub379\1\ub3fc"+
    "\1\ub47f\1\ub502\1\ub585\1\ub608\1\ub68b\1\ub70e\1\ub791\1\ub814"+
    "\1\ub897\1\ub91a\1\ub99d\1\uba20\1\ubaa3\1\ubb26\1\ubba9\1\ubc2c"+
    "\1\ubcaf\1\ubd32\1\ubdb5\1\ube38\1\ubebb\1\ubf3e\1\ubfc1\1\uc044"+
    "\1\uc0c7\1\uc14a\1\uc1cd\1\uc250\1\uc2d3\1\uc356\1\uc3d9\1\uc45c"+
    "\1\uc4df\1\uc562\1\uc5e5\1\uc668\1\uc6eb\1\uc76e\1\uc7f1\1\uc874"+
    "\1\uc8f7\1\uc97a\1\uc9fd\1\uca80\1\ubcaf\1\ucb03\1\ucb86\1\ucc09"+
    "\1\ucc8c\1\ucd0f\1\ucd92\1\uce15\1\uce98\1\ucf1b\0\u0189\0\u0189"+
    "\1\ucf9e\1\ud021\1\ud0a4\1\ud127\1\ud1aa\1\ud22d\1\ud2b0\1\ud333"+
    "\1\ud3b6\1\ud439\1\ud4bc\1\ud53f\1\ud5c2\1\ud645\1\ud6c8\1\ud74b"+
    "\1\ud7ce\1\ud851\1\ud8d4\1\ud957\1\ud9da\1\uda5d\1\udae0\1\udb63"+
    "\1\udbe6\1\udc69\1\udcec\1\udd6f\1\uddf2\1\ude75\1\udef8\1\udf7b"+
    "\1\udffe\1\ue081\1\ue104\1\ue187\1\ue20a\0\u0189\1\ue28d\1\ue310"+
    "\1\ue393\1\ue416\1\ue499\1\ue51c\1\ue59f\1\ue622\1\ue6a5\1\ue728"+
    "\1\ue7ab\1\ue82e\1\ue8b1\1\ue934\1\ue9b7\1\uea3a\1\ueabd\1\ueb40"+
    "\1\uebc3\1\uec46\1\uecc9\1\ued4c\1\uedcf\1\uee52\1\ueed5\1\uef58"+
    "\1\u8a89\1\u70f3\1\uefdb\1\uf05e\1\uf0e1\1\uf164\1\uf1e7\1\uf26a"+
    "\1\uf2ed\1\uf370\1\uf3f3\1\uf476\1\uf4f9\1\uf57c\1\uf5ff\1\uf682"+
    "\1\uf705\1\uf788\1\uf80b\1\uf88e\1\uf911\1\uf994\1\ufa17\1\ufa9a"+
    "\1\ufb1d\1\ufba0\1\ufc23\1\ufca6\1\ufd29\1\ufdac\1\ufe2f\1\ufeb2"+
    "\1\uff35\1\uffb8\2\73\2\276\2\u0141\2\u01c4\2\u0247\2\u02ca"+
    "\2\u034d\2\u03d0\2\u0453\2\u04d6\2\u0559\2\u05dc\2\u065f\2\u06e2"+
    "\2\u0765\2\u07e8\2\u086b\2\u08ee\2\u0971\2\u09f4\2\u0a77\0\u286d"+
    "\2\u0afa\2\u0b7d\2\u0c00\0\ubcd3\2\u0c83\2\u0d06\2\u0d89\2\u0e0c"+
    "\2\u0e8f\2\u0f12\2\u0f95\2\u1018\2\u109b\2\u111e\2\u11a1\2\u1224"+
    "\2\u12a7\2\u132a\2\u13ad\2\u1430\2\u14b3\2\u1536\2\u15b9\2\u163c"+
    "\2\u16bf\2\u1742\2\u17c5\2\u1848\2\u18cb\2\u194e\2\u19d1\2\u1a54"+
    "\2\u1ad7\2\u1b5a\2\u1bdd\2\u1c60\2\u1ce3\2\u1d66\2\u1de9\2\u1e6c"+
    "\2\u1eef\2\u1f72\2\u1ff5\2\u2078\2\u20fb\2\u217e\2\u2201\2\u2284"+
    "\2\u2307\2\u238a\2\u240d\2\u2490\2\u2513\2\u2596\2\u2619\2\u269c"+
    "\2\u271f\2\u27a2\2\u2825\2\u28a8\2\u292b\2\u29ae\2\u2a31\2\u2ab4"+
    "\2\u2b37\2\u2bba\2\u2c3d\2\u2cc0\2\u2d43\2\u2dc6\2\u2e49\2\u2ecc"+
    "\0\udd10\2\u2f4f\2\u2fd2\2\u3055\2\u30d8\2\u315b\2\u31de\2\u3261"+
    "\2\u32e4\2\u3367\2\u33ea\2\u346d\2\u34f0\2\u3573\2\u35f6\2\u3679"+
    "\2\u36fc\2\u377f\2\u3802\2\u3885\2\u3908\2\u398b\2\u3a0e\2\u3a91"+
    "\2\u3b14\2\u3b97\2\u3c1a\2\u3c9d\2\u3d20\2\u3da3\2\u3e26\2\u3ea9"+
    "\2\u3f2c\2\u3faf\2\u4032\2\u40b5\2\u4138\2\u41bb\2\u423e\2\u42c1"+
    "\2\u4344\2\u43c7\2\u444a\2\u44cd\2\u4550\2\u45d3\2\u4656\2\u46d9"+
    "\2\u475c\2\u47df\2\u4862\2\u48e5\2\u4968\2\u49eb\2\u4a6e\2\u4af1"+
    "\2\u4b74\2\u4bf7\2\u4c7a\2\u4cfd\2\u4d80\2\u4e03\2\u4e86\0\u0189"+
    "\2\u4f09\2\u4f8c\2\u500f\2\u5092\2\u5115\2\u5198\2\u521b\2\u529e"+
    "\2\u5321\2\u53a4\2\u5427\2\u54aa\2\u552d\2\u55b0\2\u5633\2\u56b6"+
    "\2\u5739\2\u57bc\2\u583f\2\u58c2\2\u5945\2\u59c8\0\u0189\2\u5a4b"+
    "\2\u5ace\2\u5b51\2\u5bd4\2\u5c57\2\u5cda\2\u5d5d\2\u5de0\2\u5e63"+
    "\2\u5ee6\2\u5f69\2\u5fec\2\u606f\2\u60f2\2\u6175\2\u61f8\2\u627b"+
    "\2\u62fe\2\u6381\2\u6404\2\u6487\2\u650a\2\u658d\2\u6610\2\u6693"+
    "\2\u6716\2\u6799\2\u681c\2\u689f\2\u6922\2\u69a5\2\u6a28\2\u6aab"+
    "\2\u6b2e\2\u6bb1\2\u6c34\2\u6cb7\2\u6d3a\2\u6dbd\2\u6e40\2\u6ec3"+
    "\2\u6f46\2\u6fc9\2\u704c\2\u70cf\2\u7152\2\u71d5\2\u7258\2\u72db"+
    "\2\u735e\2\u73e1\2\u7464\2\u74e7\2\u756a\2\u75ed\2\u7670\2\u76f3"+
    "\2\u7776\2\u77f9\2\u787c\2\u78ff\2\u7982\2\u7a05\2\u7a88\2\u7b0b"+
    "\2\u7b8e\2\u7c11\2\u7c94\2\u7d17\2\u7d9a\2\u7e1d\2\u7ea0\0\u0189"+
    "\2\u7f23\2\u7fa6\2\u8029\2\u80ac\2\u812f\2\u81b2\2\u8235\2\u82b8"+
    "\2\u833b\2\u83be\2\u8441\2\u84c4\2\u8547\2\u85ca\2\u864d\2\u86d0"+
    "\2\u8753\2\u87d6\2\u8859\2\u88dc\2\u895f\2\u89e2\2\u8a65\2\u8ae8"+
    "\2\u8b6b\2\u8bee\2\u8c71\2\u8cf4\2\u8d77\2\u8dfa\2\u8e7d\2\u8f00"+
    "\2\u8f83\2\u9006\2\u9089\2\u910c\2\u918f\2\u9212\2\u9295\2\u9318"+
    "\2\u939b\2\u941e\2\u94a1\2\u9524\2\u95a7\2\u962a\2\u96ad\2\u9730"+
    "\2\u97b3\2\u9836\2\u98b9\2\u993c\2\u99bf\2\u9a42\2\u9ac5\2\u9b48"+
    "\2\u9bcb\2\u9c4e\2\u9cd1\2\u9d54\2\u9dd7\2\u9e5a\2\u9edd\2\u9f60"+
    "\2\u9fe3\2\ua066\2\ua0e9\2\ua16c\2\ua1ef\2\ua272\2\ua2f5\2\ua378"+
    "\2\ua3fb\2\ua47e\2\ua501\2\u650a\2\ua584\2\ua607\2\ua68a\2\ua70d"+
    "\2\ua790\2\ua813\2\ua896\2\ua919\2\ua99c\2\uaa1f\2\uaaa2\2\uab25"+
    "\2\uaba8\2\uac2b\2\uacae\2\uad31\2\uadb4\2\uae37\2\uaeba\2\uaf3d"+
    "\2\uafc0\2\ub043\2\ub0c6\2\ub149\2\ub1cc\2\ub24f\2\ub2d2\2\ub355"+
    "\2\ub3d8\2\ub45b\2\ub4de\2\ub561\2\ub5e4\2\ub667\2\ub6ea\2\ub76d"+
    "\2\ub7f0\2\ub873\2\ub8f6\2\ub979\2\ub9fc\2\uba7f\2\ubb02\2\ubb85"+
    "\2\ubc08\2\ubc8b\2\ubd0e\2\ubd91\2\ube14\2\ube97\2\ubf1a\2\ubf9d"+
    "\2\uc020\2\uc0a3\2\uc126\2\uc1a9\2\uc22c\2\uc2af\2\uc332\2\uc3b5"+
    "\2\uc438\2\uc4bb\2\uc53e\2\uc5c1\2\uc644\2\uc6c7\2\uc74a\2\uc7cd"+
    "\2\uc850\2\uc8d3\2\uc956\2\uc9d9\2\uca5c\2\ucadf\2\ucb62\2\ucbe5"+
    "\2\ucc68\2\ucceb\2\ucd6e\2\ucdf1\2\uce74\2\ucef7\2\ucf7a\2\ucffd"+
    "\2\ud080\2\ud103\2\ud186\2\ud209\2\ud28c\2\ud30f\2\ud392\2\ud415"+
    "\2\ud498\2\ud51b\2\ud59e\2\ud621\2\ud6a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\4\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\6\24\1\27\1\30"+
    "\1\31\1\32\1\13\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\13"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\13"+
    "\1\76\2\13\1\77\1\100\1\101\1\13\1\102\1\13"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\13\1\113\1\114\1\115\1\116\1\13\1\117\1\4"+
    "\1\120\1\121\2\4\1\122\1\123\1\124\1\4\1\125"+
    "\1\126\1\13\2\127\2\13\1\120\1\13\1\130\4\13"+
    "\1\131\1\132\1\133\1\13\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\4\1\143\1\6\1\4\1\143"+
    "\1\7\1\144\1\11\1\12\4\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\6\24\1\27\1\30\1\31\1\32\1\13\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\13\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\13\1\76\2\13\1\77\1\100\1\101"+
    "\1\13\1\102\1\13\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\13\1\113\1\114\1\115\1\116"+
    "\1\13\1\117\1\4\1\120\1\121\2\4\1\122\1\123"+
    "\1\124\1\4\1\125\1\126\1\13\2\127\2\13\1\120"+
    "\1\13\1\130\4\13\1\131\1\132\1\133\1\13\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\2\145\1\146"+
    "\2\145\1\147\2\145\1\150\11\145\1\151\160\145\204\0"+
    "\1\152\2\153\1\154\1\155\1\152\176\0\1\6\201\0"+
    "\1\152\2\153\1\154\1\155\1\152\72\0\1\156\14\0"+
    "\1\157\1\160\10\0\1\161\112\0\1\162\264\0\1\163"+
    "\121\0\1\13\164\0\1\164\1\0\11\165\171\0\1\166"+
    "\201\0\1\165\1\0\11\24\76\0\1\167\70\0\1\170"+
    "\1\165\1\0\1\171\10\24\76\0\1\167\70\0\1\172"+
    "\1\165\1\0\11\24\76\0\1\167\106\0\1\173\73\0"+
    "\1\13\106\0\1\174\5\0\1\175\1\176\1\177\7\0"+
    "\1\200\1\0\1\201\1\0\1\202\31\0\1\203\144\0"+
    "\1\204\6\0\1\205\26\0\1\206\3\0\1\207\1\210"+
    "\4\0\1\211\130\0\1\212\5\0\1\213\14\0\1\214"+
    "\12\0\1\215\2\0\1\216\2\0\1\217\104\0\1\220"+
    "\22\0\1\221\6\0\1\222\32\0\1\223\2\0\1\224"+
    "\2\0\1\225\5\0\1\226\120\0\1\227\3\0\1\230"+
    "\15\0\1\231\13\0\1\232\3\0\1\233\3\0\1\234"+
    "\5\0\1\235\2\0\1\236\174\0\1\237\1\0\1\240"+
    "\2\0\1\241\6\0\1\242\136\0\1\243\3\0\1\141"+
    "\12\0\1\244\5\0\1\245\2\0\1\246\1\0\1\247"+
    "\1\250\1\244\4\0\1\251\77\0\1\252\23\0\1\253"+
    "\15\0\1\254\14\0\1\255\3\0\1\256\11\0\1\257"+
    "\2\0\1\260\171\0\1\261\5\0\1\262\75\0\1\141"+
    "\52\0\1\263\20\0\1\264\6\0\1\265\1\266\112\0"+
    "\6\267\13\0\1\270\16\0\1\271\12\0\1\272\1\273"+
    "\6\0\1\274\4\0\1\275\1\276\4\0\1\277\36\0"+
    "\4\267\57\0\1\300\3\0\1\301\31\0\1\302\3\0"+
    "\1\303\11\0\1\304\126\0\1\305\35\0\1\306\15\0"+
    "\1\307\147\0\1\310\30\0\1\311\2\0\1\312\1\0"+
    "\1\313\2\0\1\314\101\0\1\220\14\0\1\315\15\0"+
    "\1\316\10\0\1\141\10\0\1\317\6\0\1\320\1\321"+
    "\2\0\1\322\1\323\1\0\1\324\2\0\1\325\1\0"+
    "\1\326\2\0\1\327\1\330\41\0\1\315\135\0\1\331"+
    "\35\0\1\13\1\0\1\13\56\0\1\332\5\0\1\333"+
    "\3\0\1\334\25\0\1\335\3\0\1\336\31\0\1\13"+
    "\32\0\1\332\57\0\1\337\16\0\1\340\14\0\1\341"+
    "\1\0\1\342\2\0\1\343\1\344\5\0\1\345\4\0"+
    "\1\346\3\0\1\347\1\13\73\0\1\350\30\0\1\351"+
    "\25\0\1\352\1\353\2\0\1\354\2\0\1\355\1\356"+
    "\3\0\1\357\4\0\1\360\1\361\175\0\1\362\60\0"+
    "\2\363\107\0\1\364\10\0\1\365\60\0\1\363\1\366"+
    "\54\0\1\367\26\0\1\370\3\0\1\371\2\0\1\372"+
    "\142\0\1\373\44\0\1\357\4\0\1\374\1\375\37\0"+
    "\4\376\63\0\1\377\1\373\34\0\1\u0100\7\0\1\357"+
    "\5\0\1\375\36\0\1\u0101\4\u0102\1\u0101\35\0\1\u0103"+
    "\21\0\1\u0104\1\0\1\u0105\1\0\1\u0106\2\0\1\u0107"+
    "\6\0\1\u0108\1\u0109\1\0\1\u010a\1\u010b\2\u010c\1\0"+
    "\1\u010d\1\u010e\22\0\1\u010f\1\u0110\4\0\1\u0111\2\u0112"+
    "\1\u0113\20\0\1\u0114\26\0\2\u010f\45\0\1\u0115\1\u0116"+
    "\1\u0117\1\u0118\1\u0116\1\u0119\4\u0116\2\0\1\u011a\3\0"+
    "\1\u011b\1\u011c\1\u011d\1\0\1\u011e\13\0\1\u011f\1\u0120"+
    "\1\u0121\1\u0122\2\0\1\u0123\2\0\1\u0124\1\u0125\1\u0126"+
    "\1\0\1\u0127\1\0\1\u0128\1\u0129\1\u012a\1\u012b\2\0"+
    "\1\u012c\1\u012d\1\u012a\1\0\1\u012e\20\0\1\u012a\22\0"+
    "\1\u012a\101\0\1\u012f\123\0\1\u0130\61\0\1\u0131\1\u0132"+
    "\10\0\1\u0133\1\0\1\u0134\3\0\1\u0135\1\u0136\1\u0137"+
    "\1\u0138\156\0\1\u0139\3\0\1\u013a\3\0\1\u013b\5\0"+
    "\1\u013c\173\0\1\u013d\6\0\1\u013e\2\0\1\u013f\2\0"+
    "\1\u0140\156\0\1\u0141\1\u0142\2\0\1\u0143\3\0\1\u0144"+
    "\5\0\1\u0145\162\0\1\u0146\20\0\1\u0147\5\0\1\u0148"+
    "\1\0\1\u0149\131\0\1\u014a\2\0\1\u014b\33\0\1\u014c"+
    "\165\0\1\u014d\1\0\1\u0142\1\0\1\u014e\14\0\1\u014f"+
    "\142\0\1\u014b\21\0\1\u0150\10\0\1\u0151\1\u0152\3\0"+
    "\1\u0153\1\u0154\160\0\1\u0155\1\0\1\u0144\1\0\1\u0156"+
    "\10\0\1\u0157\1\u0158\164\0\1\u0159\3\0\1\u015a\3\0"+
    "\1\u015b\13\0\1\13\101\0\1\u015c\21\0\1\u015d\10\0"+
    "\1\357\5\0\1\u015e\31\0\1\u015f\1\u0160\37\0\1\u015c"+
    "\2\0\2\13\126\0\1\u0161\1\u0162\2\0\1\u0163\2\0"+
    "\1\u0164\2\0\1\u0165\5\0\1\u0166\13\0\1\u0167\137\0"+
    "\1\u0168\3\0\1\u0169\2\0\1\u016a\6\0\1\u016b\2\0"+
    "\1\u016c\14\0\1\13\23\0\4\u016d\6\0\1\u016e\112\0"+
    "\1\u016f\2\0\1\u0170\1\u0171\3\0\1\u0172\1\0\1\u0173"+
    "\1\0\1\u0174\2\0\1\u0175\1\u0176\156\0\1\u0177\1\0"+
    "\1\244\4\0\1\u0178\1\u0179\5\0\1\u017a\1\244\5\0"+
    "\1\u017b\71\0\1\u017c\102\0\1\u017d\5\0\2\u017e\70\0"+
    "\1\u017c\63\0\1\u017f\25\0\1\u017e\70\0\1\u017c\275\0"+
    "\1\u0180\4\0\1\u0181\4\0\1\u0182\6\0\1\u0183\13\0"+
    "\1\u0184\15\0\3\13\200\0\3\13\107\0\1\u0185\1\u0186"+
    "\26\0\1\u0187\67\0\1\13\4\0\1\13\21\0\2\13"+
    "\1\0\2\13\2\0\1\u0188\2\0\1\13\5\0\1\u0189"+
    "\1\0\1\141\1\0\1\u0188\42\0\3\u018a\6\0\1\13"+
    "\12\0\1\13\22\0\1\13\4\0\1\141\24\0\1\u018b"+
    "\1\0\11\24\336\0\1\u0157\152\0\1\13\232\0\1\13"+
    "\67\0\1\u018c\7\0\1\u018d\3\0\2\141\124\0\1\13"+
    "\35\0\1\u018e\6\0\1\u018f\45\0\1\u0190\1\u0191\130\0"+
    "\1\357\35\0\1\357\5\0\1\361\207\0\2\13\150\0"+
    "\1\u0192\37\0\1\u0193\71\0\2\13\133\0\2\13\200\0"+
    "\1\135\106\0\1\u018d\3\0\2\141\124\0\1\u0194\233\0"+
    "\1\175\1\176\1\u0195\7\0\1\200\1\0\1\201\1\0"+
    "\1\202\31\0\1\u0196\167\0\1\244\14\0\1\244\161\0"+
    "\1\u0157\162\0\1\357\5\0\1\u015e\174\0\1\357\124\0"+
    "\1\143\2\153\1\143\1\155\1\143\175\0\1\143\2\153"+
    "\1\143\1\155\1\143\72\0\1\156\14\0\1\157\1\160"+
    "\10\0\1\161\54\0\1\u0197\241\0\1\u0197\143\0\1\u0198"+
    "\316\0\1\u0199\131\0\1\u019a\14\0\1\u019a\242\0\1\u019b"+
    "\177\0\1\u019c\202\0\1\u019d\106\0\1\13\204\0\11\165"+
    "\76\0\1\167\46\0\2\166\1\0\2\166\1\0\175\166"+
    "\47\0\1\u019e\215\0\1\u019f\5\0\1\u01a0\135\0\1\165"+
    "\1\0\11\24\41\0\1\u0146\34\0\1\167\130\0\1\u019f"+
    "\2\0\1\u01a1\2\0\1\u01a0\171\0\1\u01a2\25\0\1\u01a3"+
    "\203\0\1\u01a4\133\0\1\u01a5\62\0\1\u01a6\177\0\1\u0144"+
    "\202\0\1\u01a7\170\0\1\u01a8\121\0\1\u01a9\133\0\1\u01aa"+
    "\103\0\1\u01ab\207\0\1\u01ac\237\0\1\u01ad\162\0\1\u01ae"+
    "\214\0\1\u01af\172\0\1\u01b0\140\0\1\u01b1\23\0\1\u01b2"+
    "\174\0\1\u01b3\224\0\1\u01b4\200\0\1\u01b5\23\0\1\u01b6"+
    "\177\0\1\u01b7\5\0\1\u01b8\171\0\1\u01b9\156\0\1\141"+
    "\167\0\1\u01ba\165\0\1\u01bb\261\0\1\u01bc\165\0\1\u01bd"+
    "\11\0\1\u01be\2\0\1\u01bf\176\0\1\u01c0\1\u01c1\1\u01c2"+
    "\164\0\1\u01c3\21\0\1\u01c4\142\0\1\u01c5\163\0\1\13"+
    "\174\0\1\u01c6\265\0\1\u01c7\167\0\1\u01c8\4\0\1\u01c9"+
    "\3\0\1\u01ca\3\0\1\u01cb\157\0\1\u01cc\21\0\1\u01cd"+
    "\203\0\1\u01ce\157\0\1\u01cf\224\0\1\u01d0\163\0\1\u01d1"+
    "\2\0\1\u01d2\220\0\1\u01d3\162\0\1\u01d4\12\0\1\u01d5"+
    "\125\0\1\u01d6\243\0\1\u01a4\212\0\1\u01d7\13\0\1\u01d8"+
    "\171\0\1\u01d9\144\0\1\u01da\243\0\1\u01db\174\0\1\u01dc"+
    "\1\0\1\u01dd\152\0\1\13\160\0\1\u01de\201\0\1\u01df"+
    "\3\0\1\u01e0\255\0\1\u01e1\204\0\1\u01e2\202\0\1\u01e3"+
    "\157\0\1\u01e4\3\0\1\u01e5\3\0\1\u01e6\214\0\1\u01e7"+
    "\201\0\1\u01e8\121\0\1\u01c6\147\0\1\u01e9\275\0\1\u01ea"+
    "\205\0\1\u01eb\13\0\1\u01ec\2\0\1\u01ed\127\0\1\252"+
    "\176\0\1\u01ee\4\0\1\u01ef\233\0\1\u01f0\214\0\1\u01f1"+
    "\204\0\1\u01f2\4\0\1\u01f3\143\0\1\u01f4\225\0\1\u01f5"+
    "\137\0\1\u01f6\4\0\1\u01f7\202\0\1\u01f8\14\0\1\u01f9"+
    "\162\0\1\u01fa\243\0\1\u01fb\6\0\1\u01fc\5\0\1\u01fd"+
    "\162\0\1\u01fe\11\0\1\u01ff\170\0\1\u0200\166\0\1\u01df"+
    "\240\0\1\u0201\176\0\1\u0202\123\0\1\u0203\244\0\1\u0204"+
    "\202\0\1\u0205\176\0\1\u0206\225\0\1\u0207\142\0\1\u0208"+
    "\204\0\1\141\236\0\1\u0209\1\u020a\1\0\1\u020b\166\0"+
    "\1\13\174\0\1\u01de\216\0\1\u020c\11\0\1\u020d\175\0"+
    "\1\u020e\172\0\1\u020f\177\0\1\u0210\5\0\1\u0211\105\0"+
    "\1\u0212\302\0\1\275\174\0\1\326\167\0\1\u0213\7\0"+
    "\1\u0214\153\0\1\u0215\166\0\1\u0216\205\0\1\u0217\235\0"+
    "\1\u0218\177\0\1\u0219\1\0\1\u021a\1\u0216\2\0\1\u021b"+
    "\10\0\1\u021c\3\0\1\u021d\141\0\1\u021e\162\0\1\u021f"+
    "\240\0\1\u0220\7\0\1\u01d2\205\0\1\u0221\1\0\1\u0222"+
    "\2\0\1\u0223\2\0\1\u0224\157\0\1\u0225\210\0\1\u0226"+
    "\5\0\1\u0227\1\275\206\0\1\u0228\177\0\1\u0229\2\0"+
    "\1\u022a\200\0\1\13\42\0\2\13\104\0\1\u022b\232\0"+
    "\1\u022c\202\0\1\u022d\200\0\1\u022e\216\0\1\u022f\157\0"+
    "\1\u0230\3\0\1\u0231\206\0\1\u0232\166\0\1\u0233\7\0"+
    "\1\u0234\172\0\1\u0235\225\0\1\u0236\100\0\1\u0237\1\0"+
    "\1\u015c\16\0\1\u0238\21\0\1\u015e\16\0\1\u0239\53\0"+
    "\1\u015c\44\0\1\u023a\302\0\1\u023b\102\0\1\u0237\42\0"+
    "\1\u015e\137\0\1\u023a\42\0\1\u015e\170\0\1\u023c\240\0"+
    "\1\u023d\173\0\1\u01d2\211\0\1\u023e\172\0\1\u023f\206\0"+
    "\1\u0240\200\0\1\u0241\253\0\1\u0242\104\0\1\u0243\240\0"+
    "\1\u0244\154\0\1\u0245\233\0\1\u0246\170\0\1\u0247\217\0"+
    "\1\u0248\176\0\1\u0249\200\0\1\u024a\5\0\1\u024b\205\0"+
    "\1\u024c\176\0\1\u024d\2\0\1\u024e\173\0\1\357\4\0"+
    "\1\u024f\1\361\175\0\1\u0250\201\0\1\357\4\0\1\374"+
    "\1\375\174\0\1\357\5\0\1\375\176\0\1\u0251\173\0"+
    "\1\u0252\107\0\1\u0253\202\0\1\u0254\302\0\1\357\5\0"+
    "\1\361\146\0\1\u0255\6\0\1\u0256\202\0\1\u0256\162\0"+
    "\1\u0257\17\0\1\u0256\153\0\1\u0258\26\0\1\u0256\170\0"+
    "\1\u0259\11\0\1\u0256\147\0\1\u025a\41\0\1\u025b\123\0"+
    "\1\u012a\1\0\1\u012a\132\0\1\u012a\1\0\1\u012a\114\0"+
    "\1\u025c\5\0\1\u025d\163\0\1\u025e\22\0\1\u025f\16\0"+
    "\1\u0260\1\u012a\167\0\1\u0261\174\0\1\u0262\200\0\1\u012a"+
    "\172\0\1\13\23\0\1\u0263\161\0\1\u0264\177\0\1\136"+
    "\223\0\1\u0265\164\0\1\u0266\7\0\1\u0267\115\0\1\u025b"+
    "\1\0\2\u012a\46\0\1\13\202\0\1\13\11\0\1\u0268"+
    "\33\0\1\u012a\134\0\1\13\1\u025c\5\0\1\u0269\173\0"+
    "\1\13\12\0\1\u026a\167\0\1\13\224\0\1\u026b\110\0"+
    "\3\u012a\57\0\1\u0268\120\0\3\u012a\57\0\1\u026c\142\0"+
    "\1\u012a\30\0\5\u012a\111\0\1\13\5\0\1\u026d\4\0"+
    "\2\13\5\0\1\13\27\0\1\13\30\0\1\13\2\0"+
    "\1\13\5\0\1\13\154\0\1\u026e\223\0\1\u0157\176\0"+
    "\1\u026f\203\0\1\u0270\171\0\1\u0271\176\0\1\u0272\210\0"+
    "\1\u0273\172\0\1\u0273\210\0\1\u0274\207\0\1\u0157\212\0"+
    "\1\u0275\174\0\1\u0276\200\0\1\u0277\173\0\1\u0278\3\0"+
    "\1\u0279\207\0\1\u027a\4\0\1\u027b\176\0\1\u027c\165\0"+
    "\1\u027d\12\0\1\u027e\216\0\1\u027f\155\0\1\u0157\212\0"+
    "\1\u013a\7\0\1\u0157\173\0\1\u0157\211\0\1\u01b8\2\0"+
    "\1\u0280\176\0\1\u0281\160\0\1\u0282\221\0\1\u0153\163\0"+
    "\1\u0283\7\0\1\u0284\172\0\1\u0285\154\0\1\u018e\244\0"+
    "\1\u0286\204\0\1\u0287\4\0\1\u0288\163\0\1\u0289\202\0"+
    "\1\u028a\176\0\1\u028b\166\0\1\u028c\36\0\1\u028d\1\0"+
    "\1\u028e\176\0\1\u0157\125\0\1\u028f\252\0\1\u0290\203\0"+
    "\1\u0291\173\0\1\u0292\17\0\1\u0293\177\0\1\u0294\3\0"+
    "\1\u0295\153\0\1\u0284\2\0\1\u0296\214\0\1\u0295\170\0"+
    "\1\13\203\0\1\u0297\221\0\1\u0298\200\0\1\u0299\1\0"+
    "\1\u0157\204\0\1\u0157\155\0\1\u029a\206\0\1\u029b\214\0"+
    "\1\u029c\174\0\1\u029d\200\0\1\u029e\7\0\1\u0142\177\0"+
    "\1\u029f\204\0\1\u02a0\163\0\1\u02a1\1\0\1\u0139\4\0"+
    "\1\u0157\6\0\1\u02a2\204\0\1\13\210\0\1\u02a3\1\0"+
    "\1\u02a4\160\0\1\u01a4\174\0\1\u02a5\224\0\1\u0157\2\0"+
    "\1\u02a6\157\0\1\u02a7\210\0\1\u02a8\6\0\1\u027b\165\0"+
    "\1\u02a9\215\0\1\u02aa\210\0\1\u02ab\2\0\1\u02ac\156\0"+
    "\1\u02ad\2\0\1\u02ae\200\0\1\u0157\12\0\1\u0157\203\0"+
    "\1\u027b\6\0\1\13\162\0\1\u02af\212\0\1\u02b0\152\0"+
    "\1\u02b1\232\0\1\u02b2\203\0\1\u02b3\60\0\2\u02b3\103\0"+
    "\1\u02b4\16\0\1\u0293\125\0\1\u02b5\261\0\1\u02b6\161\0"+
    "\1\u02b7\202\0\1\u02b8\220\0\1\u02b9\141\0\1\u02ba\153\0"+
    "\1\13\133\0\2\13\44\0\6\u02bb\174\0\1\u02bc\6\u02bd"+
    "\2\u02bc\173\0\6\u02be\173\0\1\220\221\0\32\u02bf\27\0"+
    "\1\u02c0\23\0\1\u02bf\57\0\11\165\256\0\1\u02c1\173\0"+
    "\1\u0241\216\0\1\u02ab\206\0\1\u0284\157\0\1\u02c2\31\0"+
    "\1\13\5\0\1\13\142\0\1\u02c2\37\0\1\13\72\0"+
    "\1\u0193\175\0\1\u0103\26\0\1\u02c3\31\0\1\244\14\0"+
    "\1\244\204\0\1\u01a6\50\0\1\u02c4\33\0\1\u02c5\133\0"+
    "\1\u02c6\126\0\1\u02c7\220\0\1\u02c8\66\0\1\u02c9\316\0"+
    "\1\u02ca\207\0\1\u02cb\100\0\11\u02cc\100\0\1\u02cd\166\0"+
    "\1\u02ce\161\0\1\u02cf\202\0\1\u02d0\166\0\1\13\220\0"+
    "\1\13\205\0\1\u0157\135\0\1\u02d1\242\0\1\u01a3\215\0"+
    "\1\u02d2\171\0\1\u02d3\203\0\1\u02d4\202\0\1\u02d5\166\0"+
    "\1\u02d6\173\0\1\13\231\0\1\u02d7\107\0\1\13\17\0"+
    "\1\u02d8\7\0\1\u02d9\14\0\1\u02da\243\0\1\u02db\124\0"+
    "\1\u02dc\204\0\1\u0216\224\0\1\u02dd\224\0\1\u02de\172\0"+
    "\1\u02df\204\0\1\u0216\201\0\1\u02e0\216\0\1\u02e1\211\0"+
    "\1\u02e2\141\0\1\u02e3\201\0\1\u02e4\220\0\1\u02e5\200\0"+
    "\1\u02e6\204\0\1\u02e7\142\0\1\u02e8\2\0\1\u02e9\3\0"+
    "\1\u02ea\3\0\1\u02eb\7\0\1\u02ec\232\0\1\u02ed\206\0"+
    "\1\u02ee\211\0\1\u01c4\162\0\1\u02ef\77\0\1\u0183\251\0"+
    "\1\u01fa\142\0\1\u02f0\300\0\1\u02f1\211\0\1\u02f2\150\0"+
    "\1\u02f3\33\0\1\u02f4\163\0\1\u02f5\202\0\1\u02f6\204\0"+
    "\1\u02f7\213\0\1\u02f8\104\0\1\u02f9\307\0\1\u02fa\160\0"+
    "\1\u02fb\136\0\1\u017a\130\0\1\u017a\113\0\1\u02fc\163\0"+
    "\1\u01f4\35\0\1\u02fd\125\0\1\u02fe\251\0\1\u01c6\74\0"+
    "\1\u01d2\275\0\1\u02ff\207\0\1\u0300\7\0\1\u01d8\101\0"+
    "\1\u0301\301\0\1\u0302\171\0\1\u01d2\124\0\11\13\240\0"+
    "\1\u0216\156\0\1\u02dd\23\0\1\u0216\211\0\1\u0303\115\0"+
    "\1\u02f0\27\0\1\u0304\254\0\1\u0305\203\0\1\u0306\10\0"+
    "\1\u0216\156\0\1\u02e2\23\0\1\u0216\155\0\1\u0307\222\0"+
    "\1\u0308\167\0\1\u0309\200\0\1\u030a\213\0\1\u030b\207\0"+
    "\1\u030c\162\0\1\u030d\153\0\1\u030e\210\0\1\u030f\223\0"+
    "\1\u0310\103\0\1\u0311\260\0\1\u0312\20\0\1\u01c6\221\0"+
    "\1\u0313\163\0\1\u0314\206\0\1\u0315\205\0\1\u0316\210\0"+
    "\1\u0317\127\0\1\u0318\205\0\1\u0319\201\0\1\u01ef\236\0"+
    "\1\u031a\222\0\1\u031b\177\0\1\u031c\102\0\1\u031d\26\0"+
    "\1\u01f7\256\0\1\u01c6\121\0\1\u031e\267\0\1\u0216\166\0"+
    "\1\u031f\145\0\1\u0320\231\0\1\u0275\211\0\1\u0321\202\0"+
    "\1\u0322\204\0\1\u0323\212\0\2\u0157\152\0\1\u0324\225\0"+
    "\1\u0325\201\0\1\u0326\203\0\1\u0327\143\0\1\u0328\215\0"+
    "\1\u0329\203\0\1\u032a\217\0\1\u032b\201\0\1\u032c\132\0"+
    "\1\u032d\13\0\1\u032e\225\0\1\275\15\0\1\u032f\163\0"+
    "\1\u0330\20\0\1\u0331\200\0\1\u0157\1\0\1\u0332\23\0"+
    "\1\u0157\104\0\1\252\241\0\1\u0333\205\0\1\13\167\0"+
    "\1\u0334\22\0\1\u0335\125\0\1\u0336\240\0\1\u0337\222\0"+
    "\1\u0338\72\0\1\u0339\253\0\1\u033a\240\0\1\u033b\163\0"+
    "\1\u033c\201\0\1\u01c6\223\0\1\u033d\144\0\1\u033e\217\0"+
    "\1\u033f\213\0\1\u0340\212\0\1\u0341\201\0\1\u0342\176\0"+
    "\1\u01d2\1\0\1\u0343\105\0\11\u0344\53\0\1\u0345\176\0"+
    "\1\u0346\221\0\1\u0347\165\0\1\u0348\146\0\1\u0349\11\0"+
    "\1\u015e\241\0\1\u034a\174\0\1\u034b\167\0\1\u034c\12\0"+
    "\1\13\171\0\1\u01d2\225\0\1\141\170\0\1\141\167\0"+
    "\1\u034d\204\0\1\u034e\123\0\1\141\134\0\1\141\141\0"+
    "\1\207\177\0\1\u034f\246\0\1\141\143\0\1\u0350\144\0"+
    "\1\u01b2\240\0\1\u02c8\172\0\1\u0351\7\0\1\u01b6\161\0"+
    "\1\u0352\222\0\1\141\173\0\1\141\144\0\1\u0353\240\0"+
    "\1\u0354\173\0\1\u0355\225\0\1\u01d2\155\0\1\u0356\200\0"+
    "\1\u0357\225\0\1\u0358\175\0\1\u0359\170\0\1\u035a\176\0"+
    "\1\u035b\226\0\1\u035c\156\0\1\u035d\212\0\1\u035e\156\0"+
    "\1\u015e\232\0\1\u035f\172\0\1\u0360\213\0\1\u0361\60\0"+
    "\2\u0362\120\0\1\u0362\60\0\2\u0362\70\0\1\u0363\157\0"+
    "\1\u0364\204\0\1\u012a\200\0\1\u0365\225\0\1\u0366\220\0"+
    "\1\u012a\125\0\1\u012a\262\0\1\u0367\136\0\1\u0368\246\0"+
    "\1\u0369\121\0\2\u012a\46\0\1\13\21\0\1\u012a\106\0"+
    "\1\u025b\267\0\1\u036a\213\0\1\u036b\163\0\1\u036c\226\0"+
    "\1\u036d\203\0\1\u036e\170\0\1\u036e\165\0\1\u036f\204\0"+
    "\1\u0370\206\0\1\u0371\213\0\1\u036d\163\0\1\u0372\127\0"+
    "\1\13\265\0\1\13\64\0\1\13\127\0\1\u0373\167\0"+
    "\1\u0275\206\0\1\u0374\171\0\1\u0132\17\0\1\u0136\1\u0137"+
    "\174\0\1\u0373\201\0\1\u0375\166\0\1\13\220\0\1\u0376"+
    "\167\0\1\u0377\201\0\1\u0378\176\0\1\u0379\37\0\1\u0193"+
    "\155\0\1\u0157\105\0\1\u0194\61\0\1\u037a\10\0\1\u037b"+
    "\50\0\1\u037c\144\0\1\u037d\164\0\1\u037e\162\0\1\u037f"+
    "\176\0\1\u0380\237\0\1\u0381\175\0\1\u0382\205\0\1\u0383"+
    "\216\0\1\u0157\170\0\1\u0157\206\0\1\u02ab\175\0\1\u0275"+
    "\202\0\1\u0384\133\0\1\u0385\6\0\1\u0386\10\0\1\u0387"+
    "\221\0\1\u0388\213\0\1\u0389\173\0\1\u0157\217\0\1\u038a"+
    "\73\0\1\u0194\67\0\1\u038b\141\0\1\u038c\13\0\1\u038d"+
    "\5\0\1\u0383\16\0\1\u038e\211\0\1\u038f\170\0\1\u0390"+
    "\207\0\1\u0391\110\0\1\u0194\26\0\1\u0392\243\0\1\u0393"+
    "\205\0\1\u0394\107\0\1\u0194\54\0\2\13\220\0\1\u0395"+
    "\213\0\1\u0396\161\0\1\u0397\216\0\1\u0398\211\0\1\u0399"+
    "\161\0\1\u039a\223\0\1\u039b\201\0\1\u039c\174\0\1\13"+
    "\107\0\1\u039d\264\0\1\u039e\222\0\1\u039f\23\0\1\u026e"+
    "\133\0\1\u03a0\217\0\1\u0142\104\0\1\u0157\44\0\1\u03a1"+
    "\265\0\1\u03a2\100\0\1\u03a3\17\0\1\u03a4\236\0\1\u03a5"+
    "\175\0\1\u03a6\201\0\1\u03a7\214\0\1\u0374\200\0\1\u0157"+
    "\157\0\1\u03a8\223\0\1\u03a9\126\0\1\u03aa\260\0\1\u03ab"+
    "\163\0\1\u03ac\221\0\1\u03ad\156\0\1\u03ae\120\0\1\13"+
    "\1\0\1\u03af\1\0\1\u03b0\34\0\1\u03b1\245\0\1\u03b2"+
    "\210\0\1\u03b3\163\0\1\u03b4\215\0\1\u03b5\200\0\1\u03b6"+
    "\177\0\1\u02d3\174\0\1\u03b7\157\0\1\u03b8\251\0\1\u0101"+
    "\133\0\1\u03b8\46\0\1\u0101\202\0\1\u016d\110\0\32\u03b9"+
    "\27\0\1\u03ba\23\0\1\u03b9\142\0\1\u03bb\215\0\1\u02ab"+
    "\106\0\1\13\234\0\1\u03bc\313\0\1\u02d1\114\0\1\u03bd"+
    "\202\0\1\u03be\104\0\1\u03bf\202\0\1\13\202\0\1\u03c0"+
    "\211\0\1\u0194\2\0\1\u0157\207\0\11\u02cc\264\0\1\u03c1"+
    "\205\0\1\u03c2\175\0\1\u03c3\133\0\1\13\235\0\1\u0393"+
    "\225\0\1\13\115\0\1\u03c4\202\0\1\u03c5\206\0\1\u0383"+
    "\250\0\1\u03c6\122\0\1\u03c7\270\0\1\u03c8\205\0\1\u03c9"+
    "\141\0\1\u03ca\176\0\1\u0216\205\0\1\u0216\231\0\1\u03cb"+
    "\206\0\1\u0216\174\0\1\u03cc\211\0\1\u02b9\204\0\1\u0216"+
    "\133\0\1\u03cd\220\0\1\u03ce\231\0\1\u03cf\210\0\1\u03d0"+
    "\173\0\1\u02fd\203\0\1\u03d1\210\0\1\u03d2\177\0\1\356"+
    "\174\0\1\u0346\172\0\1\u03d3\206\0\1\u03d4\201\0\1\u03d5"+
    "\201\0\1\u03d6\150\0\1\u01f7\236\0\1\u0232\176\0\1\u03d7"+
    "\202\0\1\122\217\0\1\u03d8\167\0\1\u03d9\215\0\1\u03da"+
    "\72\0\1\u01d2\42\0\1\u03db\14\0\1\u03dc\202\0\1\u03dd"+
    "\164\0\1\u01d8\2\0\1\u03de\205\0\1\u03df\46\0\1\u03e0"+
    "\136\0\1\u03e1\143\0\1\u03e2\304\0\1\u01d2\164\0\1\u01d8"+
    "\161\0\1\u03e3\216\0\1\u03e4\202\0\1\u03e5\107\0\1\u03e6"+
    "\304\0\1\u03e7\140\0\1\u03e8\7\0\1\u03e9\2\0\1\u03ea"+
    "\240\0\1\u03eb\215\0\1\u03ec\155\0\1\u01de\213\0\1\u03ed"+
    "\210\0\1\u01d8\200\0\1\u03ee\147\0\1\u01b2\156\0\1\u01df"+
    "\3\0\1\u01df\247\0\1\u03d5\173\0\1\u03ef\136\0\1\u03f0"+
    "\130\0\1\u03f0\117\0\1\u02c8\216\0\1\u03f1\204\0\1\u01b6"+
    "\156\0\1\u0201\3\0\1\u0201\155\0\1\u03f2\204\0\1\u03f3"+
    "\236\0\1\u03f4\165\0\1\u03f5\142\0\1\u03f6\130\0\1\u03f6"+
    "\67\0\1\u03f7\242\0\1\u03f8\145\0\1\u03f9\16\0\1\u0341"+
    "\152\0\1\u01b2\207\0\1\u03fa\233\0\1\u01b6\220\0\1\u03fb"+
    "\172\0\1\u01d2\172\0\1\u03fc\202\0\1\u01d8\123\0\3\u01c6"+
    "\34\0\1\u03fd\35\0\1\247\174\0\1\u03fe\131\0\1\u03ff"+
    "\2\0\1\u0400\255\0\1\u0401\204\0\1\u0402\176\0\1\u030c"+
    "\172\0\1\u0403\200\0\1\u0404\7\0\1\u01c6\210\0\1\u0405"+
    "\171\0\1\u0406\75\0\1\u0407\304\0\1\u0408\173\0\1\u0409"+
    "\215\0\1\u040a\137\0\1\u040b\214\0\1\13\220\0\1\u040c"+
    "\223\0\1\u0409\176\0\1\u040d\60\0\2\u040d\73\0\1\u040e"+
    "\235\0\1\u0293\161\0\1\u040f\204\0\1\u0410\215\0\1\u0411"+
    "\167\0\1\u0412\176\0\1\u0413\215\0\1\u01d2\131\0\1\u01c6"+
    "\2\0\1\u01c6\241\0\1\u0414\213\0\1\u0415\207\0\1\u023d"+
    "\164\0\1\u0416\202\0\1\u0417\213\0\1\u0418\101\0\1\u02f0"+
    "\27\0\1\u0419\250\0\1\u01d2\174\0\1\u041a\215\0\1\141"+
    "\70\0\1\u041b\305\0\1\u041c\176\0\1\u041d\221\0\1\141"+
    "\137\0\1\u041e\240\0\1\u041f\206\0\1\u040f\170\0\1\u0420"+
    "\174\0\1\u0421\204\0\1\u0422\221\0\1\u0423\204\0\1\u0424"+
    "\160\0\1\u0425\177\0\1\u0426\217\0\1\u0427\173\0\1\u01d2"+
    "\101\0\1\u0428\41\0\1\u0429\13\0\1\u042a\1\u042b\241\0"+
    "\1\u042c\135\0\1\u03b1\35\0\1\u03b1\144\0\1\u03b1\204\0"+
    "\1\u012a\206\0\1\u042d\162\0\1\u042e\207\0\1\u042f\177\0"+
    "\1\u0430\221\0\1\u0431\231\0\1\u0432\164\0\1\u025c\222\0"+
    "\1\u0433\207\0\1\u036b\163\0\1\u0434\167\0\2\u012a\233\0"+
    "\1\u0435\203\0\1\u0436\172\0\1\u0437\211\0\1\u012a\73\0"+
    "\1\u0194\72\0\1\u0157\177\0\1\u0157\202\0\1\u018e\212\0"+
    "\1\u0438\171\0\1\u0439\20\0\1\u043a\170\0\1\u043b\116\0"+
    "\1\u043c\175\0\1\u043d\175\0\1\u0194\61\0\1\u037a\61\0"+
    "\1\u037c\162\0\1\u0157\164\0\1\u01b8\201\0\1\u043e\205\0"+
    "\1\u0144\163\0\1\u043f\175\0\1\u02b4\215\0\1\u0440\103\0"+
    "\1\13\272\0\1\u0441\176\0\1\u0442\22\0\1\u0443\163\0"+
    "\1\u0444\206\0\1\u0445\3\0\1\u0443\200\0\1\u0446\213\0"+
    "\1\u0447\200\0\1\u0448\167\0\1\u0449\204\0\1\u044a\210\0"+
    "\1\u044b\205\0\1\u044c\177\0\1\u044d\167\0\1\u0275\222\0"+
    "\1\u044e\121\0\1\u044f\261\0\1\13\200\0\1\u0450\163\0"+
    "\1\u0284\212\0\1\u0160\213\0\1\u0352\161\0\1\u0451\264\0"+
    "\2\13\123\0\1\u0452\200\0\1\u0453\1\u02b9\16\0\1\u0454"+
    "\1\u0455\201\0\1\u0456\145\0\1\u0457\160\0\1\u0458\6\0"+
    "\1\u0459\3\0\1\u0157\1\u038d\232\0\1\u045a\203\0\1\u045b"+
    "\220\0\1\u045c\251\0\1\13\105\0\1\u045d\22\0\1\u045e"+
    "\167\0\1\u045f\3\0\1\u045e\205\0\1\u0460\163\0\1\u0461"+
    "\215\0\1\u0462\210\0\1\u0463\204\0\1\u0464\163\0\1\u0160"+
    "\176\0\1\u0465\146\0\1\u0466\257\0\1\u0467\130\0\1\u0468"+
    "\2\0\1\u0469\4\0\1\13\1\0\1\u046a\116\0\1\13"+
    "\27\0\1\u046b\202\0\2\u046b\264\0\1\u046c\213\0\1\u046d"+
    "\165\0\1\u046e\176\0\1\u046f\214\0\1\13\205\0\1\u0470"+
    "\221\0\1\u0242\110\0\32\u0471\27\0\1\u0472\23\0\1\u0471"+
    "\142\0\1\u0473\177\0\1\u0474\145\0\1\u0475\325\0\1\u0476"+
    "\202\0\1\u0477\127\0\1\u0478\70\0\1\u0479\314\0\1\u047a"+
    "\123\0\1\u047b\202\0\1\u047c\267\0\1\u047d\121\0\1\u047e"+
    "\252\0\1\u047f\174\0\1\u029e\201\0\1\u0480\7\0\1\u0481"+
    "\206\0\1\u0482\202\0\1\u0483\144\0\1\13\171\0\1\230"+
    "\234\0\1\u01c6\103\0\1\u0484\310\0\1\u0485\167\0\1\u0486"+
    "\203\0\1\u0487\203\0\1\u0488\160\0\1\u03ea\205\0\1\u0489"+
    "\240\0\1\u01d8\164\0\1\u048a\222\0\1\u048b\175\0\1\u048c"+
    "\205\0\1\u048d\161\0\1\u048e\211\0\1\u048f\210\0\1\u0490"+
    "\175\0\1\u0491\215\0\1\u0492\164\0\1\u0493\7\0\1\13"+
    "\127\0\1\u0494\242\0\1\u0495\206\0\1\u0496\207\0\1\u0497"+
    "\133\0\1\u0419\17\0\1\u0498\234\0\1\u030c\174\0\1\u0499"+
    "\177\0\1\u0480\7\0\1\u01d2\173\0\1\u049a\212\0\1\u049b"+
    "\207\0\1\u048a\202\0\1\u049c\165\0\1\u049d\210\0\1\u049e"+
    "\211\0\1\u049f\144\0\1\u04a0\200\0\1\u04a1\242\0\1\u04a2"+
    "\172\0\1\u04a3\202\0\1\u04a4\173\0\1\u04a5\225\0\1\u01b8"+
    "\174\0\1\u04a6\171\0\1\u04a7\215\0\1\u01c6\64\0\1\u04a8"+
    "\320\0\1\u04a9\172\0\1\u04aa\175\0\1\u04ab\211\0\1\u015c"+
    "\165\0\1\u04ac\207\0\1\u01c6\160\0\1\u0489\24\0\1\u04ad"+
    "\153\0\1\u04ae\167\0\1\u04af\240\0\1\u04b0\213\0\1\u01d2"+
    "\200\0\1\u0414\133\0\1\u01d2\261\0\1\u04b1\74\0\1\13"+
    "\1\0\1\u03b0\235\0\1\u04b2\253\0\1\u0383\174\0\1\u04b3"+
    "\133\0\1\u04b4\150\0\1\u02f0\32\0\1\u0383\7\0\1\u04b5"+
    "\17\0\1\u040f\2\0\1\u04b6\47\0\1\u04b7\20\0\1\u0383"+
    "\5\0\1\u0383\15\0\1\13\35\0\1\u018e\6\0\1\u018f"+
    "\171\0\1\u04b8\10\0\1\u04b9\227\0\1\u04ba\215\0\1\u04bb"+
    "\176\0\1\u03fb\204\0\1\u04bc\201\0\1\u04bd\150\0\1\361"+
    "\162\0\1\u04be\240\0\1\u04bf\105\0\1\u04c0\265\0\1\u0216"+
    "\240\0\1\u0216\170\0\1\u04c1\113\0\1\u04c2\263\0\1\u04c3"+
    "\12\0\1\u04bb\145\0\1\u03fd\226\0\1\u04c4\213\0\1\u04c5"+
    "\202\0\1\u0232\164\0\1\u04c6\151\0\1\u0409\5\0\1\u04c7"+
    "\232\0\1\u02d3\174\0\1\u0341\223\0\1\u04c8\157\0\1\u0114"+
    "\166\0\1\u04c9\137\0\1\u04ca\53\0\1\13\166\0\1\u04cb"+
    "\203\0\1\u012a\210\0\1\u04cc\212\0\1\u04cd\223\0\1\u04ce"+
    "\202\0\1\u012a\106\0\2\u012a\46\0\1\13\226\0\1\u04cf"+
    "\161\0\1\u04d0\220\0\1\u04d1\203\0\1\u0381\150\0\1\u04d2"+
    "\142\0\1\u0157\273\0\1\u04d3\154\0\1\u04d4\230\0\1\u04ab"+
    "\207\0\1\u0438\202\0\1\u0470\126\0\1\u04d5\14\0\1\u04d6"+
    "\246\0\1\u04d7\166\0\1\u0470\165\0\1\u04d8\213\0\1\u04d9"+
    "\202\0\1\u04da\213\0\1\u04db\176\0\1\u04dc\206\0\1\u0144"+
    "\204\0\1\u04dd\161\0\1\u04de\207\0\1\u0157\157\0\1\u04df"+
    "\237\0\1\u04e0\174\0\1\u0438\157\0\1\u04e1\35\0\1\u04e1"+
    "\175\0\1\u04e2\201\0\1\u04e3\172\0\1\u04e4\210\0\1\u04e5"+
    "\170\0\1\u02c1\206\0\1\u0284\207\0\1\u04e6\171\0\1\u04e7"+
    "\213\0\1\u04e8\165\0\1\u04e9\225\0\1\u04ea\126\0\1\u04eb"+
    "\247\0\1\u04ea\210\0\1\13\207\0\2\u04ec\76\0\1\13"+
    "\1\u04ed\7\13\20\0\1\13\7\0\1\13\221\0\1\u04ee"+
    "\163\0\1\u04ef\173\0\1\357\43\0\1\361\175\0\1\u04f0"+
    "\175\0\1\u04f1\161\0\1\13\124\0\1\13\260\0\1\13"+
    "\24\0\1\u02d3\103\0\1\13\302\0\1\u04f2\203\0\1\u04f3"+
    "\206\0\1\u01d2\175\0\1\u04f4\171\0\1\13\140\0\32\u04f5"+
    "\27\0\1\u04f6\23\0\1\u04f5\142\0\1\u04f7\177\0\1\u04f8"+
    "\221\0\1\u04f9\100\0\1\u0103\352\0\1\u047b\202\0\1\u047c"+
    "\104\0\1\u04fa\173\0\1\u04fb\165\0\1\350\15\0\1\u04fc"+
    "\5\0\1\u04fa\77\0\1\350\5\0\1\350\67\0\1\u04fd"+
    "\202\0\1\u04fe\220\0\1\u02c8\144\0\1\u04ff\12\0\1\u02da"+
    "\240\0\1\u0383\170\0\1\u01d2\213\0\1\u0500\130\0\1\u0501"+
    "\204\0\1\u0502\211\0\1\u0503\253\0\1\u01d2\167\0\1\u0470"+
    "\212\0\1\u0504\163\0\1\u0505\140\0\1\u0506\202\0\1\u0507"+
    "\262\0\1\u0508\160\0\1\u0509\203\0\1\u050a\211\0\1\u0231"+
    "\217\0\1\u01d8\156\0\1\u02c8\205\0\1\u050b\203\0\1\13"+
    "\156\0\1\u050c\242\0\1\u050d\165\0\1\u050e\200\0\1\u0383"+
    "\223\0\1\u050f\174\0\1\u047d\206\0\1\u0510\176\0\1\u0511"+
    "\72\0\1\u0512\211\0\1\u0513\50\0\1\u04fc\215\0\1\u0514"+
    "\212\0\1\u0515\134\0\1\u0216\212\0\1\u0516\230\0\1\u0216"+
    "\123\0\1\u0517\271\0\1\u0518\175\0\1\u02c8\215\0\1\u0519"+
    "\165\0\1\u0383\156\0\1\u051a\225\0\1\u0397\3\0\1\u034e"+
    "\221\0\1\u02c2\174\0\1\13\202\0\1\u051b\200\0\1\u051c"+
    "\202\0\1\u051d\172\0\1\u051e\222\0\1\u051f\64\0\1\u0520"+
    "\270\0\1\u0521\232\0\1\u0522\162\0\1\u0523\215\0\1\u0524"+
    "\173\0\1\u0525\171\0\1\u0526\37\0\1\u0383\111\0\1\u0527"+
    "\245\0\1\u0528\132\0\1\u0529\130\0\1\u0529\136\0\1\u052a"+
    "\201\0\1\u0352\171\0\1\u052b\202\0\1\u052c\167\0\1\u052d"+
    "\202\0\1\u0341\125\0\1\u052e\133\0\1\u052e\127\0\1\u052f"+
    "\214\0\1\u0530\164\0\1\u0531\202\0\1\u0532\226\0\1\u02ff"+
    "\156\0\1\u02ff\15\0\1\u01d2\136\0\1\u0258\172\0\1\u0533"+
    "\223\0\1\u0534\171\0\1\u0535\257\0\1\u0536\1\u0537\130\0"+
    "\1\u0538\5\0\1\u0538\16\0\1\u0120\221\0\1\u0539\207\0"+
    "\2\u012a\200\0\1\u0280\170\0\1\u053a\204\0\1\u02ab\176\0"+
    "\1\u0383\204\0\1\u02d3\211\0\1\u053a\176\0\1\320\206\0"+
    "\1\u053b\174\0\1\u028b\165\0\1\u0219\220\0\1\u053c\170\0"+
    "\1\u053d\210\0\1\u053e\136\0\1\u0383\244\0\1\u053f\202\0"+
    "\1\u0540\210\0\1\u0541\210\0\1\u0542\173\0\1\u0543\202\0"+
    "\1\u0438\210\0\1\u0544\202\0\1\u0545\162\0\1\u0546\216\0"+
    "\1\u0157\167\0\1\u0383\212\0\1\u040f\224\0\1\13\70\0"+
    "\1\13\275\0\1\u02e1\1\0\1\u0182\175\0\1\u0393\213\0"+
    "\1\u0383\172\0\1\u0547\102\0\1\141\313\0\1\13\156\0"+
    "\1\u0374\142\0\32\267\27\0\1\u0548\23\0\1\267\142\0"+
    "\1\u0549\177\0\1\u054a\221\0\1\u054b\157\0\1\u02bf\154\0"+
    "\1\u054c\12\0\1\u0245\240\0\1\u054d\131\0\1\u054e\12\0"+
    "\1\u022b\232\0\1\u054f\202\0\1\u0550\146\0\1\u02da\245\0"+
    "\1\u0551\174\0\1\u0552\201\0\1\u0553\175\0\1\u0554\176\0"+
    "\1\u0555\204\0\1\u01d8\216\0\1\u034c\1\0\1\u0556\200\0"+
    "\1\u0557\203\0\1\u0558\176\0\1\u0559\176\0\1\u0232\74\0"+
    "\1\u055a\256\0\1\u055b\225\0\1\u055c\142\0\1\u055d\266\0"+
    "\1\u055e\152\0\1\u029e\225\0\1\u04bf\123\0\1\u055f\10\0"+
    "\1\u0560\225\0\1\u0561\225\0\1\u0562\161\0\1\u02c8\157\0"+
    "\1\252\172\0\1\370\255\0\1\u03fb\161\0\1\u0563\211\0"+
    "\1\u0564\200\0\1\u03cf\200\0\1\u0565\214\0\1\u0566\174\0"+
    "\1\u0567\172\0\1\u0157\144\0\1\u0568\250\0\1\u04c1\202\0"+
    "\1\u0569\213\0\1\u053c\171\0\1\u04b7\120\0\1\u0383\217\0"+
    "\1\u01d8\241\0\1\u01d8\146\0\1\u056a\234\0\1\u056b\220\0"+
    "\1\u0562\170\0\1\u02d2\211\0\1\u01d8\114\0\1\u056c\4\13"+
    "\2\0\1\13\267\0\1\u01d2\205\0\1\u046e\173\0\1\u056d"+
    "\206\0\1\u0555\142\0\1\u056e\173\0\1\u056f\223\0\1\u0570"+
    "\204\0\1\13\1\u025c\31\0\1\u012a\147\0\1\13\1\u025c"+
    "\170\0\1\u012a\226\0\1\u0571\213\0\1\u0383\211\0\1\u0157"+
    "\166\0\1\u0383\171\0\1\u0572\157\0\1\u04ab\237\0\1\u0573"+
    "\207\0\1\u04ea\202\0\1\u0460\160\0\1\u0574\232\0\1\u0575"+
    "\66\0\1\u0194\42\0\1\u0576\223\0\1\u026e\206\0\1\u0153"+
    "\204\0\1\u0383\203\0\1\u0577\177\0\1\u0578\221\0\1\u0579"+
    "\157\0\1\u03b9\217\0\1\u040f\165\0\1\u057a\217\0\1\u023d"+
    "\110\0\1\u015c\336\0\1\u015c\140\0\1\u057b\200\0\1\u057c"+
    "\212\0\1\u057d\201\0\1\u057e\163\0\1\u01d2\222\0\1\u057f"+
    "\207\0\1\u0580\162\0\1\u0581\201\0\1\u01d2\154\0\1\u0582"+
    "\204\0\1\u0583\223\0\1\u0409\214\0\1\u0584\177\0\1\u04ea"+
    "\205\0\1\u0585\174\0\1\u0586\111\0\1\u0587\107\0\1\u0588"+
    "\174\0\1\u01c6\142\0\1\u02e1\236\0\1\u0589\207\0\1\u058a"+
    "\203\0\1\u058b\202\0\1\u058c\142\0\1\u058d\242\0\1\u057c"+
    "\177\0\1\u058e\175\0\1\u02c8\212\0\1\u026d\140\0\1\u058f"+
    "\200\0\1\u0590\165\0\1\u0591\265\0\1\u0592\161\0\1\u0593"+
    "\221\0\1\u0594\200\0\1\u0470\164\0\1\u02b9\215\0\1\u0595"+
    "\170\0\1\u0596\221\0\1\u0597\157\0\1\u0471\225\0\1\u0598"+
    "\162\0\1\u0599\215\0\1\u019a\205\0\1\u059a\204\0\1\u0460"+
    "\175\0\1\u01d2\200\0\1\u02fd\170\0\1\u02fd\221\0\1\u0308"+
    "\141\0\1\u059b\235\0\1\u059c\203\0\1\u059d\203\0\1\u059e"+
    "\166\0\1\u059f\120\0\1\u05a0\267\0\1\u05a1\103\0\1\u05a2"+
    "\207\0\1\u05a3\306\0\1\u0393\131\0\1\u05a4\261\0\1\u0383"+
    "\141\0\1\u05a5\204\0\1\u012a\200\0\1\u05a6\223\0\1\u05a7"+
    "\216\0\1\u05a8\163\0\1\u05a9\164\0\1\u05aa\242\0\1\u05ab"+
    "\157\0\1\u04f5\224\0\1\u02c8\140\0\1\u05ac\232\0\1\u05ad"+
    "\163\0\1\13\224\0\1\202\203\0\1\u05ae\172\0\1\u05af"+
    "\225\0\1\u05b0\154\0\1\u05b0\106\0\1\u05b1\261\0\1\u05b2"+
    "\165\0\1\u05b3\140\0\1\u05b4\255\0\1\u05b5\167\0\1\u05b6"+
    "\252\0\1\u012a\211\0\1\u04db\174\0\1\u05b7\170\0\1\u047f"+
    "\176\0\1\267\207\0\1\u0493\7\0\1\u02c8\171\0\1\u0460"+
    "\202\0\1\u05b8\103\0\1\u05b9\212\0\1\u02c8\230\0\1\u05ba"+
    "\243\0\1\u05bb\206\0\1\u05bc\152\0\1\u05bd\213\0\1\u012a"+
    "\116\0\1\u05be\324\0\1\13\170\0\1\u05bf\127\0\1\u05c0"+
    "\244\0\1\u05c1\221\0\1\u05c2\202\0\1\u05c3\126\0\1\u05c4"+
    "\7\0\1\13\203\0\1\u05c5\245\0\1\u05af\160\0\1\u05c6"+
    "\214\0\1\u046d\212\0\1\u05c7\100\0\1\u021b\230\0\1\13"+
    "\202\0\1\u05c8\7\0\1\u012a\241\0\1\u05c9\174\0\1\u05ca"+
    "\141\0\1\u012a\260\0\1\u0470\172\0\1\u05cb\173\0\1\u05cc"+
    "\116\0\1\u05cd\133\0\1\13\46\0\1\164\157\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[186151];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\4\11\1\1\2\11"+
    "\6\1\1\11\1\1\1\11\12\1\1\11\20\1\1\11"+
    "\27\1\1\11\20\1\1\11\2\1\1\11\3\1\2\11"+
    "\1\1\1\11\1\1\1\0\1\11\2\1\4\0\1\11"+
    "\2\0\2\1\2\0\1\1\1\0\2\11\72\0\1\11"+
    "\57\0\1\1\31\0\1\11\1\1\137\0\1\1\12\0"+
    "\1\11\26\0\1\1\4\0\1\1\1\11\5\0\2\1"+
    "\1\0\1\1\1\11\2\0\2\11\24\0\1\11\40\0"+
    "\1\1\2\0\2\11\26\0\1\11\24\0\1\1\27\0"+
    "\1\11\14\0\1\1\36\0\1\11\23\0\1\11\42\0"+
    "\1\1\105\0\1\1\11\0\1\11\2\0\1\1\43\0"+
    "\1\11\12\0\1\11\2\0\1\1\2\0\1\11\1\1"+
    "\16\0\1\11\62\0\1\11\6\0\1\11\115\0\1\1"+
    "\4\0\1\1\32\0\1\1\5\0\2\11\45\0\1\11"+
    "\5\0\1\1\24\0\1\1\21\0\1\1\6\0\1\1"+
    "\106\0\1\1\3\0\1\1\13\0\1\1\17\0\1\1"+
    "\76\0\1\11\26\0\1\11\25\0\1\1\7\0\1\1"+
    "\52\0\1\11\255\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TIBasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }  // fall though
            case 1486: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 60: break;
          case 2:
            { return TIBasicTypes.CRLF;
            }
          // fall through
          case 61: break;
          case 3:
            { return TIBasicTypes.TOKEN;
            }
          // fall through
          case 62: break;
          case 4:
            { yybegin(STRING);
            }
          // fall through
          case 63: break;
          case 5:
            { return TIBasicTypes.LPAREN;
            }
          // fall through
          case 64: break;
          case 6:
            { return TIBasicTypes.RPAREN;
            }
          // fall through
          case 65: break;
          case 7:
            { return TIBasicTypes.TIMES;
            }
          // fall through
          case 66: break;
          case 8:
            { return TIBasicTypes.PLUS;
            }
          // fall through
          case 67: break;
          case 9:
            { return TIBasicTypes.COMMA;
            }
          // fall through
          case 68: break;
          case 10:
            { return TIBasicTypes.MINUS;
            }
          // fall through
          case 69: break;
          case 11:
            { return TIBasicTypes.DIVIDE;
            }
          // fall through
          case 70: break;
          case 12:
            { return TIBasicTypes.NUMBER;
            }
          // fall through
          case 71: break;
          case 13:
            { return TIBasicTypes.COLON;
            }
          // fall through
          case 72: break;
          case 14:
            { return TIBasicTypes.LT;
            }
          // fall through
          case 73: break;
          case 15:
            { return TIBasicTypes.EQ;
            }
          // fall through
          case 74: break;
          case 16:
            { return TIBasicTypes.GT;
            }
          // fall through
          case 75: break;
          case 17:
            { return TIBasicTypes.SIMPLE_VARIABLE;
            }
          // fall through
          case 76: break;
          case 18:
            { return TIBasicTypes.LBRACKET;
            }
          // fall through
          case 77: break;
          case 19:
            { return TIBasicTypes.RBRACKET;
            }
          // fall through
          case 78: break;
          case 20:
            { return TIBasicTypes.LCURLY;
            }
          // fall through
          case 79: break;
          case 21:
            { return TIBasicTypes.RCURLY;
            }
          // fall through
          case 80: break;
          case 22:
            { return TIBasicTypes.NEG;
            }
          // fall through
          case 81: break;
          case 23:
            { return TIBasicTypes.WINDOW_TOKENS;
            }
          // fall through
          case 82: break;
          case 24:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 25:
            { 
            }
          // fall through
          case 84: break;
          case 26:
            { yypushback(1); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 85: break;
          case 27:
            { yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 86: break;
          case 28:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 29:
            { return TIBasicTypes.NE;
            }
          // fall through
          case 88: break;
          case 30:
            { return TIBasicTypes.COMMENT;
            }
          // fall through
          case 89: break;
          case 31:
            { return TIBasicTypes.LE;
            }
          // fall through
          case 90: break;
          case 32:
            { return TIBasicTypes.GE;
            }
          // fall through
          case 91: break;
          case 33:
            { return TIBasicTypes.LIST_VARIABLE;
            }
          // fall through
          case 92: break;
          case 34:
            { return TIBasicTypes.EQUATION_VARIABLE_1;
            }
          // fall through
          case 93: break;
          case 35:
            { return TIBasicTypes.EQUATION_VARIABLE_3;
            }
          // fall through
          case 94: break;
          case 36:
            { return TIBasicTypes.EQUATION_VARIABLE_4;
            }
          // fall through
          case 95: break;
          case 37:
            { return TIBasicTypes.EXPR_FUNCTIONS_WITH_ARGS;
            }
          // fall through
          case 96: break;
          case 38:
            { yypushback(2); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 97: break;
          case 39:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 40:
            { return TIBasicTypes.ANS_VARIABLE;
            }
          // fall through
          case 99: break;
          case 41:
            { return TIBasicTypes.COMMAND_NO_PARENS;
            }
          // fall through
          case 100: break;
          case 42:
            { return TIBasicTypes.END;
            }
          // fall through
          case 101: break;
          case 43:
            { return TIBasicTypes.IF;
            }
          // fall through
          case 102: break;
          case 44:
            { return TIBasicTypes.COLOR_VARIABLE;
            }
          // fall through
          case 103: break;
          case 45:
            { return TIBasicTypes.EQUATION_VARIABLE_2;
            }
          // fall through
          case 104: break;
          case 46:
            { return TIBasicTypes.MATRIX_VARIABLE;
            }
          // fall through
          case 105: break;
          case 47:
            { return TIBasicTypes.OR;
            }
          // fall through
          case 106: break;
          case 48:
            { return TIBasicTypes.COMMAND_WITH_PARENS;
            }
          // fall through
          case 107: break;
          case 49:
            { return TIBasicTypes.ELSE;
            }
          // fall through
          case 108: break;
          case 50:
            { return TIBasicTypes.FOR;
            }
          // fall through
          case 109: break;
          case 51:
            { return TIBasicTypes.LBL;
            }
          // fall through
          case 110: break;
          case 52:
            { return TIBasicTypes.STRING_VARIABLE;
            }
          // fall through
          case 111: break;
          case 53:
            { return TIBasicTypes.THEN;
            }
          // fall through
          case 112: break;
          case 54:
            { return TIBasicTypes.EXPR_FUNCTIONS_NO_ARGS;
            }
          // fall through
          case 113: break;
          case 55:
            { return TIBasicTypes.AND;
            }
          // fall through
          case 114: break;
          case 56:
            { return TIBasicTypes.XOR;
            }
          // fall through
          case 115: break;
          case 57:
            { return TIBasicTypes.GOTO;
            }
          // fall through
          case 116: break;
          case 58:
            { return TIBasicTypes.WHILE;
            }
          // fall through
          case 117: break;
          case 59:
            { return TIBasicTypes.REPEAT;
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
